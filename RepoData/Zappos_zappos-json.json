[
    {
        "Under_test_method": {
            "Method_body": "protected synchronized void deregisterAll() {\n    JSON_READER_INVOKERS.clear();\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "deregisterAll()",
            "Method_name": "deregisterAll",
            "Class_declaration": "public class JsonReaderCodeGenerator {\n",
            "constructors": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector) {\n    this.zapposJson = zapposJson;\n    this.beanIntrospector = beanIntrospector;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "JsonReaderCodeGenerator",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###deregisterAll",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "protected synchronized void deregisterAll();",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}",
            "TestRelevantFocal": "[deregisterAll###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "protected void deregister(Class<?> clazz) {\n    synchronized (clazz) {\n        JSON_READER_INVOKERS.remove(clazz);\n    }\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();",
            "Parameter_type": "Class<?>",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "deregister(Class<?> clazz)",
            "Method_name": "deregister",
            "Class_declaration": "public class JsonReaderCodeGenerator {\n",
            "constructors": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector) {\n    this.zapposJson = zapposJson;\n    this.beanIntrospector = beanIntrospector;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "JsonReaderCodeGenerator",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###deregister",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "protected void deregister(Class<?> clazz);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}",
            "TestRelevantFocal": "[deregister###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "protected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception {\n    synchronized (clazz) {\n        JsonReaderInvoker readerInvoker = JSON_READER_INVOKERS.get(clazz);\n        if (readerInvoker != null) {\n            return readerInvoker;\n        }\n        StringBuilder methodBody = new StringBuilder();\n        methodBody.append(\"{\\n\");\n        List<PathAndCode> pathAndCodes = generateJsonReaderBody(clazz);\n        if (pathAndCodes.size() > 16 && new HashSet<>(pathAndCodes).size() == pathAndCodes.size()) {\n            methodBody.append(\"int pathHash = getPath($1).hashCode();\\n\");\n            methodBody.append(\"switch(pathHash){\\n\");\n            for (PathAndCode pathAndCode : pathAndCodes) {\n                methodBody.append(\"case \").append(String.valueOf(pathAndCode.getPath().hashCode())).append(\":\\n{\").append(pathAndCode.getCode()).append(\"\\n}\");\n            }\n            methodBody.append(\"}\\n\");\n        } else {\n            int i = 0;\n            methodBody.append(\"String path = getPath($1);\\n\");\n            for (PathAndCode pathAndCode : pathAndCodes) {\n                if (i == 0) {\n                    methodBody.append(\"if\");\n                } else {\n                    methodBody.append(\"else if\");\n                }\n                methodBody.append(\"(\\\"\" + pathAndCode.getPath() + \"\\\".equals(path)){\\n\");\n                methodBody.append(pathAndCode.getCode());\n                methodBody.append(\"}\\n\");\n                i++;\n            }\n        }\n        methodBody.append(\"return $2;\\n}\");\n        zapposJson.debug(\"\\nReader code for \\\"@\\\"\\n=========\\n@\\n=========\\n\", clazz, methodBody);\n        ClassPool classPool = ClassPool.getDefault();\n        classPool.importPackage(\"java.util\");\n        classPool.importPackage(\"java.math\");\n        CtClass jsonCtClass = classPool.get(JsonReader.class.getName());\n        String randomName = Strings.randomAlphabetic(16);\n        jsonCtClass.setName(randomName + \"_JSON_Reader\");\n        CtMethod ctMethod = jsonCtClass.getDeclaredMethod(\"createObject\", new CtClass[] { classPool.get(int.class.getName()), classPool.get(Map.class.getName()) });\n        ctMethod.setBody(methodBody.toString());\n        readerInvoker = new JsonReaderInvoker(zapposJson, jsonCtClass.toClass());\n        JSON_READER_INVOKERS.put(clazz, readerInvoker);\n        return readerInvoker;\n    }\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();private ZapposJson zapposJson;",
            "Parameter_type": "Class<?>",
            "Import_statements": "import java.lang.reflect.Method;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport javassist.CtMethod;\nimport com.zappos.json.util.Strings;\n",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "registerReader(Class<?> clazz)",
            "Method_name": "registerReader",
            "Class_declaration": "public class JsonReaderCodeGenerator {\n",
            "constructors": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector) {\n    this.zapposJson = zapposJson;\n    this.beanIntrospector = beanIntrospector;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "JsonReaderCodeGenerator",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###registerReader",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "protected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;",
            "Junit_version": "4",
            "returnType": "JsonReaderInvoker"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestRelevantFocal": "[registerReader###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public AttributeInfo addAttributeInfo(Class<?> type, JsonBeanAttribute detail) {\n    AttributeInfo attrMapping = new AttributeInfo(type, detail);\n    attrInfos.add(attrMapping);\n    return attrMapping;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "private Class<?> type;private List<AttributeInfo> attrInfos = new ArrayList<>();",
            "Parameter_type": "Class<?>,JsonBeanAttribute",
            "Import_statements": "import java.util.Map;\n",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "addAttributeInfo(Class<?> type, JsonBeanAttribute detail)",
            "Method_name": "addAttributeInfo",
            "Class_declaration": "static class TypeInfo {\n",
            "constructors": "public TypeInfo(Class<?> type) {\n    this.type = type;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "TypeInfo",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###addAttributeInfo",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public AttributeInfo addAttributeInfo(Class<?> type, JsonBeanAttribute detail);",
            "Junit_version": "4",
            "returnType": "AttributeInfo"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonReaderCodeGenerator;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}",
            "TestRelevantFocal": "[addAttributeInfo###2, getDetail###0, getArrayType###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public JsonBeanAttribute getDetail() {\n    return detail;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private JsonBeanAttribute detail;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "getDetail()",
            "Method_name": "getDetail",
            "Class_declaration": "static class AttributeInfo {\n",
            "constructors": "public AttributeInfo(Class<?> attrType, JsonBeanAttribute detail) {\n    this.attrType = attrType;\n    this.detail = detail;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "AttributeInfo",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###getDetail",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public JsonBeanAttribute getDetail();",
            "Junit_version": "4",
            "returnType": "JsonBeanAttribute"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonReaderCodeGenerator;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}",
            "TestRelevantFocal": "[addAttributeInfo###2, getDetail###0, getArrayType###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public int getArrayType() {\n    return arrayType;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private int arrayType = 0;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "getArrayType()",
            "Method_name": "getArrayType",
            "Class_declaration": "static class AttributeInfo {\n",
            "constructors": "public AttributeInfo(Class<?> attrType, JsonBeanAttribute detail) {\n    this.attrType = attrType;\n    this.detail = detail;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "AttributeInfo",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###getArrayType",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public int getArrayType();",
            "Junit_version": "4",
            "returnType": "int"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonReaderCodeGenerator;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}",
            "TestRelevantFocal": "[addAttributeInfo###2, getDetail###0, getArrayType###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Class<?> getType() {\n    return type;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private Class<?> type;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "getType()",
            "Method_name": "getType",
            "Class_declaration": "static class TypeInfo {\n",
            "constructors": "public TypeInfo(Class<?> type) {\n    this.type = type;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "TypeInfo",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###getType",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public Class<?> getType();",
            "Junit_version": "4",
            "returnType": "Class<?>"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}",
            "TestRelevantFocal": "[getType###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Class<?> getAttributeType() {\n    return attrType;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private Class<?> attrType;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "getAttributeType()",
            "Method_name": "getAttributeType",
            "Class_declaration": "static class AttributeInfo {\n",
            "constructors": "public AttributeInfo(Class<?> attrType, JsonBeanAttribute detail) {\n    this.attrType = attrType;\n    this.detail = detail;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "AttributeInfo",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###getAttributeType",
            "Parameter_num": "0",
            "contextMethod": "protected synchronized void deregisterAll() {\n    JSON_READER_INVOKERS.clear();\n}\npublic String getPath() {\n    return path;\n}\npublic String getCode() {\n    return code;\n}\n@Override\npublic int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((path == null) ? 0 : path.hashCode());\n    return result;\n}\n@Override\npublic String toString() {\n    return type.getSimpleName() + attrInfos;\n}\npublic Class<?> getType() {\n    return type;\n}\npublic List<AttributeInfo> getAttributeInfos() {\n    return attrInfos;\n}\n@Override\npublic String toString() {\n    return attrType.getSimpleName() + \"#\" + detail.toString() + \"->\" + detail.getJsonKey();\n}\npublic JsonBeanAttribute getDetail() {\n    return detail;\n}\npublic int getArrayType() {\n    return arrayType;\n}\npublic Class<?> getCollectionType() {\n    return collectionType;\n}",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public Class<?> getAttributeType();",
            "Junit_version": "4",
            "returnType": "Class<?>"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonReaderCodeGenerator;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test06",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}",
            "TestRelevantFocal": "[addAttributeInfo###2, getAttributeType###0, getArrayType###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public String getPath() {\n    return path;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private String path;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "getPath()",
            "Method_name": "getPath",
            "Class_declaration": "static class PathAndCode {\n",
            "constructors": "public PathAndCode(String path, String code) {\n    this.path = path;\n    this.code = code;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "PathAndCode",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###getPath",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public String getPath();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonReaderCodeGenerator;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test15",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[equals###1, getPath###0, getCode###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public List<AttributeInfo> getAttributeInfos() {\n    return attrInfos;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private List<AttributeInfo> attrInfos = new ArrayList<>();",
            "Parameter_type": "",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "getAttributeInfos()",
            "Method_name": "getAttributeInfos",
            "Class_declaration": "static class TypeInfo {\n",
            "constructors": "public TypeInfo(Class<?> type) {\n    this.type = type;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "TypeInfo",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###getAttributeInfos",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public List<AttributeInfo> getAttributeInfos();",
            "Junit_version": "4",
            "returnType": "List<AttributeInfo>"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport java.util.List;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test08",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}",
            "TestRelevantFocal": "[getAttributeInfos###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public String getCode() {\n    return code;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private String code;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "getCode()",
            "Method_name": "getCode",
            "Class_declaration": "static class PathAndCode {\n",
            "constructors": "public PathAndCode(String path, String code) {\n    this.path = path;\n    this.code = code;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "PathAndCode",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###getCode",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public String getCode();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonReaderCodeGenerator;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test15",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[equals###1, getPath###0, getCode###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic boolean equals(Object obj) {\n    if (this == obj)\n        return true;\n    if (obj == null)\n        return false;\n    if (getClass() != obj.getClass())\n        return false;\n    PathAndCode other = (PathAndCode) obj;\n    if (path == null) {\n        if (other.path != null)\n            return false;\n    } else if (!path.equals(other.path))\n        return false;\n    return true;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "6",
            "Filed": "private String path;",
            "Parameter_type": "Object",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "equals(Object obj)",
            "Method_name": "equals",
            "Class_declaration": "static class PathAndCode {\n",
            "constructors": "public PathAndCode(String path, String code) {\n    this.path = path;\n    this.code = code;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "PathAndCode",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###equals",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public boolean equals(Object obj);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonReaderCodeGenerator;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test15",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[equals###1, getPath###0, getCode###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public AttributeInfo setArrayType(int arrayType) {\n    this.arrayType = arrayType;\n    return this;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private int arrayType = 0;",
            "Parameter_type": "int",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "setArrayType(int arrayType)",
            "Method_name": "setArrayType",
            "Class_declaration": "static class AttributeInfo {\n",
            "constructors": "public AttributeInfo(Class<?> attrType, JsonBeanAttribute detail) {\n    this.attrType = attrType;\n    this.detail = detail;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "AttributeInfo",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###setArrayType",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public AttributeInfo setArrayType(int arrayType);",
            "Junit_version": "4",
            "returnType": "AttributeInfo"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test18",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}",
            "TestRelevantFocal": "[setArrayType###1, getArrayType###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Class<?> getCollectionType() {\n    return collectionType;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private Class<?> collectionType;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "getCollectionType()",
            "Method_name": "getCollectionType",
            "Class_declaration": "static class AttributeInfo {\n",
            "constructors": "public AttributeInfo(Class<?> attrType, JsonBeanAttribute detail) {\n    this.attrType = attrType;\n    this.detail = detail;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "AttributeInfo",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###getCollectionType",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public Class<?> getCollectionType();",
            "Junit_version": "4",
            "returnType": "Class<?>"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test19",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}",
            "TestRelevantFocal": "[getCollectionType###0, getArrayType###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public AttributeInfo setCollectionType(Class<?> collectionType) {\n    this.collectionType = collectionType;\n    return this;\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private Class<?> collectionType;",
            "Parameter_type": "Class<?>",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "setCollectionType(Class<?> collectionType)",
            "Method_name": "setCollectionType",
            "Class_declaration": "static class AttributeInfo {\n",
            "constructors": "public AttributeInfo(Class<?> attrType, JsonBeanAttribute detail) {\n    this.attrType = attrType;\n    this.detail = detail;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "AttributeInfo",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###setCollectionType",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public AttributeInfo setCollectionType(Class<?> collectionType);",
            "Junit_version": "4",
            "returnType": "AttributeInfo"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test20",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}",
            "TestRelevantFocal": "[setCollectionType###1, getArrayType###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String toString() {\n    return attrType.getSimpleName() + \"#\" + detail.toString() + \"->\" + detail.getJsonKey();\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private Class<?> attrType;private JsonBeanAttribute detail;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "toString()",
            "Method_name": "toString",
            "Class_declaration": "static class AttributeInfo {\n",
            "constructors": "public AttributeInfo(Class<?> attrType, JsonBeanAttribute detail) {\n    this.attrType = attrType;\n    this.detail = detail;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "AttributeInfo",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###toString",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public String toString();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test22",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}",
            "TestRelevantFocal": "[toString###0, toString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "protected JsonReaderInvoker getReader(Class<?> clazz) {\n    return JSON_READER_INVOKERS.get(clazz);\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private final Map<Class<?>, JsonReaderInvoker> JSON_READER_INVOKERS = new ConcurrentHashMap<>();",
            "Parameter_type": "Class<?>",
            "Import_statements": "",
            "public_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "getReader(Class<?> clazz)",
            "Method_name": "getReader",
            "Class_declaration": "public class JsonReaderCodeGenerator {\n",
            "constructors": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector) {\n    this.zapposJson = zapposJson;\n    this.beanIntrospector = beanIntrospector;\n}",
            "all_method_signature": "public JsonReaderCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonReaderInvoker getReader(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonReaderInvoker registerReader(Class<?> clazz) throws Exception;\nprivate List<PathAndCode> generateJsonReaderBody(Class<?> clazz) throws Exception;\nprivate void traverseObjectTree(Class<?> clazz, String[] paths, int level, Map<String, TypeInfo> typeInfos) throws Exception;\nprivate String getObjectAccessPath(String[] paths, int level);\nprivate TypeInfo getTypeInfo(Map<String, TypeInfo> typeMaps, String path, Class<?> superType);\nprivate String generateCollectionCode(JsonBeanAttribute beanAttr, Class<?> collectionType, Class<?> componentType, String valueName, String tmpValueName);\nprivate String generateArrayFromListCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);\nprivate String generateTypeConversionCode(JsonBeanAttribute beanAttr, Class<?> attrType, String valueName, String tmpValueName);",
            "Class_name": "JsonReaderCodeGenerator",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReaderCodeGenerator.java###getReader",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.math.BigDecimal;\n\nimport java.math.BigInteger;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtMethod;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport com.zappos.json.util.TypeImpl;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "protected JsonReaderInvoker getReader(Class<?> clazz);",
            "Junit_version": "4",
            "returnType": "JsonReaderInvoker"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReaderCodeGenerator_ESTest.java###test00+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test00+++deregisterAll###0, JsonReaderCodeGenerator_ESTest.java###test01+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test01+++deregister###1, JsonReaderCodeGenerator_ESTest.java###test02+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test02+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test02+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test02+++fail###1, JsonReaderCodeGenerator_ESTest.java###test03+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test03+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test03+++fail###1, JsonReaderCodeGenerator_ESTest.java###test04+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test04+++getDetail###0, JsonReaderCodeGenerator_ESTest.java###test04+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test04+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test05+++getType###0, JsonReaderCodeGenerator_ESTest.java###test05+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test05+++isArray###0, JsonReaderCodeGenerator_ESTest.java###test06+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test06+++getAttributeType###0, JsonReaderCodeGenerator_ESTest.java###test06+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test06+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test07+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test07+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test08+++getAttributeInfos###0, JsonReaderCodeGenerator_ESTest.java###test08+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test08+++isEmpty###0, JsonReaderCodeGenerator_ESTest.java###test09+++addAttributeInfo###2, JsonReaderCodeGenerator_ESTest.java###test09+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test09+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test10+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test10+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++equals###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test11+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test11+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test12+++equals###1, JsonReaderCodeGenerator_ESTest.java###test12+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test13+++equals###1, JsonReaderCodeGenerator_ESTest.java###test13+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test14+++equals###1, JsonReaderCodeGenerator_ESTest.java###test14+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test15+++equals###1, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getPath###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test15+++getCode###0, JsonReaderCodeGenerator_ESTest.java###test15+++assertFalse###1, JsonReaderCodeGenerator_ESTest.java###test16+++equals###1, JsonReaderCodeGenerator_ESTest.java###test16+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test17+++equals###1, JsonReaderCodeGenerator_ESTest.java###test17+++assertTrue###1, JsonReaderCodeGenerator_ESTest.java###test18+++setArrayType###1, JsonReaderCodeGenerator_ESTest.java###test18+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test18+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test19+++getCollectionType###0, JsonReaderCodeGenerator_ESTest.java###test19+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test19+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test20+++setCollectionType###1, JsonReaderCodeGenerator_ESTest.java###test20+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test20+++getArrayType###0, JsonReaderCodeGenerator_ESTest.java###test21+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test21+++toString###0, JsonReaderCodeGenerator_ESTest.java###test21+++fail###1, JsonReaderCodeGenerator_ESTest.java###test22+++toString###0, JsonReaderCodeGenerator_ESTest.java###test22+++assertEquals###2, JsonReaderCodeGenerator_ESTest.java###test23+++getReader###1, JsonReaderCodeGenerator_ESTest.java###test23+++assertNull###1, JsonReaderCodeGenerator_ESTest.java###test24+++getInstance###0, JsonReaderCodeGenerator_ESTest.java###test24+++verifyException###2, JsonReaderCodeGenerator_ESTest.java###test24+++registerReader###1, JsonReaderCodeGenerator_ESTest.java###test24+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:55:24 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReaderCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReaderCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReaderCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonReaderInvoker\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java###test23",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonReaderCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    jsonReaderCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, (JsonBeanIntrospector) null);\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);\n    jsonReaderCodeGenerator_AttributeInfo0.getDetail();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\")S+2Mz5\", \")S+2Mz5\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();\n    assertEquals(\")S+2Mz5\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);\n    int int0 = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();\n    assertEquals(\"OBJECT\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"\", \"D]#&Gx<^@=`\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n    assertEquals(\"D]#&Gx<^@=`\", jsonReaderCodeGenerator_PathAndCode1.getCode());\n    assertEquals(\"\", jsonReaderCodeGenerator_PathAndCode1.getPath());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"w#C&S\", \"w#C&S\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode((String) null, (String) null);\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"JavaTimeInstantFormatter[]\", \"JavaTimeInstantFormatter[]\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(\"JavaTimeInstantFormatter[]\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"s=<ur\", \"`YWS=]l1MH/qfeMT \");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals((Object) null);\n    assertEquals(\"s=<ur\", jsonReaderCodeGenerator_PathAndCode0.getPath());\n    assertEquals(\"`YWS=]l1MH/qfeMT \", jsonReaderCodeGenerator_PathAndCode0.getCode());\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(\"OBJECT\", \"OBJECT\");\n    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode1.equals(jsonReaderCodeGenerator_PathAndCode0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);\n    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    jsonReaderCodeGenerator_AttributeInfo0.getCollectionType();\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);\n    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator_AttributeInfo0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;\n    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);\n    String string0 = jsonReaderCodeGenerator_TypeInfo0.toString();\n    assertEquals(\"JsonReaderInvoker[]\", string0);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;\n    // Undeclared exception!\n    try {\n        jsonReaderCodeGenerator0.registerReader(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonReaderCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<Object> class0 = Object.class;\n    JsonReaderInvoker jsonReaderInvoker0 = jsonReaderCodeGenerator0.getReader(class0);\n    assertNull(jsonReaderInvoker0);\n}",
            "TestRelevantFocal": "[getReader###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:55:24 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonReaderCodeGenerator;\nimport com.zappos.json.JsonReaderInvoker;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@SuppressWarnings(\"unchecked\")\npublic <T> T[] toArray(T[] a) {\n    return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n}",
            "all_field_declaration": "private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\nprivate static final int DEFAULT_CAPACITY = 10;\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\ntransient Object[] elementData;\ntransient int modCount = 0;\nprivate int size;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "transient Object[] elementData;private int size;",
            "Parameter_type": "T[]",
            "Import_statements": "import java.util.Arrays;\n",
            "public_method_signature": "public boolean add(Object e);\npublic Object get(int index);\npublic int size();\npublic Object[] toArray();\npublic T[] toArray(T[] a);",
            "public_field": "",
            "Method_statement": "toArray(T() a)",
            "Method_name": "toArray",
            "Class_declaration": "public class ObjectArray {\n",
            "constructors": "",
            "all_method_signature": "private void ensureExplicitCapacity(int minCapacity);\nprivate void ensureCapacityInternal(int minCapacity);\nprivate void grow(int minCapacity);\nprivate static int hugeCapacity(int minCapacity);\npublic boolean add(Object e);\npublic Object get(int index);\npublic int size();\npublic Object[] toArray();\npublic T[] toArray(T[] a);",
            "Class_name": "ObjectArray",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/ObjectArray.java###toArray",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.Arrays;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public T[] toArray(T[] a);",
            "Junit_version": "4",
            "returnType": "T[]"
        },
        "Test_method": {
            "AllTest2Focal": "[ObjectArray_ESTest.java###test00+++toArray###1, ObjectArray_ESTest.java###test00+++fail###1, ObjectArray_ESTest.java###test01+++toArray###0, ObjectArray_ESTest.java###test01+++fail###1, ObjectArray_ESTest.java###test02+++size###0, ObjectArray_ESTest.java###test02+++assertEquals###2, ObjectArray_ESTest.java###test03+++verifyException###2, ObjectArray_ESTest.java###test03+++get###1, ObjectArray_ESTest.java###test03+++fail###1, ObjectArray_ESTest.java###test04+++verifyException###2, ObjectArray_ESTest.java###test04+++get###1, ObjectArray_ESTest.java###test04+++fail###1, ObjectArray_ESTest.java###test05+++add###1, ObjectArray_ESTest.java###test05+++assertTrue###1, ObjectArray_ESTest.java###test06+++verifyException###2, ObjectArray_ESTest.java###test06+++add###1, ObjectArray_ESTest.java###test06+++fail###1, ObjectArray_ESTest.java###test07+++add###1, ObjectArray_ESTest.java###test07+++assertTrue###1, ObjectArray_ESTest.java###test07+++toArray###1, ObjectArray_ESTest.java###test07+++assertEquals###2, ObjectArray_ESTest.java###test08+++toArray###1, ObjectArray_ESTest.java###test08+++assertEquals###2, ObjectArray_ESTest.java###test09+++add###1, ObjectArray_ESTest.java###test09+++assertTrue###1, ObjectArray_ESTest.java###test09+++toArray###0, ObjectArray_ESTest.java###test09+++assertEquals###2, ObjectArray_ESTest.java###test10+++toArray###0, ObjectArray_ESTest.java###test10+++assertEquals###2, ObjectArray_ESTest.java###test11+++add###1, ObjectArray_ESTest.java###test11+++size###0, ObjectArray_ESTest.java###test11+++assertEquals###2, ObjectArray_ESTest.java###test12+++add###1, ObjectArray_ESTest.java###test12+++get###1, ObjectArray_ESTest.java###test12+++assertNull###1, ObjectArray_ESTest.java###test13+++add###1, ObjectArray_ESTest.java###test13+++verifyException###2, ObjectArray_ESTest.java###test13+++toArray###1, ObjectArray_ESTest.java###test13+++fail###1, ObjectArray_ESTest.java###test14+++verifyException###2, ObjectArray_ESTest.java###test14+++get###1, ObjectArray_ESTest.java###test14+++fail###1, ObjectArray_ESTest.java###test15+++verifyException###2, ObjectArray_ESTest.java###test15+++get###1, ObjectArray_ESTest.java###test15+++fail###1, ObjectArray_ESTest.java###test16+++verifyException###2, ObjectArray_ESTest.java###test16+++add###1, ObjectArray_ESTest.java###test16+++fail###1, ObjectArray_ESTest.java###test17+++add###1, ObjectArray_ESTest.java###test17+++add###1, ObjectArray_ESTest.java###test17+++get###1, ObjectArray_ESTest.java###test17+++assertSame###2, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++assertEquals###2, ObjectArray_ESTest.java###test18+++size###0, ObjectArray_ESTest.java###test18+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:09:15 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ObjectArray_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.ObjectArray\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ObjectArray_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.ObjectArray\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ObjectArray_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.ObjectArray\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.ObjectArray;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/ObjectArray_ESTest.java###test13",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    Integer[] integerArray0 = new Integer[2];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    // Undeclared exception!\n    try {\n        objectArray0.toArray();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-837);\n    int int0 = objectArray0.size();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    // Undeclared exception!\n    try {\n        objectArray0.get(0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-2461);\n    // Undeclared exception!\n    try {\n        objectArray0.get(2668);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 2668, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.modCount = (-1995);\n    boolean boolean0 = objectArray0.add(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-1995);\n    // Undeclared exception!\n    try {\n        objectArray0.add(object0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[6];\n    objectArray0.elementData = objectArray1;\n    boolean boolean0 = objectArray0.add(objectArray1[1]);\n    assertTrue(boolean0);\n    Integer[] integerArray0 = new Integer[3];\n    Integer[] integerArray1 = objectArray0.toArray(integerArray0);\n    assertEquals(1, integerArray1.length);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[7];\n    objectArray0.elementData = objectArray1;\n    Integer[] integerArray0 = new Integer[2];\n    Integer[] integerArray1 = objectArray0.toArray(integerArray0);\n    assertEquals(0, integerArray1.length);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[8];\n    objectArray0.elementData = objectArray1;\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\n    boolean boolean0 = objectArray0.add(integer0);\n    assertTrue(boolean0);\n    Object[] objectArray2 = objectArray0.toArray();\n    assertEquals(1, objectArray2.length);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    Object[] objectArray2 = objectArray0.toArray();\n    assertEquals(0, objectArray2.length);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[8];\n    objectArray0.elementData = objectArray1;\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\n    objectArray0.add(integer0);\n    int int0 = objectArray0.size();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[6];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray1[1]);\n    Object object0 = objectArray0.get(0);\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray0);\n    Integer[] integerArray0 = new Integer[0];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Arrays\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    // Undeclared exception!\n    try {\n        objectArray0.get((-348));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    // Undeclared exception!\n    try {\n        objectArray0.get((-1569));\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // -1569\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer[] integerArray0 = new Integer[1];\n    objectArray0.elementData = (Object[]) integerArray0;\n    // Undeclared exception!\n    try {\n        objectArray0.add(objectArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // com.zappos.json.util.ObjectArray\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer integer0 = new Integer((-2454));\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(integer0);\n    objectArray0.add(object0);\n    Object object1 = objectArray0.get(1);\n    assertSame(object1, object0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer integer0 = new Integer((-2454));\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(integer0);\n    objectArray0.add(object0);\n    objectArray0.add(integer0);\n    objectArray0.add(integer0);\n    objectArray0.add((Object) null);\n    boolean boolean0 = objectArray0.add(integer0);\n    assertEquals(6, objectArray0.size());\n    assertTrue(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray0);\n    Integer[] integerArray0 = new Integer[0];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Arrays\", e);\n    }\n}",
            "TestRelevantFocal": "[add###1, toArray###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:09:15 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.ObjectArray;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ObjectArray_ESTest extends ObjectArray_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Object[] toArray() {\n    return Arrays.copyOf(elementData, size);\n}",
            "all_field_declaration": "private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\nprivate static final int DEFAULT_CAPACITY = 10;\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\ntransient Object[] elementData;\ntransient int modCount = 0;\nprivate int size;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "transient Object[] elementData;private int size;",
            "Parameter_type": "",
            "Import_statements": "import java.util.Arrays;\n",
            "public_method_signature": "public boolean add(Object e);\npublic Object get(int index);\npublic int size();\npublic Object[] toArray();\npublic T[] toArray(T[] a);",
            "public_field": "",
            "Method_statement": "toArray()",
            "Method_name": "toArray",
            "Class_declaration": "public class ObjectArray {\n",
            "constructors": "",
            "all_method_signature": "private void ensureExplicitCapacity(int minCapacity);\nprivate void ensureCapacityInternal(int minCapacity);\nprivate void grow(int minCapacity);\nprivate static int hugeCapacity(int minCapacity);\npublic boolean add(Object e);\npublic Object get(int index);\npublic int size();\npublic Object[] toArray();\npublic T[] toArray(T[] a);",
            "Class_name": "ObjectArray",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/ObjectArray.java###toArray",
            "Parameter_num": "0",
            "contextMethod": "public int size() {\n    return size;\n}",
            "all_Import_statements": "import java.util.Arrays;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public Object[] toArray();",
            "Junit_version": "4",
            "returnType": "Object[]"
        },
        "Test_method": {
            "AllTest2Focal": "[ObjectArray_ESTest.java###test00+++toArray###1, ObjectArray_ESTest.java###test00+++fail###1, ObjectArray_ESTest.java###test01+++toArray###0, ObjectArray_ESTest.java###test01+++fail###1, ObjectArray_ESTest.java###test02+++size###0, ObjectArray_ESTest.java###test02+++assertEquals###2, ObjectArray_ESTest.java###test03+++verifyException###2, ObjectArray_ESTest.java###test03+++get###1, ObjectArray_ESTest.java###test03+++fail###1, ObjectArray_ESTest.java###test04+++verifyException###2, ObjectArray_ESTest.java###test04+++get###1, ObjectArray_ESTest.java###test04+++fail###1, ObjectArray_ESTest.java###test05+++add###1, ObjectArray_ESTest.java###test05+++assertTrue###1, ObjectArray_ESTest.java###test06+++verifyException###2, ObjectArray_ESTest.java###test06+++add###1, ObjectArray_ESTest.java###test06+++fail###1, ObjectArray_ESTest.java###test07+++add###1, ObjectArray_ESTest.java###test07+++assertTrue###1, ObjectArray_ESTest.java###test07+++toArray###1, ObjectArray_ESTest.java###test07+++assertEquals###2, ObjectArray_ESTest.java###test08+++toArray###1, ObjectArray_ESTest.java###test08+++assertEquals###2, ObjectArray_ESTest.java###test09+++add###1, ObjectArray_ESTest.java###test09+++assertTrue###1, ObjectArray_ESTest.java###test09+++toArray###0, ObjectArray_ESTest.java###test09+++assertEquals###2, ObjectArray_ESTest.java###test10+++toArray###0, ObjectArray_ESTest.java###test10+++assertEquals###2, ObjectArray_ESTest.java###test11+++add###1, ObjectArray_ESTest.java###test11+++size###0, ObjectArray_ESTest.java###test11+++assertEquals###2, ObjectArray_ESTest.java###test12+++add###1, ObjectArray_ESTest.java###test12+++get###1, ObjectArray_ESTest.java###test12+++assertNull###1, ObjectArray_ESTest.java###test13+++add###1, ObjectArray_ESTest.java###test13+++verifyException###2, ObjectArray_ESTest.java###test13+++toArray###1, ObjectArray_ESTest.java###test13+++fail###1, ObjectArray_ESTest.java###test14+++verifyException###2, ObjectArray_ESTest.java###test14+++get###1, ObjectArray_ESTest.java###test14+++fail###1, ObjectArray_ESTest.java###test15+++verifyException###2, ObjectArray_ESTest.java###test15+++get###1, ObjectArray_ESTest.java###test15+++fail###1, ObjectArray_ESTest.java###test16+++verifyException###2, ObjectArray_ESTest.java###test16+++add###1, ObjectArray_ESTest.java###test16+++fail###1, ObjectArray_ESTest.java###test17+++add###1, ObjectArray_ESTest.java###test17+++add###1, ObjectArray_ESTest.java###test17+++get###1, ObjectArray_ESTest.java###test17+++assertSame###2, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++assertEquals###2, ObjectArray_ESTest.java###test18+++size###0, ObjectArray_ESTest.java###test18+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:09:15 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ObjectArray_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.ObjectArray\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ObjectArray_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.ObjectArray\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ObjectArray_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.ObjectArray\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.ObjectArray;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/ObjectArray_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    Integer[] integerArray0 = new Integer[2];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    // Undeclared exception!\n    try {\n        objectArray0.toArray();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-837);\n    int int0 = objectArray0.size();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    // Undeclared exception!\n    try {\n        objectArray0.get(0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-2461);\n    // Undeclared exception!\n    try {\n        objectArray0.get(2668);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 2668, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.modCount = (-1995);\n    boolean boolean0 = objectArray0.add(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-1995);\n    // Undeclared exception!\n    try {\n        objectArray0.add(object0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[6];\n    objectArray0.elementData = objectArray1;\n    boolean boolean0 = objectArray0.add(objectArray1[1]);\n    assertTrue(boolean0);\n    Integer[] integerArray0 = new Integer[3];\n    Integer[] integerArray1 = objectArray0.toArray(integerArray0);\n    assertEquals(1, integerArray1.length);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[7];\n    objectArray0.elementData = objectArray1;\n    Integer[] integerArray0 = new Integer[2];\n    Integer[] integerArray1 = objectArray0.toArray(integerArray0);\n    assertEquals(0, integerArray1.length);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[8];\n    objectArray0.elementData = objectArray1;\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\n    boolean boolean0 = objectArray0.add(integer0);\n    assertTrue(boolean0);\n    Object[] objectArray2 = objectArray0.toArray();\n    assertEquals(1, objectArray2.length);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    Object[] objectArray2 = objectArray0.toArray();\n    assertEquals(0, objectArray2.length);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[8];\n    objectArray0.elementData = objectArray1;\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\n    objectArray0.add(integer0);\n    int int0 = objectArray0.size();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[6];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray1[1]);\n    Object object0 = objectArray0.get(0);\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray0);\n    Integer[] integerArray0 = new Integer[0];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Arrays\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    // Undeclared exception!\n    try {\n        objectArray0.get((-348));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    // Undeclared exception!\n    try {\n        objectArray0.get((-1569));\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // -1569\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer[] integerArray0 = new Integer[1];\n    objectArray0.elementData = (Object[]) integerArray0;\n    // Undeclared exception!\n    try {\n        objectArray0.add(objectArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // com.zappos.json.util.ObjectArray\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer integer0 = new Integer((-2454));\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(integer0);\n    objectArray0.add(object0);\n    Object object1 = objectArray0.get(1);\n    assertSame(object1, object0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer integer0 = new Integer((-2454));\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(integer0);\n    objectArray0.add(object0);\n    objectArray0.add(integer0);\n    objectArray0.add(integer0);\n    objectArray0.add((Object) null);\n    boolean boolean0 = objectArray0.add(integer0);\n    assertEquals(6, objectArray0.size());\n    assertTrue(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    // Undeclared exception!\n    try {\n        objectArray0.toArray();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}",
            "TestRelevantFocal": "[toArray###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:09:15 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.ObjectArray;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ObjectArray_ESTest extends ObjectArray_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public int size() {\n    return size;\n}",
            "all_field_declaration": "private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\nprivate static final int DEFAULT_CAPACITY = 10;\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\ntransient Object[] elementData;\ntransient int modCount = 0;\nprivate int size;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private int size;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public boolean add(Object e);\npublic Object get(int index);\npublic int size();\npublic Object[] toArray();\npublic T[] toArray(T[] a);",
            "public_field": "",
            "Method_statement": "size()",
            "Method_name": "size",
            "Class_declaration": "public class ObjectArray {\n",
            "constructors": "",
            "all_method_signature": "private void ensureExplicitCapacity(int minCapacity);\nprivate void ensureCapacityInternal(int minCapacity);\nprivate void grow(int minCapacity);\nprivate static int hugeCapacity(int minCapacity);\npublic boolean add(Object e);\npublic Object get(int index);\npublic int size();\npublic Object[] toArray();\npublic T[] toArray(T[] a);",
            "Class_name": "ObjectArray",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/ObjectArray.java###size",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.Arrays;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public int size();",
            "Junit_version": "4",
            "returnType": "int"
        },
        "Test_method": {
            "AllTest2Focal": "[ObjectArray_ESTest.java###test00+++toArray###1, ObjectArray_ESTest.java###test00+++fail###1, ObjectArray_ESTest.java###test01+++toArray###0, ObjectArray_ESTest.java###test01+++fail###1, ObjectArray_ESTest.java###test02+++size###0, ObjectArray_ESTest.java###test02+++assertEquals###2, ObjectArray_ESTest.java###test03+++verifyException###2, ObjectArray_ESTest.java###test03+++get###1, ObjectArray_ESTest.java###test03+++fail###1, ObjectArray_ESTest.java###test04+++verifyException###2, ObjectArray_ESTest.java###test04+++get###1, ObjectArray_ESTest.java###test04+++fail###1, ObjectArray_ESTest.java###test05+++add###1, ObjectArray_ESTest.java###test05+++assertTrue###1, ObjectArray_ESTest.java###test06+++verifyException###2, ObjectArray_ESTest.java###test06+++add###1, ObjectArray_ESTest.java###test06+++fail###1, ObjectArray_ESTest.java###test07+++add###1, ObjectArray_ESTest.java###test07+++assertTrue###1, ObjectArray_ESTest.java###test07+++toArray###1, ObjectArray_ESTest.java###test07+++assertEquals###2, ObjectArray_ESTest.java###test08+++toArray###1, ObjectArray_ESTest.java###test08+++assertEquals###2, ObjectArray_ESTest.java###test09+++add###1, ObjectArray_ESTest.java###test09+++assertTrue###1, ObjectArray_ESTest.java###test09+++toArray###0, ObjectArray_ESTest.java###test09+++assertEquals###2, ObjectArray_ESTest.java###test10+++toArray###0, ObjectArray_ESTest.java###test10+++assertEquals###2, ObjectArray_ESTest.java###test11+++add###1, ObjectArray_ESTest.java###test11+++size###0, ObjectArray_ESTest.java###test11+++assertEquals###2, ObjectArray_ESTest.java###test12+++add###1, ObjectArray_ESTest.java###test12+++get###1, ObjectArray_ESTest.java###test12+++assertNull###1, ObjectArray_ESTest.java###test13+++add###1, ObjectArray_ESTest.java###test13+++verifyException###2, ObjectArray_ESTest.java###test13+++toArray###1, ObjectArray_ESTest.java###test13+++fail###1, ObjectArray_ESTest.java###test14+++verifyException###2, ObjectArray_ESTest.java###test14+++get###1, ObjectArray_ESTest.java###test14+++fail###1, ObjectArray_ESTest.java###test15+++verifyException###2, ObjectArray_ESTest.java###test15+++get###1, ObjectArray_ESTest.java###test15+++fail###1, ObjectArray_ESTest.java###test16+++verifyException###2, ObjectArray_ESTest.java###test16+++add###1, ObjectArray_ESTest.java###test16+++fail###1, ObjectArray_ESTest.java###test17+++add###1, ObjectArray_ESTest.java###test17+++add###1, ObjectArray_ESTest.java###test17+++get###1, ObjectArray_ESTest.java###test17+++assertSame###2, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++assertEquals###2, ObjectArray_ESTest.java###test18+++size###0, ObjectArray_ESTest.java###test18+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:09:15 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ObjectArray_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.ObjectArray\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ObjectArray_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.ObjectArray\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ObjectArray_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.ObjectArray\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.ObjectArray;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/ObjectArray_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    Integer[] integerArray0 = new Integer[2];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    // Undeclared exception!\n    try {\n        objectArray0.toArray();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-837);\n    int int0 = objectArray0.size();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    // Undeclared exception!\n    try {\n        objectArray0.get(0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-2461);\n    // Undeclared exception!\n    try {\n        objectArray0.get(2668);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 2668, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.modCount = (-1995);\n    boolean boolean0 = objectArray0.add(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-1995);\n    // Undeclared exception!\n    try {\n        objectArray0.add(object0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[6];\n    objectArray0.elementData = objectArray1;\n    boolean boolean0 = objectArray0.add(objectArray1[1]);\n    assertTrue(boolean0);\n    Integer[] integerArray0 = new Integer[3];\n    Integer[] integerArray1 = objectArray0.toArray(integerArray0);\n    assertEquals(1, integerArray1.length);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[7];\n    objectArray0.elementData = objectArray1;\n    Integer[] integerArray0 = new Integer[2];\n    Integer[] integerArray1 = objectArray0.toArray(integerArray0);\n    assertEquals(0, integerArray1.length);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[8];\n    objectArray0.elementData = objectArray1;\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\n    boolean boolean0 = objectArray0.add(integer0);\n    assertTrue(boolean0);\n    Object[] objectArray2 = objectArray0.toArray();\n    assertEquals(1, objectArray2.length);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    Object[] objectArray2 = objectArray0.toArray();\n    assertEquals(0, objectArray2.length);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[8];\n    objectArray0.elementData = objectArray1;\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\n    objectArray0.add(integer0);\n    int int0 = objectArray0.size();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[6];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray1[1]);\n    Object object0 = objectArray0.get(0);\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray0);\n    Integer[] integerArray0 = new Integer[0];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Arrays\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    // Undeclared exception!\n    try {\n        objectArray0.get((-348));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    // Undeclared exception!\n    try {\n        objectArray0.get((-1569));\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // -1569\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer[] integerArray0 = new Integer[1];\n    objectArray0.elementData = (Object[]) integerArray0;\n    // Undeclared exception!\n    try {\n        objectArray0.add(objectArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // com.zappos.json.util.ObjectArray\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer integer0 = new Integer((-2454));\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(integer0);\n    objectArray0.add(object0);\n    Object object1 = objectArray0.get(1);\n    assertSame(object1, object0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer integer0 = new Integer((-2454));\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(integer0);\n    objectArray0.add(object0);\n    objectArray0.add(integer0);\n    objectArray0.add(integer0);\n    objectArray0.add((Object) null);\n    boolean boolean0 = objectArray0.add(integer0);\n    assertEquals(6, objectArray0.size());\n    assertTrue(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-837);\n    int int0 = objectArray0.size();\n    assertEquals(0, int0);\n}",
            "TestRelevantFocal": "[size###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:09:15 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.ObjectArray;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ObjectArray_ESTest extends ObjectArray_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Object get(int index) {\n    if (index >= size)\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    return elementData[index];\n}",
            "all_field_declaration": "private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\nprivate static final int DEFAULT_CAPACITY = 10;\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\ntransient Object[] elementData;\ntransient int modCount = 0;\nprivate int size;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "transient Object[] elementData;private int size;",
            "Parameter_type": "int",
            "Import_statements": "",
            "public_method_signature": "public boolean add(Object e);\npublic Object get(int index);\npublic int size();\npublic Object[] toArray();\npublic T[] toArray(T[] a);",
            "public_field": "",
            "Method_statement": "get(int index)",
            "Method_name": "get",
            "Class_declaration": "public class ObjectArray {\n",
            "constructors": "",
            "all_method_signature": "private void ensureExplicitCapacity(int minCapacity);\nprivate void ensureCapacityInternal(int minCapacity);\nprivate void grow(int minCapacity);\nprivate static int hugeCapacity(int minCapacity);\npublic boolean add(Object e);\npublic Object get(int index);\npublic int size();\npublic Object[] toArray();\npublic T[] toArray(T[] a);",
            "Class_name": "ObjectArray",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/ObjectArray.java###get",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.Arrays;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public Object get(int index);",
            "Junit_version": "4",
            "returnType": "Object"
        },
        "Test_method": {
            "AllTest2Focal": "[ObjectArray_ESTest.java###test00+++toArray###1, ObjectArray_ESTest.java###test00+++fail###1, ObjectArray_ESTest.java###test01+++toArray###0, ObjectArray_ESTest.java###test01+++fail###1, ObjectArray_ESTest.java###test02+++size###0, ObjectArray_ESTest.java###test02+++assertEquals###2, ObjectArray_ESTest.java###test03+++verifyException###2, ObjectArray_ESTest.java###test03+++get###1, ObjectArray_ESTest.java###test03+++fail###1, ObjectArray_ESTest.java###test04+++verifyException###2, ObjectArray_ESTest.java###test04+++get###1, ObjectArray_ESTest.java###test04+++fail###1, ObjectArray_ESTest.java###test05+++add###1, ObjectArray_ESTest.java###test05+++assertTrue###1, ObjectArray_ESTest.java###test06+++verifyException###2, ObjectArray_ESTest.java###test06+++add###1, ObjectArray_ESTest.java###test06+++fail###1, ObjectArray_ESTest.java###test07+++add###1, ObjectArray_ESTest.java###test07+++assertTrue###1, ObjectArray_ESTest.java###test07+++toArray###1, ObjectArray_ESTest.java###test07+++assertEquals###2, ObjectArray_ESTest.java###test08+++toArray###1, ObjectArray_ESTest.java###test08+++assertEquals###2, ObjectArray_ESTest.java###test09+++add###1, ObjectArray_ESTest.java###test09+++assertTrue###1, ObjectArray_ESTest.java###test09+++toArray###0, ObjectArray_ESTest.java###test09+++assertEquals###2, ObjectArray_ESTest.java###test10+++toArray###0, ObjectArray_ESTest.java###test10+++assertEquals###2, ObjectArray_ESTest.java###test11+++add###1, ObjectArray_ESTest.java###test11+++size###0, ObjectArray_ESTest.java###test11+++assertEquals###2, ObjectArray_ESTest.java###test12+++add###1, ObjectArray_ESTest.java###test12+++get###1, ObjectArray_ESTest.java###test12+++assertNull###1, ObjectArray_ESTest.java###test13+++add###1, ObjectArray_ESTest.java###test13+++verifyException###2, ObjectArray_ESTest.java###test13+++toArray###1, ObjectArray_ESTest.java###test13+++fail###1, ObjectArray_ESTest.java###test14+++verifyException###2, ObjectArray_ESTest.java###test14+++get###1, ObjectArray_ESTest.java###test14+++fail###1, ObjectArray_ESTest.java###test15+++verifyException###2, ObjectArray_ESTest.java###test15+++get###1, ObjectArray_ESTest.java###test15+++fail###1, ObjectArray_ESTest.java###test16+++verifyException###2, ObjectArray_ESTest.java###test16+++add###1, ObjectArray_ESTest.java###test16+++fail###1, ObjectArray_ESTest.java###test17+++add###1, ObjectArray_ESTest.java###test17+++add###1, ObjectArray_ESTest.java###test17+++get###1, ObjectArray_ESTest.java###test17+++assertSame###2, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++assertEquals###2, ObjectArray_ESTest.java###test18+++size###0, ObjectArray_ESTest.java###test18+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:09:15 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ObjectArray_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.ObjectArray\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ObjectArray_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.ObjectArray\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ObjectArray_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.ObjectArray\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.ObjectArray;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/ObjectArray_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    Integer[] integerArray0 = new Integer[2];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    // Undeclared exception!\n    try {\n        objectArray0.toArray();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-837);\n    int int0 = objectArray0.size();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    // Undeclared exception!\n    try {\n        objectArray0.get(0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-2461);\n    // Undeclared exception!\n    try {\n        objectArray0.get(2668);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 2668, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.modCount = (-1995);\n    boolean boolean0 = objectArray0.add(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-1995);\n    // Undeclared exception!\n    try {\n        objectArray0.add(object0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[6];\n    objectArray0.elementData = objectArray1;\n    boolean boolean0 = objectArray0.add(objectArray1[1]);\n    assertTrue(boolean0);\n    Integer[] integerArray0 = new Integer[3];\n    Integer[] integerArray1 = objectArray0.toArray(integerArray0);\n    assertEquals(1, integerArray1.length);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[7];\n    objectArray0.elementData = objectArray1;\n    Integer[] integerArray0 = new Integer[2];\n    Integer[] integerArray1 = objectArray0.toArray(integerArray0);\n    assertEquals(0, integerArray1.length);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[8];\n    objectArray0.elementData = objectArray1;\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\n    boolean boolean0 = objectArray0.add(integer0);\n    assertTrue(boolean0);\n    Object[] objectArray2 = objectArray0.toArray();\n    assertEquals(1, objectArray2.length);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    Object[] objectArray2 = objectArray0.toArray();\n    assertEquals(0, objectArray2.length);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[8];\n    objectArray0.elementData = objectArray1;\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\n    objectArray0.add(integer0);\n    int int0 = objectArray0.size();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[6];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray1[1]);\n    Object object0 = objectArray0.get(0);\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray0);\n    Integer[] integerArray0 = new Integer[0];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Arrays\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    // Undeclared exception!\n    try {\n        objectArray0.get((-348));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    // Undeclared exception!\n    try {\n        objectArray0.get((-1569));\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // -1569\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer[] integerArray0 = new Integer[1];\n    objectArray0.elementData = (Object[]) integerArray0;\n    // Undeclared exception!\n    try {\n        objectArray0.add(objectArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // com.zappos.json.util.ObjectArray\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer integer0 = new Integer((-2454));\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(integer0);\n    objectArray0.add(object0);\n    Object object1 = objectArray0.get(1);\n    assertSame(object1, object0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer integer0 = new Integer((-2454));\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(integer0);\n    objectArray0.add(object0);\n    objectArray0.add(integer0);\n    objectArray0.add(integer0);\n    objectArray0.add((Object) null);\n    boolean boolean0 = objectArray0.add(integer0);\n    assertEquals(6, objectArray0.size());\n    assertTrue(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-2461);\n    // Undeclared exception!\n    try {\n        objectArray0.get(2668);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 2668, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}",
            "TestRelevantFocal": "[get###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:09:15 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.ObjectArray;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ObjectArray_ESTest extends ObjectArray_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public boolean add(Object e) {\n    ensureCapacityInternal(size + 1);\n    elementData[size++] = e;\n    return true;\n}",
            "all_field_declaration": "private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\nprivate static final int DEFAULT_CAPACITY = 10;\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\ntransient Object[] elementData;\ntransient int modCount = 0;\nprivate int size;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "transient Object[] elementData;private int size;",
            "Parameter_type": "Object",
            "Import_statements": "",
            "public_method_signature": "public boolean add(Object e);\npublic Object get(int index);\npublic int size();\npublic Object[] toArray();\npublic T[] toArray(T[] a);",
            "public_field": "",
            "Method_statement": "add(Object e)",
            "Method_name": "add",
            "Class_declaration": "public class ObjectArray {\n",
            "constructors": "",
            "all_method_signature": "private void ensureExplicitCapacity(int minCapacity);\nprivate void ensureCapacityInternal(int minCapacity);\nprivate void grow(int minCapacity);\nprivate static int hugeCapacity(int minCapacity);\npublic boolean add(Object e);\npublic Object get(int index);\npublic int size();\npublic Object[] toArray();\npublic T[] toArray(T[] a);",
            "Class_name": "ObjectArray",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/ObjectArray.java###add",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.Arrays;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public boolean add(Object e);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[ObjectArray_ESTest.java###test00+++toArray###1, ObjectArray_ESTest.java###test00+++fail###1, ObjectArray_ESTest.java###test01+++toArray###0, ObjectArray_ESTest.java###test01+++fail###1, ObjectArray_ESTest.java###test02+++size###0, ObjectArray_ESTest.java###test02+++assertEquals###2, ObjectArray_ESTest.java###test03+++verifyException###2, ObjectArray_ESTest.java###test03+++get###1, ObjectArray_ESTest.java###test03+++fail###1, ObjectArray_ESTest.java###test04+++verifyException###2, ObjectArray_ESTest.java###test04+++get###1, ObjectArray_ESTest.java###test04+++fail###1, ObjectArray_ESTest.java###test05+++add###1, ObjectArray_ESTest.java###test05+++assertTrue###1, ObjectArray_ESTest.java###test06+++verifyException###2, ObjectArray_ESTest.java###test06+++add###1, ObjectArray_ESTest.java###test06+++fail###1, ObjectArray_ESTest.java###test07+++add###1, ObjectArray_ESTest.java###test07+++assertTrue###1, ObjectArray_ESTest.java###test07+++toArray###1, ObjectArray_ESTest.java###test07+++assertEquals###2, ObjectArray_ESTest.java###test08+++toArray###1, ObjectArray_ESTest.java###test08+++assertEquals###2, ObjectArray_ESTest.java###test09+++add###1, ObjectArray_ESTest.java###test09+++assertTrue###1, ObjectArray_ESTest.java###test09+++toArray###0, ObjectArray_ESTest.java###test09+++assertEquals###2, ObjectArray_ESTest.java###test10+++toArray###0, ObjectArray_ESTest.java###test10+++assertEquals###2, ObjectArray_ESTest.java###test11+++add###1, ObjectArray_ESTest.java###test11+++size###0, ObjectArray_ESTest.java###test11+++assertEquals###2, ObjectArray_ESTest.java###test12+++add###1, ObjectArray_ESTest.java###test12+++get###1, ObjectArray_ESTest.java###test12+++assertNull###1, ObjectArray_ESTest.java###test13+++add###1, ObjectArray_ESTest.java###test13+++verifyException###2, ObjectArray_ESTest.java###test13+++toArray###1, ObjectArray_ESTest.java###test13+++fail###1, ObjectArray_ESTest.java###test14+++verifyException###2, ObjectArray_ESTest.java###test14+++get###1, ObjectArray_ESTest.java###test14+++fail###1, ObjectArray_ESTest.java###test15+++verifyException###2, ObjectArray_ESTest.java###test15+++get###1, ObjectArray_ESTest.java###test15+++fail###1, ObjectArray_ESTest.java###test16+++verifyException###2, ObjectArray_ESTest.java###test16+++add###1, ObjectArray_ESTest.java###test16+++fail###1, ObjectArray_ESTest.java###test17+++add###1, ObjectArray_ESTest.java###test17+++add###1, ObjectArray_ESTest.java###test17+++get###1, ObjectArray_ESTest.java###test17+++assertSame###2, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++add###1, ObjectArray_ESTest.java###test18+++assertEquals###2, ObjectArray_ESTest.java###test18+++size###0, ObjectArray_ESTest.java###test18+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:09:15 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ObjectArray_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.ObjectArray\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ObjectArray_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.ObjectArray\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ObjectArray_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.ObjectArray\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.ObjectArray;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/ObjectArray_ESTest.java###test13",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    Integer[] integerArray0 = new Integer[2];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = 1492;\n    // Undeclared exception!\n    try {\n        objectArray0.toArray();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-837);\n    int int0 = objectArray0.size();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    // Undeclared exception!\n    try {\n        objectArray0.get(0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-2461);\n    // Undeclared exception!\n    try {\n        objectArray0.get(2668);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 2668, Size: 0\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.modCount = (-1995);\n    boolean boolean0 = objectArray0.add(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    objectArray0.modCount = (-1995);\n    // Undeclared exception!\n    try {\n        objectArray0.add(object0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[6];\n    objectArray0.elementData = objectArray1;\n    boolean boolean0 = objectArray0.add(objectArray1[1]);\n    assertTrue(boolean0);\n    Integer[] integerArray0 = new Integer[3];\n    Integer[] integerArray1 = objectArray0.toArray(integerArray0);\n    assertEquals(1, integerArray1.length);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[7];\n    objectArray0.elementData = objectArray1;\n    Integer[] integerArray0 = new Integer[2];\n    Integer[] integerArray1 = objectArray0.toArray(integerArray0);\n    assertEquals(0, integerArray1.length);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[8];\n    objectArray0.elementData = objectArray1;\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\n    boolean boolean0 = objectArray0.add(integer0);\n    assertTrue(boolean0);\n    Object[] objectArray2 = objectArray0.toArray();\n    assertEquals(1, objectArray2.length);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    Object[] objectArray2 = objectArray0.toArray();\n    assertEquals(0, objectArray2.length);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[8];\n    objectArray0.elementData = objectArray1;\n    Integer integer0 = new Integer(Integer.MAX_VALUE);\n    objectArray0.add(integer0);\n    int int0 = objectArray0.size();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[6];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray1[1]);\n    Object object0 = objectArray0.get(0);\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray0);\n    Integer[] integerArray0 = new Integer[0];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Arrays\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    // Undeclared exception!\n    try {\n        objectArray0.get((-348));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    // Undeclared exception!\n    try {\n        objectArray0.get((-1569));\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // -1569\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer[] integerArray0 = new Integer[1];\n    objectArray0.elementData = (Object[]) integerArray0;\n    // Undeclared exception!\n    try {\n        objectArray0.add(objectArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // com.zappos.json.util.ObjectArray\n        // \n        verifyException(\"com.zappos.json.util.ObjectArray\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer integer0 = new Integer((-2454));\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(integer0);\n    objectArray0.add(object0);\n    Object object1 = objectArray0.get(1);\n    assertSame(object1, object0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Object object0 = new Object();\n    ObjectArray objectArray0 = new ObjectArray();\n    Integer integer0 = new Integer((-2454));\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(integer0);\n    objectArray0.add(object0);\n    objectArray0.add(integer0);\n    objectArray0.add(integer0);\n    objectArray0.add((Object) null);\n    boolean boolean0 = objectArray0.add(integer0);\n    assertEquals(6, objectArray0.size());\n    assertTrue(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ObjectArray objectArray0 = new ObjectArray();\n    Object[] objectArray1 = new Object[0];\n    objectArray0.elementData = objectArray1;\n    objectArray0.add(objectArray0);\n    Integer[] integerArray0 = new Integer[0];\n    // Undeclared exception!\n    try {\n        objectArray0.toArray(integerArray0);\n        fail(\"Expecting exception: ArrayStoreException\");\n    } catch (ArrayStoreException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Arrays\", e);\n    }\n}",
            "TestRelevantFocal": "[add###1, toArray###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:09:15 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.ObjectArray;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ObjectArray_ESTest extends ObjectArray_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static boolean isNumber(String s) {\n    if (s == null || s.length() == 0)\n        return false;\n    if (!Character.isDigit(s.charAt(0)) && s.charAt(0) != '-')\n        return false;\n    int decimal = 0;\n    for (int i = 1; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (Character.isDigit(c))\n            continue;\n        if (c == '.') {\n            if (decimal == 1)\n                return false;\n            decimal++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}",
            "all_field_declaration": "private static final char PLACEHOLDER = '@';\nprivate static final char[] BIG_LETTERS = new char[26];\nprivate static final char[] SMALL_LETTERS = new char[26];\nprivate static final char[] NUMBERS = new char[10];\nprivate static final Random RANDOM = new Random();",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "5",
            "Filed": "",
            "Parameter_type": "String",
            "Import_statements": "",
            "public_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "public_field": "",
            "Method_statement": "isNumber(String s)",
            "Method_name": "isNumber",
            "Class_declaration": "public class Strings {\n",
            "constructors": "",
            "all_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "Class_name": "Strings",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Strings.java###isNumber",
            "Parameter_num": "1",
            "contextMethod": "public static String randomNumber(int n) {\n    char[] c = new char[n];\n    for (int i = 0; i < n; i++) {\n        c[i] = NUMBERS[RANDOM.nextInt(10)];\n    }\n    return new String(c);\n}\npublic static String randomAlphabetic(int n) {\n    char[] c = new char[n];\n    for (int i = 0; i < n; i++) {\n        int j = RANDOM.nextInt(26);\n        c[i] = RANDOM.nextBoolean() ? BIG_LETTERS[j] : SMALL_LETTERS[j];\n    }\n    return new String(c);\n}",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Reader;\n\nimport java.util.Random;\n\nimport com.zappos.json.JsonWriter;\n",
            "comment": "\n   * \n   * @param s the string object\n   * @return boolean indicating whether specified string is number\n   ",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static boolean isNumber(String s);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[Strings_ESTest.java###test00+++isNumber###1, Strings_ESTest.java###test00+++assertFalse###1, Strings_ESTest.java###test01+++isNumber###1, Strings_ESTest.java###test01+++assertFalse###1, Strings_ESTest.java###test02+++format###2, Strings_ESTest.java###test02+++assertNotNull###1, Strings_ESTest.java###test03+++randomNumber###1, Strings_ESTest.java###test03+++assertEquals###2, Strings_ESTest.java###test04+++randomAlphabetic###1, Strings_ESTest.java###test04+++assertEquals###2, Strings_ESTest.java###test05+++random###2, Strings_ESTest.java###test05+++assertEquals###2, Strings_ESTest.java###test06+++fromReader###2, Strings_ESTest.java###test06+++assertEquals###2, Strings_ESTest.java###test07+++fromReader###1, Strings_ESTest.java###test07+++assertEquals###2, Strings_ESTest.java###test08+++format###2, Strings_ESTest.java###test08+++assertNull###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test10+++verifyException###2, Strings_ESTest.java###test10+++randomNumber###1, Strings_ESTest.java###test10+++fail###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test12+++verifyException###2, Strings_ESTest.java###test12+++randomAlphabetic###1, Strings_ESTest.java###test12+++fail###1, Strings_ESTest.java###test13+++verifyException###2, Strings_ESTest.java###test13+++random###2, Strings_ESTest.java###test13+++fail###1, Strings_ESTest.java###test14+++verifyException###2, Strings_ESTest.java###test14+++random###2, Strings_ESTest.java###test14+++fail###1, Strings_ESTest.java###test15+++random###2, Strings_ESTest.java###test15+++fail###1, Strings_ESTest.java###test16+++verifyException###2, Strings_ESTest.java###test16+++fromReader###2, Strings_ESTest.java###test16+++fail###1, Strings_ESTest.java###test17+++verifyException###2, Strings_ESTest.java###test17+++fromReader###2, Strings_ESTest.java###test17+++fail###1, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++verifyException###2, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++fail###1, Strings_ESTest.java###test19+++verifyException###2, Strings_ESTest.java###test19+++fromReader###1, Strings_ESTest.java###test19+++fail###1, Strings_ESTest.java###test20+++close###0, Strings_ESTest.java###test20+++verifyException###2, Strings_ESTest.java###test20+++fromReader###1, Strings_ESTest.java###test20+++fail###1, Strings_ESTest.java###test21+++verifyException###2, Strings_ESTest.java###test21+++format###2, Strings_ESTest.java###test21+++fail###1, Strings_ESTest.java###test22+++verifyException###2, Strings_ESTest.java###test22+++format###2, Strings_ESTest.java###test22+++fail###1, Strings_ESTest.java###test23+++fromReader###2, Strings_ESTest.java###test24+++isNumber###1, Strings_ESTest.java###test24+++assertTrue###1, Strings_ESTest.java###test25+++isNumber###1, Strings_ESTest.java###test25+++assertFalse###1, Strings_ESTest.java###test26+++isNumber###1, Strings_ESTest.java###test26+++assertFalse###1, Strings_ESTest.java###test27+++isNumber###1, Strings_ESTest.java###test27+++assertFalse###1, Strings_ESTest.java###test28+++isNumber###1, Strings_ESTest.java###test28+++assertFalse###1, Strings_ESTest.java###test29+++isNumber###1, Strings_ESTest.java###test29+++assertFalse###1, Strings_ESTest.java###test30+++random###2, Strings_ESTest.java###test30+++assertEquals###2, Strings_ESTest.java###test31+++format###2, Strings_ESTest.java###test31+++assertEquals###2, Strings_ESTest.java###test33+++fromReader###1, Strings_ESTest.java###test33+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:13:31 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Strings_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Strings\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Strings_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Strings\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Strings_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Strings\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Strings;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java###test27",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6%DL@T^]&'LmYrP>\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"Y\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Object[] objectArray0 = new Object[6];\n    objectArray0[1] = (Object) \"Wkyt @E@:v,ya6h$\";\n    String string0 = Strings.format(\"Wkyt @E@:v,ya6h$\", objectArray0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    String string0 = Strings.randomNumber(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    String string0 = Strings.randomAlphabetic(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    char[] charArray0 = new char[3];\n    String string0 = Strings.random(0, charArray0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"!!n$d3!sd#&|iK\");\n    String string0 = Strings.fromReader((Reader) stringReader0, 1);\n    assertEquals(\"!!n$d3!sd#&|iK\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    String string0 = Strings.format((String) null, (Object[]) null);\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Strings.randomNumber(5026);\n    // Undeclared exception!\n    Strings.randomNumber(5026);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomNumber((-1259));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Strings.randomAlphabetic(5028);\n    // Undeclared exception!\n    Strings.randomAlphabetic(5028);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomAlphabetic((-1176));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.random(2059, (char[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    char[] charArray0 = new char[1];\n    // Undeclared exception!\n    try {\n        Strings.random((-1110), charArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    char[] charArray0 = new char[0];\n    // Undeclared exception!\n    try {\n        Strings.random(2821, charArray0);\n        fail(\"Expecting exception: ArithmeticException\");\n    } catch (ArithmeticException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, 39);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, (-2195));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    Strings.fromReader((Reader) stringReader0, 3413);\n    try {\n        Strings.fromReader((Reader) stringReader0, 3413);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    stringReader0.close();\n    try {\n        Strings.fromReader((Reader) stringReader0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Object[] objectArray0 = new Object[2];\n    // Undeclared exception!\n    try {\n        Strings.format((String) null, objectArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Object[] objectArray0 = new Object[0];\n    // Undeclared exception!\n    try {\n        Strings.format(\"@.\", objectArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"(m]6'~ZW{o2bS7\");\n    // Undeclared exception!\n    Strings.fromReader((Reader) stringReader0, 0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"-|{Z&d1\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"73i7Lew\\\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    boolean boolean0 = Strings.isNumber((String) null);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    char[] charArray0 = new char[4];\n    String string0 = Strings.random(22, charArray0);\n    assertEquals(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    String string0 = Strings.format(\"\", (Object[]) null);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Strings strings0 = new Strings();\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"0QUsadEO=h0,}>#e|VW\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"0QUsadEO=h0,}>#e|VW\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\");\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[isNumber###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:13:31 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Strings;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Strings_ESTest extends Strings_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static String format(String pattern, Object... args) {\n    if (args == null)\n        return pattern;\n    StringBuilder str = new StringBuilder(pattern.length() + 50);\n    int idx = -1;\n    int i = 0;\n    int p = 0;\n    while ((idx = pattern.indexOf(PLACEHOLDER, p)) != -1) {\n        str.append(pattern.substring(p, idx));\n        Object arg = args[i];\n        if (arg == null) {\n            str.append(JsonWriter.CONST_NULL);\n        } else {\n            str.append(args[i].toString());\n        }\n        i++;\n        p = idx + 1;\n    }\n    str.append(pattern.substring(p));\n    return str.toString();\n}",
            "all_field_declaration": "private static final char PLACEHOLDER = '@';\nprivate static final char[] BIG_LETTERS = new char[26];\nprivate static final char[] SMALL_LETTERS = new char[26];\nprivate static final char[] NUMBERS = new char[10];\nprivate static final Random RANDOM = new Random();",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "8",
            "Filed": "private static final char PLACEHOLDER = '@';",
            "Parameter_type": "String,Object",
            "Import_statements": "import com.zappos.json.JsonWriter;\n",
            "public_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "public_field": "",
            "Method_statement": "format(String pattern, Object... args)",
            "Method_name": "format",
            "Class_declaration": "public class Strings {\n",
            "constructors": "",
            "all_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "Class_name": "Strings",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Strings.java###format",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Reader;\n\nimport java.util.Random;\n\nimport com.zappos.json.JsonWriter;\n",
            "comment": "\n   * Simplest formatter. It does not support escaping or any kinds of fancy\n   * feature. It just fill the placeholder '@' with supplied argument values.\n   * \n   * @param pattern the pattern being used by formatter\n   * @param args the arguments for the formatter\n   * @return formatted value as a string\n   ",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static String format(String pattern, Object... args);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Strings_ESTest.java###test00+++isNumber###1, Strings_ESTest.java###test00+++assertFalse###1, Strings_ESTest.java###test01+++isNumber###1, Strings_ESTest.java###test01+++assertFalse###1, Strings_ESTest.java###test02+++format###2, Strings_ESTest.java###test02+++assertNotNull###1, Strings_ESTest.java###test03+++randomNumber###1, Strings_ESTest.java###test03+++assertEquals###2, Strings_ESTest.java###test04+++randomAlphabetic###1, Strings_ESTest.java###test04+++assertEquals###2, Strings_ESTest.java###test05+++random###2, Strings_ESTest.java###test05+++assertEquals###2, Strings_ESTest.java###test06+++fromReader###2, Strings_ESTest.java###test06+++assertEquals###2, Strings_ESTest.java###test07+++fromReader###1, Strings_ESTest.java###test07+++assertEquals###2, Strings_ESTest.java###test08+++format###2, Strings_ESTest.java###test08+++assertNull###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test10+++verifyException###2, Strings_ESTest.java###test10+++randomNumber###1, Strings_ESTest.java###test10+++fail###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test12+++verifyException###2, Strings_ESTest.java###test12+++randomAlphabetic###1, Strings_ESTest.java###test12+++fail###1, Strings_ESTest.java###test13+++verifyException###2, Strings_ESTest.java###test13+++random###2, Strings_ESTest.java###test13+++fail###1, Strings_ESTest.java###test14+++verifyException###2, Strings_ESTest.java###test14+++random###2, Strings_ESTest.java###test14+++fail###1, Strings_ESTest.java###test15+++random###2, Strings_ESTest.java###test15+++fail###1, Strings_ESTest.java###test16+++verifyException###2, Strings_ESTest.java###test16+++fromReader###2, Strings_ESTest.java###test16+++fail###1, Strings_ESTest.java###test17+++verifyException###2, Strings_ESTest.java###test17+++fromReader###2, Strings_ESTest.java###test17+++fail###1, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++verifyException###2, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++fail###1, Strings_ESTest.java###test19+++verifyException###2, Strings_ESTest.java###test19+++fromReader###1, Strings_ESTest.java###test19+++fail###1, Strings_ESTest.java###test20+++close###0, Strings_ESTest.java###test20+++verifyException###2, Strings_ESTest.java###test20+++fromReader###1, Strings_ESTest.java###test20+++fail###1, Strings_ESTest.java###test21+++verifyException###2, Strings_ESTest.java###test21+++format###2, Strings_ESTest.java###test21+++fail###1, Strings_ESTest.java###test22+++verifyException###2, Strings_ESTest.java###test22+++format###2, Strings_ESTest.java###test22+++fail###1, Strings_ESTest.java###test23+++fromReader###2, Strings_ESTest.java###test24+++isNumber###1, Strings_ESTest.java###test24+++assertTrue###1, Strings_ESTest.java###test25+++isNumber###1, Strings_ESTest.java###test25+++assertFalse###1, Strings_ESTest.java###test26+++isNumber###1, Strings_ESTest.java###test26+++assertFalse###1, Strings_ESTest.java###test27+++isNumber###1, Strings_ESTest.java###test27+++assertFalse###1, Strings_ESTest.java###test28+++isNumber###1, Strings_ESTest.java###test28+++assertFalse###1, Strings_ESTest.java###test29+++isNumber###1, Strings_ESTest.java###test29+++assertFalse###1, Strings_ESTest.java###test30+++random###2, Strings_ESTest.java###test30+++assertEquals###2, Strings_ESTest.java###test31+++format###2, Strings_ESTest.java###test31+++assertEquals###2, Strings_ESTest.java###test33+++fromReader###1, Strings_ESTest.java###test33+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:13:31 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Strings_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Strings\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Strings_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Strings\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Strings_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Strings\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Strings;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java###test31",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6%DL@T^]&'LmYrP>\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"Y\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Object[] objectArray0 = new Object[6];\n    objectArray0[1] = (Object) \"Wkyt @E@:v,ya6h$\";\n    String string0 = Strings.format(\"Wkyt @E@:v,ya6h$\", objectArray0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    String string0 = Strings.randomNumber(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    String string0 = Strings.randomAlphabetic(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    char[] charArray0 = new char[3];\n    String string0 = Strings.random(0, charArray0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"!!n$d3!sd#&|iK\");\n    String string0 = Strings.fromReader((Reader) stringReader0, 1);\n    assertEquals(\"!!n$d3!sd#&|iK\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    String string0 = Strings.format((String) null, (Object[]) null);\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Strings.randomNumber(5026);\n    // Undeclared exception!\n    Strings.randomNumber(5026);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomNumber((-1259));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Strings.randomAlphabetic(5028);\n    // Undeclared exception!\n    Strings.randomAlphabetic(5028);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomAlphabetic((-1176));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.random(2059, (char[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    char[] charArray0 = new char[1];\n    // Undeclared exception!\n    try {\n        Strings.random((-1110), charArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    char[] charArray0 = new char[0];\n    // Undeclared exception!\n    try {\n        Strings.random(2821, charArray0);\n        fail(\"Expecting exception: ArithmeticException\");\n    } catch (ArithmeticException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, 39);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, (-2195));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    Strings.fromReader((Reader) stringReader0, 3413);\n    try {\n        Strings.fromReader((Reader) stringReader0, 3413);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    stringReader0.close();\n    try {\n        Strings.fromReader((Reader) stringReader0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Object[] objectArray0 = new Object[2];\n    // Undeclared exception!\n    try {\n        Strings.format((String) null, objectArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Object[] objectArray0 = new Object[0];\n    // Undeclared exception!\n    try {\n        Strings.format(\"@.\", objectArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"(m]6'~ZW{o2bS7\");\n    // Undeclared exception!\n    Strings.fromReader((Reader) stringReader0, 0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"-|{Z&d1\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"73i7Lew\\\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    boolean boolean0 = Strings.isNumber((String) null);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    char[] charArray0 = new char[4];\n    String string0 = Strings.random(22, charArray0);\n    assertEquals(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    String string0 = Strings.format(\"\", (Object[]) null);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Strings strings0 = new Strings();\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"0QUsadEO=h0,}>#e|VW\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"0QUsadEO=h0,}>#e|VW\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    String string0 = Strings.format(\"\", (Object[]) null);\n    assertEquals(\"\", string0);\n}",
            "TestRelevantFocal": "[format###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:13:31 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Strings;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Strings_ESTest extends Strings_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static String randomNumber(int n) {\n    char[] c = new char[n];\n    for (int i = 0; i < n; i++) {\n        c[i] = NUMBERS[RANDOM.nextInt(10)];\n    }\n    return new String(c);\n}",
            "all_field_declaration": "private static final char PLACEHOLDER = '@';\nprivate static final char[] BIG_LETTERS = new char[26];\nprivate static final char[] SMALL_LETTERS = new char[26];\nprivate static final char[] NUMBERS = new char[10];\nprivate static final Random RANDOM = new Random();",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "private static final char[] NUMBERS = new char[10];private static final Random RANDOM = new Random();",
            "Parameter_type": "int",
            "Import_statements": "",
            "public_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "public_field": "",
            "Method_statement": "randomNumber(int n)",
            "Method_name": "randomNumber",
            "Class_declaration": "public class Strings {\n",
            "constructors": "",
            "all_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "Class_name": "Strings",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Strings.java###randomNumber",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Reader;\n\nimport java.util.Random;\n\nimport com.zappos.json.JsonWriter;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static String randomNumber(int n);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Strings_ESTest.java###test00+++isNumber###1, Strings_ESTest.java###test00+++assertFalse###1, Strings_ESTest.java###test01+++isNumber###1, Strings_ESTest.java###test01+++assertFalse###1, Strings_ESTest.java###test02+++format###2, Strings_ESTest.java###test02+++assertNotNull###1, Strings_ESTest.java###test03+++randomNumber###1, Strings_ESTest.java###test03+++assertEquals###2, Strings_ESTest.java###test04+++randomAlphabetic###1, Strings_ESTest.java###test04+++assertEquals###2, Strings_ESTest.java###test05+++random###2, Strings_ESTest.java###test05+++assertEquals###2, Strings_ESTest.java###test06+++fromReader###2, Strings_ESTest.java###test06+++assertEquals###2, Strings_ESTest.java###test07+++fromReader###1, Strings_ESTest.java###test07+++assertEquals###2, Strings_ESTest.java###test08+++format###2, Strings_ESTest.java###test08+++assertNull###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test10+++verifyException###2, Strings_ESTest.java###test10+++randomNumber###1, Strings_ESTest.java###test10+++fail###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test12+++verifyException###2, Strings_ESTest.java###test12+++randomAlphabetic###1, Strings_ESTest.java###test12+++fail###1, Strings_ESTest.java###test13+++verifyException###2, Strings_ESTest.java###test13+++random###2, Strings_ESTest.java###test13+++fail###1, Strings_ESTest.java###test14+++verifyException###2, Strings_ESTest.java###test14+++random###2, Strings_ESTest.java###test14+++fail###1, Strings_ESTest.java###test15+++random###2, Strings_ESTest.java###test15+++fail###1, Strings_ESTest.java###test16+++verifyException###2, Strings_ESTest.java###test16+++fromReader###2, Strings_ESTest.java###test16+++fail###1, Strings_ESTest.java###test17+++verifyException###2, Strings_ESTest.java###test17+++fromReader###2, Strings_ESTest.java###test17+++fail###1, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++verifyException###2, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++fail###1, Strings_ESTest.java###test19+++verifyException###2, Strings_ESTest.java###test19+++fromReader###1, Strings_ESTest.java###test19+++fail###1, Strings_ESTest.java###test20+++close###0, Strings_ESTest.java###test20+++verifyException###2, Strings_ESTest.java###test20+++fromReader###1, Strings_ESTest.java###test20+++fail###1, Strings_ESTest.java###test21+++verifyException###2, Strings_ESTest.java###test21+++format###2, Strings_ESTest.java###test21+++fail###1, Strings_ESTest.java###test22+++verifyException###2, Strings_ESTest.java###test22+++format###2, Strings_ESTest.java###test22+++fail###1, Strings_ESTest.java###test23+++fromReader###2, Strings_ESTest.java###test24+++isNumber###1, Strings_ESTest.java###test24+++assertTrue###1, Strings_ESTest.java###test25+++isNumber###1, Strings_ESTest.java###test25+++assertFalse###1, Strings_ESTest.java###test26+++isNumber###1, Strings_ESTest.java###test26+++assertFalse###1, Strings_ESTest.java###test27+++isNumber###1, Strings_ESTest.java###test27+++assertFalse###1, Strings_ESTest.java###test28+++isNumber###1, Strings_ESTest.java###test28+++assertFalse###1, Strings_ESTest.java###test29+++isNumber###1, Strings_ESTest.java###test29+++assertFalse###1, Strings_ESTest.java###test30+++random###2, Strings_ESTest.java###test30+++assertEquals###2, Strings_ESTest.java###test31+++format###2, Strings_ESTest.java###test31+++assertEquals###2, Strings_ESTest.java###test33+++fromReader###1, Strings_ESTest.java###test33+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:13:31 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Strings_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Strings\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Strings_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Strings\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Strings_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Strings\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Strings;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java###test10",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6%DL@T^]&'LmYrP>\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"Y\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Object[] objectArray0 = new Object[6];\n    objectArray0[1] = (Object) \"Wkyt @E@:v,ya6h$\";\n    String string0 = Strings.format(\"Wkyt @E@:v,ya6h$\", objectArray0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    String string0 = Strings.randomNumber(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    String string0 = Strings.randomAlphabetic(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    char[] charArray0 = new char[3];\n    String string0 = Strings.random(0, charArray0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"!!n$d3!sd#&|iK\");\n    String string0 = Strings.fromReader((Reader) stringReader0, 1);\n    assertEquals(\"!!n$d3!sd#&|iK\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    String string0 = Strings.format((String) null, (Object[]) null);\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Strings.randomNumber(5026);\n    // Undeclared exception!\n    Strings.randomNumber(5026);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomNumber((-1259));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Strings.randomAlphabetic(5028);\n    // Undeclared exception!\n    Strings.randomAlphabetic(5028);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomAlphabetic((-1176));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.random(2059, (char[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    char[] charArray0 = new char[1];\n    // Undeclared exception!\n    try {\n        Strings.random((-1110), charArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    char[] charArray0 = new char[0];\n    // Undeclared exception!\n    try {\n        Strings.random(2821, charArray0);\n        fail(\"Expecting exception: ArithmeticException\");\n    } catch (ArithmeticException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, 39);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, (-2195));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    Strings.fromReader((Reader) stringReader0, 3413);\n    try {\n        Strings.fromReader((Reader) stringReader0, 3413);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    stringReader0.close();\n    try {\n        Strings.fromReader((Reader) stringReader0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Object[] objectArray0 = new Object[2];\n    // Undeclared exception!\n    try {\n        Strings.format((String) null, objectArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Object[] objectArray0 = new Object[0];\n    // Undeclared exception!\n    try {\n        Strings.format(\"@.\", objectArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"(m]6'~ZW{o2bS7\");\n    // Undeclared exception!\n    Strings.fromReader((Reader) stringReader0, 0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"-|{Z&d1\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"73i7Lew\\\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    boolean boolean0 = Strings.isNumber((String) null);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    char[] charArray0 = new char[4];\n    String string0 = Strings.random(22, charArray0);\n    assertEquals(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    String string0 = Strings.format(\"\", (Object[]) null);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Strings strings0 = new Strings();\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"0QUsadEO=h0,}>#e|VW\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"0QUsadEO=h0,}>#e|VW\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomNumber((-1259));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}",
            "TestRelevantFocal": "[randomNumber###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:13:31 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Strings;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Strings_ESTest extends Strings_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static String randomAlphabetic(int n) {\n    char[] c = new char[n];\n    for (int i = 0; i < n; i++) {\n        int j = RANDOM.nextInt(26);\n        c[i] = RANDOM.nextBoolean() ? BIG_LETTERS[j] : SMALL_LETTERS[j];\n    }\n    return new String(c);\n}",
            "all_field_declaration": "private static final char PLACEHOLDER = '@';\nprivate static final char[] BIG_LETTERS = new char[26];\nprivate static final char[] SMALL_LETTERS = new char[26];\nprivate static final char[] NUMBERS = new char[10];\nprivate static final Random RANDOM = new Random();",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "private static final char[] BIG_LETTERS = new char[26];private static final char[] SMALL_LETTERS = new char[26];private static final Random RANDOM = new Random();",
            "Parameter_type": "int",
            "Import_statements": "",
            "public_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "public_field": "",
            "Method_statement": "randomAlphabetic(int n)",
            "Method_name": "randomAlphabetic",
            "Class_declaration": "public class Strings {\n",
            "constructors": "",
            "all_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "Class_name": "Strings",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Strings.java###randomAlphabetic",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Reader;\n\nimport java.util.Random;\n\nimport com.zappos.json.JsonWriter;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static String randomAlphabetic(int n);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Strings_ESTest.java###test00+++isNumber###1, Strings_ESTest.java###test00+++assertFalse###1, Strings_ESTest.java###test01+++isNumber###1, Strings_ESTest.java###test01+++assertFalse###1, Strings_ESTest.java###test02+++format###2, Strings_ESTest.java###test02+++assertNotNull###1, Strings_ESTest.java###test03+++randomNumber###1, Strings_ESTest.java###test03+++assertEquals###2, Strings_ESTest.java###test04+++randomAlphabetic###1, Strings_ESTest.java###test04+++assertEquals###2, Strings_ESTest.java###test05+++random###2, Strings_ESTest.java###test05+++assertEquals###2, Strings_ESTest.java###test06+++fromReader###2, Strings_ESTest.java###test06+++assertEquals###2, Strings_ESTest.java###test07+++fromReader###1, Strings_ESTest.java###test07+++assertEquals###2, Strings_ESTest.java###test08+++format###2, Strings_ESTest.java###test08+++assertNull###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test10+++verifyException###2, Strings_ESTest.java###test10+++randomNumber###1, Strings_ESTest.java###test10+++fail###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test12+++verifyException###2, Strings_ESTest.java###test12+++randomAlphabetic###1, Strings_ESTest.java###test12+++fail###1, Strings_ESTest.java###test13+++verifyException###2, Strings_ESTest.java###test13+++random###2, Strings_ESTest.java###test13+++fail###1, Strings_ESTest.java###test14+++verifyException###2, Strings_ESTest.java###test14+++random###2, Strings_ESTest.java###test14+++fail###1, Strings_ESTest.java###test15+++random###2, Strings_ESTest.java###test15+++fail###1, Strings_ESTest.java###test16+++verifyException###2, Strings_ESTest.java###test16+++fromReader###2, Strings_ESTest.java###test16+++fail###1, Strings_ESTest.java###test17+++verifyException###2, Strings_ESTest.java###test17+++fromReader###2, Strings_ESTest.java###test17+++fail###1, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++verifyException###2, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++fail###1, Strings_ESTest.java###test19+++verifyException###2, Strings_ESTest.java###test19+++fromReader###1, Strings_ESTest.java###test19+++fail###1, Strings_ESTest.java###test20+++close###0, Strings_ESTest.java###test20+++verifyException###2, Strings_ESTest.java###test20+++fromReader###1, Strings_ESTest.java###test20+++fail###1, Strings_ESTest.java###test21+++verifyException###2, Strings_ESTest.java###test21+++format###2, Strings_ESTest.java###test21+++fail###1, Strings_ESTest.java###test22+++verifyException###2, Strings_ESTest.java###test22+++format###2, Strings_ESTest.java###test22+++fail###1, Strings_ESTest.java###test23+++fromReader###2, Strings_ESTest.java###test24+++isNumber###1, Strings_ESTest.java###test24+++assertTrue###1, Strings_ESTest.java###test25+++isNumber###1, Strings_ESTest.java###test25+++assertFalse###1, Strings_ESTest.java###test26+++isNumber###1, Strings_ESTest.java###test26+++assertFalse###1, Strings_ESTest.java###test27+++isNumber###1, Strings_ESTest.java###test27+++assertFalse###1, Strings_ESTest.java###test28+++isNumber###1, Strings_ESTest.java###test28+++assertFalse###1, Strings_ESTest.java###test29+++isNumber###1, Strings_ESTest.java###test29+++assertFalse###1, Strings_ESTest.java###test30+++random###2, Strings_ESTest.java###test30+++assertEquals###2, Strings_ESTest.java###test31+++format###2, Strings_ESTest.java###test31+++assertEquals###2, Strings_ESTest.java###test33+++fromReader###1, Strings_ESTest.java###test33+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:13:31 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Strings_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Strings\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Strings_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Strings\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Strings_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Strings\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Strings;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java###test12",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6%DL@T^]&'LmYrP>\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"Y\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Object[] objectArray0 = new Object[6];\n    objectArray0[1] = (Object) \"Wkyt @E@:v,ya6h$\";\n    String string0 = Strings.format(\"Wkyt @E@:v,ya6h$\", objectArray0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    String string0 = Strings.randomNumber(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    String string0 = Strings.randomAlphabetic(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    char[] charArray0 = new char[3];\n    String string0 = Strings.random(0, charArray0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"!!n$d3!sd#&|iK\");\n    String string0 = Strings.fromReader((Reader) stringReader0, 1);\n    assertEquals(\"!!n$d3!sd#&|iK\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    String string0 = Strings.format((String) null, (Object[]) null);\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Strings.randomNumber(5026);\n    // Undeclared exception!\n    Strings.randomNumber(5026);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomNumber((-1259));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Strings.randomAlphabetic(5028);\n    // Undeclared exception!\n    Strings.randomAlphabetic(5028);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomAlphabetic((-1176));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.random(2059, (char[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    char[] charArray0 = new char[1];\n    // Undeclared exception!\n    try {\n        Strings.random((-1110), charArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    char[] charArray0 = new char[0];\n    // Undeclared exception!\n    try {\n        Strings.random(2821, charArray0);\n        fail(\"Expecting exception: ArithmeticException\");\n    } catch (ArithmeticException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, 39);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, (-2195));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    Strings.fromReader((Reader) stringReader0, 3413);\n    try {\n        Strings.fromReader((Reader) stringReader0, 3413);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    stringReader0.close();\n    try {\n        Strings.fromReader((Reader) stringReader0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Object[] objectArray0 = new Object[2];\n    // Undeclared exception!\n    try {\n        Strings.format((String) null, objectArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Object[] objectArray0 = new Object[0];\n    // Undeclared exception!\n    try {\n        Strings.format(\"@.\", objectArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"(m]6'~ZW{o2bS7\");\n    // Undeclared exception!\n    Strings.fromReader((Reader) stringReader0, 0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"-|{Z&d1\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"73i7Lew\\\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    boolean boolean0 = Strings.isNumber((String) null);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    char[] charArray0 = new char[4];\n    String string0 = Strings.random(22, charArray0);\n    assertEquals(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    String string0 = Strings.format(\"\", (Object[]) null);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Strings strings0 = new Strings();\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"0QUsadEO=h0,}>#e|VW\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"0QUsadEO=h0,}>#e|VW\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomAlphabetic((-1176));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}",
            "TestRelevantFocal": "[randomAlphabetic###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:13:31 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Strings;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Strings_ESTest extends Strings_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static String random(int n, char[] chars) {\n    char[] c = new char[n];\n    for (int i = 0; i < n; i++) {\n        c[i] = chars[RANDOM.nextInt(chars.length)];\n    }\n    return new String(c);\n}",
            "all_field_declaration": "private static final char PLACEHOLDER = '@';\nprivate static final char[] BIG_LETTERS = new char[26];\nprivate static final char[] SMALL_LETTERS = new char[26];\nprivate static final char[] NUMBERS = new char[10];\nprivate static final Random RANDOM = new Random();",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "private static final Random RANDOM = new Random();",
            "Parameter_type": "int,char[]",
            "Import_statements": "",
            "public_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "public_field": "",
            "Method_statement": "random(int n, char() chars)",
            "Method_name": "random",
            "Class_declaration": "public class Strings {\n",
            "constructors": "",
            "all_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "Class_name": "Strings",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Strings.java###random",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Reader;\n\nimport java.util.Random;\n\nimport com.zappos.json.JsonWriter;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static String random(int n, char[] chars);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Strings_ESTest.java###test00+++isNumber###1, Strings_ESTest.java###test00+++assertFalse###1, Strings_ESTest.java###test01+++isNumber###1, Strings_ESTest.java###test01+++assertFalse###1, Strings_ESTest.java###test02+++format###2, Strings_ESTest.java###test02+++assertNotNull###1, Strings_ESTest.java###test03+++randomNumber###1, Strings_ESTest.java###test03+++assertEquals###2, Strings_ESTest.java###test04+++randomAlphabetic###1, Strings_ESTest.java###test04+++assertEquals###2, Strings_ESTest.java###test05+++random###2, Strings_ESTest.java###test05+++assertEquals###2, Strings_ESTest.java###test06+++fromReader###2, Strings_ESTest.java###test06+++assertEquals###2, Strings_ESTest.java###test07+++fromReader###1, Strings_ESTest.java###test07+++assertEquals###2, Strings_ESTest.java###test08+++format###2, Strings_ESTest.java###test08+++assertNull###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test10+++verifyException###2, Strings_ESTest.java###test10+++randomNumber###1, Strings_ESTest.java###test10+++fail###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test12+++verifyException###2, Strings_ESTest.java###test12+++randomAlphabetic###1, Strings_ESTest.java###test12+++fail###1, Strings_ESTest.java###test13+++verifyException###2, Strings_ESTest.java###test13+++random###2, Strings_ESTest.java###test13+++fail###1, Strings_ESTest.java###test14+++verifyException###2, Strings_ESTest.java###test14+++random###2, Strings_ESTest.java###test14+++fail###1, Strings_ESTest.java###test15+++random###2, Strings_ESTest.java###test15+++fail###1, Strings_ESTest.java###test16+++verifyException###2, Strings_ESTest.java###test16+++fromReader###2, Strings_ESTest.java###test16+++fail###1, Strings_ESTest.java###test17+++verifyException###2, Strings_ESTest.java###test17+++fromReader###2, Strings_ESTest.java###test17+++fail###1, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++verifyException###2, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++fail###1, Strings_ESTest.java###test19+++verifyException###2, Strings_ESTest.java###test19+++fromReader###1, Strings_ESTest.java###test19+++fail###1, Strings_ESTest.java###test20+++close###0, Strings_ESTest.java###test20+++verifyException###2, Strings_ESTest.java###test20+++fromReader###1, Strings_ESTest.java###test20+++fail###1, Strings_ESTest.java###test21+++verifyException###2, Strings_ESTest.java###test21+++format###2, Strings_ESTest.java###test21+++fail###1, Strings_ESTest.java###test22+++verifyException###2, Strings_ESTest.java###test22+++format###2, Strings_ESTest.java###test22+++fail###1, Strings_ESTest.java###test23+++fromReader###2, Strings_ESTest.java###test24+++isNumber###1, Strings_ESTest.java###test24+++assertTrue###1, Strings_ESTest.java###test25+++isNumber###1, Strings_ESTest.java###test25+++assertFalse###1, Strings_ESTest.java###test26+++isNumber###1, Strings_ESTest.java###test26+++assertFalse###1, Strings_ESTest.java###test27+++isNumber###1, Strings_ESTest.java###test27+++assertFalse###1, Strings_ESTest.java###test28+++isNumber###1, Strings_ESTest.java###test28+++assertFalse###1, Strings_ESTest.java###test29+++isNumber###1, Strings_ESTest.java###test29+++assertFalse###1, Strings_ESTest.java###test30+++random###2, Strings_ESTest.java###test30+++assertEquals###2, Strings_ESTest.java###test31+++format###2, Strings_ESTest.java###test31+++assertEquals###2, Strings_ESTest.java###test33+++fromReader###1, Strings_ESTest.java###test33+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:13:31 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Strings_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Strings\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Strings_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Strings\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Strings_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Strings\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Strings;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java###test15",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6%DL@T^]&'LmYrP>\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"Y\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Object[] objectArray0 = new Object[6];\n    objectArray0[1] = (Object) \"Wkyt @E@:v,ya6h$\";\n    String string0 = Strings.format(\"Wkyt @E@:v,ya6h$\", objectArray0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    String string0 = Strings.randomNumber(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    String string0 = Strings.randomAlphabetic(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    char[] charArray0 = new char[3];\n    String string0 = Strings.random(0, charArray0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"!!n$d3!sd#&|iK\");\n    String string0 = Strings.fromReader((Reader) stringReader0, 1);\n    assertEquals(\"!!n$d3!sd#&|iK\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    String string0 = Strings.format((String) null, (Object[]) null);\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Strings.randomNumber(5026);\n    // Undeclared exception!\n    Strings.randomNumber(5026);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomNumber((-1259));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Strings.randomAlphabetic(5028);\n    // Undeclared exception!\n    Strings.randomAlphabetic(5028);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomAlphabetic((-1176));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.random(2059, (char[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    char[] charArray0 = new char[1];\n    // Undeclared exception!\n    try {\n        Strings.random((-1110), charArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    char[] charArray0 = new char[0];\n    // Undeclared exception!\n    try {\n        Strings.random(2821, charArray0);\n        fail(\"Expecting exception: ArithmeticException\");\n    } catch (ArithmeticException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, 39);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, (-2195));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    Strings.fromReader((Reader) stringReader0, 3413);\n    try {\n        Strings.fromReader((Reader) stringReader0, 3413);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    stringReader0.close();\n    try {\n        Strings.fromReader((Reader) stringReader0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Object[] objectArray0 = new Object[2];\n    // Undeclared exception!\n    try {\n        Strings.format((String) null, objectArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Object[] objectArray0 = new Object[0];\n    // Undeclared exception!\n    try {\n        Strings.format(\"@.\", objectArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"(m]6'~ZW{o2bS7\");\n    // Undeclared exception!\n    Strings.fromReader((Reader) stringReader0, 0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"-|{Z&d1\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"73i7Lew\\\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    boolean boolean0 = Strings.isNumber((String) null);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    char[] charArray0 = new char[4];\n    String string0 = Strings.random(22, charArray0);\n    assertEquals(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    String string0 = Strings.format(\"\", (Object[]) null);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Strings strings0 = new Strings();\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"0QUsadEO=h0,}>#e|VW\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"0QUsadEO=h0,}>#e|VW\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    char[] charArray0 = new char[0];\n    // Undeclared exception!\n    try {\n        Strings.random(2821, charArray0);\n        fail(\"Expecting exception: ArithmeticException\");\n    } catch (ArithmeticException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}",
            "TestRelevantFocal": "[random###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:13:31 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Strings;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Strings_ESTest extends Strings_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static String fromReader(Reader reader, int bufferSize) throws IOException {\n    char[] arr = new char[bufferSize];\n    StringBuilder buffer = new StringBuilder();\n    int numCharsRead;\n    while ((numCharsRead = reader.read(arr, 0, arr.length)) != -1) {\n        buffer.append(arr, 0, numCharsRead);\n    }\n    reader.close();\n    return buffer.toString();\n}",
            "all_field_declaration": "private static final char PLACEHOLDER = '@';\nprivate static final char[] BIG_LETTERS = new char[26];\nprivate static final char[] SMALL_LETTERS = new char[26];\nprivate static final char[] NUMBERS = new char[10];\nprivate static final Random RANDOM = new Random();",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "6",
            "Filed": "",
            "Parameter_type": "Reader,int",
            "Import_statements": "import java.io.IOException;\nimport java.io.Reader;\n",
            "public_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "public_field": "",
            "Method_statement": "fromReader(Reader reader, int bufferSize)",
            "Method_name": "fromReader",
            "Class_declaration": "public class Strings {\n",
            "constructors": "",
            "all_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "Class_name": "Strings",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Strings.java###fromReader",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Reader;\n\nimport java.util.Random;\n\nimport com.zappos.json.JsonWriter;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Strings_ESTest.java###test00+++isNumber###1, Strings_ESTest.java###test00+++assertFalse###1, Strings_ESTest.java###test01+++isNumber###1, Strings_ESTest.java###test01+++assertFalse###1, Strings_ESTest.java###test02+++format###2, Strings_ESTest.java###test02+++assertNotNull###1, Strings_ESTest.java###test03+++randomNumber###1, Strings_ESTest.java###test03+++assertEquals###2, Strings_ESTest.java###test04+++randomAlphabetic###1, Strings_ESTest.java###test04+++assertEquals###2, Strings_ESTest.java###test05+++random###2, Strings_ESTest.java###test05+++assertEquals###2, Strings_ESTest.java###test06+++fromReader###2, Strings_ESTest.java###test06+++assertEquals###2, Strings_ESTest.java###test07+++fromReader###1, Strings_ESTest.java###test07+++assertEquals###2, Strings_ESTest.java###test08+++format###2, Strings_ESTest.java###test08+++assertNull###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test10+++verifyException###2, Strings_ESTest.java###test10+++randomNumber###1, Strings_ESTest.java###test10+++fail###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test12+++verifyException###2, Strings_ESTest.java###test12+++randomAlphabetic###1, Strings_ESTest.java###test12+++fail###1, Strings_ESTest.java###test13+++verifyException###2, Strings_ESTest.java###test13+++random###2, Strings_ESTest.java###test13+++fail###1, Strings_ESTest.java###test14+++verifyException###2, Strings_ESTest.java###test14+++random###2, Strings_ESTest.java###test14+++fail###1, Strings_ESTest.java###test15+++random###2, Strings_ESTest.java###test15+++fail###1, Strings_ESTest.java###test16+++verifyException###2, Strings_ESTest.java###test16+++fromReader###2, Strings_ESTest.java###test16+++fail###1, Strings_ESTest.java###test17+++verifyException###2, Strings_ESTest.java###test17+++fromReader###2, Strings_ESTest.java###test17+++fail###1, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++verifyException###2, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++fail###1, Strings_ESTest.java###test19+++verifyException###2, Strings_ESTest.java###test19+++fromReader###1, Strings_ESTest.java###test19+++fail###1, Strings_ESTest.java###test20+++close###0, Strings_ESTest.java###test20+++verifyException###2, Strings_ESTest.java###test20+++fromReader###1, Strings_ESTest.java###test20+++fail###1, Strings_ESTest.java###test21+++verifyException###2, Strings_ESTest.java###test21+++format###2, Strings_ESTest.java###test21+++fail###1, Strings_ESTest.java###test22+++verifyException###2, Strings_ESTest.java###test22+++format###2, Strings_ESTest.java###test22+++fail###1, Strings_ESTest.java###test23+++fromReader###2, Strings_ESTest.java###test24+++isNumber###1, Strings_ESTest.java###test24+++assertTrue###1, Strings_ESTest.java###test25+++isNumber###1, Strings_ESTest.java###test25+++assertFalse###1, Strings_ESTest.java###test26+++isNumber###1, Strings_ESTest.java###test26+++assertFalse###1, Strings_ESTest.java###test27+++isNumber###1, Strings_ESTest.java###test27+++assertFalse###1, Strings_ESTest.java###test28+++isNumber###1, Strings_ESTest.java###test28+++assertFalse###1, Strings_ESTest.java###test29+++isNumber###1, Strings_ESTest.java###test29+++assertFalse###1, Strings_ESTest.java###test30+++random###2, Strings_ESTest.java###test30+++assertEquals###2, Strings_ESTest.java###test31+++format###2, Strings_ESTest.java###test31+++assertEquals###2, Strings_ESTest.java###test33+++fromReader###1, Strings_ESTest.java###test33+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:13:31 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Strings_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Strings\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Strings_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Strings\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Strings_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Strings\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Strings;\nimport java.io.Reader;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java###test16",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6%DL@T^]&'LmYrP>\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"Y\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Object[] objectArray0 = new Object[6];\n    objectArray0[1] = (Object) \"Wkyt @E@:v,ya6h$\";\n    String string0 = Strings.format(\"Wkyt @E@:v,ya6h$\", objectArray0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    String string0 = Strings.randomNumber(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    String string0 = Strings.randomAlphabetic(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    char[] charArray0 = new char[3];\n    String string0 = Strings.random(0, charArray0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"!!n$d3!sd#&|iK\");\n    String string0 = Strings.fromReader((Reader) stringReader0, 1);\n    assertEquals(\"!!n$d3!sd#&|iK\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    String string0 = Strings.format((String) null, (Object[]) null);\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Strings.randomNumber(5026);\n    // Undeclared exception!\n    Strings.randomNumber(5026);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomNumber((-1259));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Strings.randomAlphabetic(5028);\n    // Undeclared exception!\n    Strings.randomAlphabetic(5028);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomAlphabetic((-1176));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.random(2059, (char[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    char[] charArray0 = new char[1];\n    // Undeclared exception!\n    try {\n        Strings.random((-1110), charArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    char[] charArray0 = new char[0];\n    // Undeclared exception!\n    try {\n        Strings.random(2821, charArray0);\n        fail(\"Expecting exception: ArithmeticException\");\n    } catch (ArithmeticException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, 39);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, (-2195));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    Strings.fromReader((Reader) stringReader0, 3413);\n    try {\n        Strings.fromReader((Reader) stringReader0, 3413);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    stringReader0.close();\n    try {\n        Strings.fromReader((Reader) stringReader0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Object[] objectArray0 = new Object[2];\n    // Undeclared exception!\n    try {\n        Strings.format((String) null, objectArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Object[] objectArray0 = new Object[0];\n    // Undeclared exception!\n    try {\n        Strings.format(\"@.\", objectArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"(m]6'~ZW{o2bS7\");\n    // Undeclared exception!\n    Strings.fromReader((Reader) stringReader0, 0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"-|{Z&d1\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"73i7Lew\\\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    boolean boolean0 = Strings.isNumber((String) null);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    char[] charArray0 = new char[4];\n    String string0 = Strings.random(22, charArray0);\n    assertEquals(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    String string0 = Strings.format(\"\", (Object[]) null);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Strings strings0 = new Strings();\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"0QUsadEO=h0,}>#e|VW\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"0QUsadEO=h0,}>#e|VW\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, 39);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}",
            "TestRelevantFocal": "[fromReader###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:13:31 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Strings;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Strings_ESTest extends Strings_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static String fromReader(Reader reader) throws IOException {\n    return fromReader(reader, 1024);\n}",
            "all_field_declaration": "private static final char PLACEHOLDER = '@';\nprivate static final char[] BIG_LETTERS = new char[26];\nprivate static final char[] SMALL_LETTERS = new char[26];\nprivate static final char[] NUMBERS = new char[10];\nprivate static final Random RANDOM = new Random();",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Reader",
            "Import_statements": "import java.io.IOException;\nimport java.io.Reader;\n",
            "public_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "public_field": "",
            "Method_statement": "fromReader(Reader reader)",
            "Method_name": "fromReader",
            "Class_declaration": "public class Strings {\n",
            "constructors": "",
            "all_method_signature": "public static String format(String pattern, Object... args);\npublic static String randomNumber(int n);\npublic static String randomAlphabetic(int n);\npublic static String random(int n, char[] chars);\npublic static boolean isNumber(String s);\npublic static String fromReader(Reader reader) throws IOException;\npublic static String fromReader(Reader reader, int bufferSize) throws IOException;",
            "Class_name": "Strings",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Strings.java###fromReader",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Reader;\n\nimport java.util.Random;\n\nimport com.zappos.json.JsonWriter;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static String fromReader(Reader reader) throws IOException;",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Strings_ESTest.java###test00+++isNumber###1, Strings_ESTest.java###test00+++assertFalse###1, Strings_ESTest.java###test01+++isNumber###1, Strings_ESTest.java###test01+++assertFalse###1, Strings_ESTest.java###test02+++format###2, Strings_ESTest.java###test02+++assertNotNull###1, Strings_ESTest.java###test03+++randomNumber###1, Strings_ESTest.java###test03+++assertEquals###2, Strings_ESTest.java###test04+++randomAlphabetic###1, Strings_ESTest.java###test04+++assertEquals###2, Strings_ESTest.java###test05+++random###2, Strings_ESTest.java###test05+++assertEquals###2, Strings_ESTest.java###test06+++fromReader###2, Strings_ESTest.java###test06+++assertEquals###2, Strings_ESTest.java###test07+++fromReader###1, Strings_ESTest.java###test07+++assertEquals###2, Strings_ESTest.java###test08+++format###2, Strings_ESTest.java###test08+++assertNull###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test09+++randomNumber###1, Strings_ESTest.java###test10+++verifyException###2, Strings_ESTest.java###test10+++randomNumber###1, Strings_ESTest.java###test10+++fail###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test11+++randomAlphabetic###1, Strings_ESTest.java###test12+++verifyException###2, Strings_ESTest.java###test12+++randomAlphabetic###1, Strings_ESTest.java###test12+++fail###1, Strings_ESTest.java###test13+++verifyException###2, Strings_ESTest.java###test13+++random###2, Strings_ESTest.java###test13+++fail###1, Strings_ESTest.java###test14+++verifyException###2, Strings_ESTest.java###test14+++random###2, Strings_ESTest.java###test14+++fail###1, Strings_ESTest.java###test15+++random###2, Strings_ESTest.java###test15+++fail###1, Strings_ESTest.java###test16+++verifyException###2, Strings_ESTest.java###test16+++fromReader###2, Strings_ESTest.java###test16+++fail###1, Strings_ESTest.java###test17+++verifyException###2, Strings_ESTest.java###test17+++fromReader###2, Strings_ESTest.java###test17+++fail###1, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++verifyException###2, Strings_ESTest.java###test18+++fromReader###2, Strings_ESTest.java###test18+++fail###1, Strings_ESTest.java###test19+++verifyException###2, Strings_ESTest.java###test19+++fromReader###1, Strings_ESTest.java###test19+++fail###1, Strings_ESTest.java###test20+++close###0, Strings_ESTest.java###test20+++verifyException###2, Strings_ESTest.java###test20+++fromReader###1, Strings_ESTest.java###test20+++fail###1, Strings_ESTest.java###test21+++verifyException###2, Strings_ESTest.java###test21+++format###2, Strings_ESTest.java###test21+++fail###1, Strings_ESTest.java###test22+++verifyException###2, Strings_ESTest.java###test22+++format###2, Strings_ESTest.java###test22+++fail###1, Strings_ESTest.java###test23+++fromReader###2, Strings_ESTest.java###test24+++isNumber###1, Strings_ESTest.java###test24+++assertTrue###1, Strings_ESTest.java###test25+++isNumber###1, Strings_ESTest.java###test25+++assertFalse###1, Strings_ESTest.java###test26+++isNumber###1, Strings_ESTest.java###test26+++assertFalse###1, Strings_ESTest.java###test27+++isNumber###1, Strings_ESTest.java###test27+++assertFalse###1, Strings_ESTest.java###test28+++isNumber###1, Strings_ESTest.java###test28+++assertFalse###1, Strings_ESTest.java###test29+++isNumber###1, Strings_ESTest.java###test29+++assertFalse###1, Strings_ESTest.java###test30+++random###2, Strings_ESTest.java###test30+++assertEquals###2, Strings_ESTest.java###test31+++format###2, Strings_ESTest.java###test31+++assertEquals###2, Strings_ESTest.java###test33+++fromReader###1, Strings_ESTest.java###test33+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:13:31 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Strings_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Strings\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Strings_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Strings\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Strings_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Strings\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Strings;\nimport java.io.Reader;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java###test19",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6%DL@T^]&'LmYrP>\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"Y\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Object[] objectArray0 = new Object[6];\n    objectArray0[1] = (Object) \"Wkyt @E@:v,ya6h$\";\n    String string0 = Strings.format(\"Wkyt @E@:v,ya6h$\", objectArray0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    String string0 = Strings.randomNumber(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    String string0 = Strings.randomAlphabetic(0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    char[] charArray0 = new char[3];\n    String string0 = Strings.random(0, charArray0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"!!n$d3!sd#&|iK\");\n    String string0 = Strings.fromReader((Reader) stringReader0, 1);\n    assertEquals(\"!!n$d3!sd#&|iK\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    String string0 = Strings.format((String) null, (Object[]) null);\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Strings.randomNumber(5026);\n    // Undeclared exception!\n    Strings.randomNumber(5026);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomNumber((-1259));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Strings.randomAlphabetic(5028);\n    // Undeclared exception!\n    Strings.randomAlphabetic(5028);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.randomAlphabetic((-1176));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.random(2059, (char[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    char[] charArray0 = new char[1];\n    // Undeclared exception!\n    try {\n        Strings.random((-1110), charArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    char[] charArray0 = new char[0];\n    // Undeclared exception!\n    try {\n        Strings.random(2821, charArray0);\n        fail(\"Expecting exception: ArithmeticException\");\n    } catch (ArithmeticException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, 39);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null, (-2195));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    Strings.fromReader((Reader) stringReader0, 3413);\n    try {\n        Strings.fromReader((Reader) stringReader0, 3413);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    stringReader0.close();\n    try {\n        Strings.fromReader((Reader) stringReader0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Stream closed\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Object[] objectArray0 = new Object[2];\n    // Undeclared exception!\n    try {\n        Strings.format((String) null, objectArray0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Object[] objectArray0 = new Object[0];\n    // Undeclared exception!\n    try {\n        Strings.format(\"@.\", objectArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"(m]6'~ZW{o2bS7\");\n    // Undeclared exception!\n    Strings.fromReader((Reader) stringReader0, 0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"6\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"-|{Z&d1\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    boolean boolean0 = Strings.isNumber(\"73i7Lew\\\"\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    boolean boolean0 = Strings.isNumber((String) null);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    char[] charArray0 = new char[4];\n    String string0 = Strings.random(22, charArray0);\n    assertEquals(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    String string0 = Strings.format(\"\", (Object[]) null);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Strings strings0 = new Strings();\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"0QUsadEO=h0,}>#e|VW\");\n    String string0 = Strings.fromReader((Reader) stringReader0);\n    assertEquals(\"0QUsadEO=h0,}>#e|VW\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strings.fromReader((Reader) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Strings\", e);\n    }\n}",
            "TestRelevantFocal": "[fromReader###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:13:31 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Strings;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Strings_ESTest extends Strings_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException {\n    boolean inescape = false;\n    for (int i = 0; i < value.length(); i++) {\n        char c = value.charAt(i);\n        if (c != '\\\\' && !inescape) {\n            writer.append(c);\n            continue;\n        } else if (c == '\\\\') {\n            inescape = true;\n            continue;\n        }\n        switch(c) {\n            case 'u':\n                writer.append(String.valueOf(Integer.parseInt(value.subSequence(i, 4).toString(), 16)));\n                i += 4;\n                break;\n            case 't':\n                writer.append('\\t');\n                break;\n            case 'b':\n                writer.append('\\b');\n                break;\n            case 'n':\n                writer.append('\\n');\n                break;\n            case 'r':\n                writer.append('\\r');\n                break;\n            case 'f':\n                writer.append('\\f');\n                break;\n            case '\\n':\n            case '\\'':\n            case '\"':\n            case '\\\\':\n            default:\n                writer.append(c);\n        }\n        inescape = false;\n    }\n}",
            "all_field_declaration": "/*\n   * Source: GSON\n   * From RFC 4627, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http://code.google.com/p/google-gson/issues/detail?id=341\n   */\nprivate static final String[] REPLACEMENT_CHARS;\nprivate static final String[] HTML_SAFE_REPLACEMENT_CHARS;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "ZapposJson,CharSequence,Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public static void escape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String escape(ZapposJson zapposJson, CharSequence value);\npublic static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String unescape(ZapposJson zapposJson, CharSequence value);",
            "public_field": "",
            "Method_statement": "unescape(ZapposJson zapposJson, CharSequence value, Writer writer)",
            "Method_name": "unescape",
            "Class_declaration": "public class JsonUtils {\n",
            "constructors": "",
            "all_method_signature": "public static void escape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String escape(ZapposJson zapposJson, CharSequence value);\npublic static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String unescape(ZapposJson zapposJson, CharSequence value);",
            "Class_name": "JsonUtils",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/JsonUtils.java###unescape",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonUtils_ESTest.java###test00+++getInstance###1, JsonUtils_ESTest.java###test00+++unescape###3, JsonUtils_ESTest.java###test00+++fail###1, JsonUtils_ESTest.java###test01+++getInstance###1, JsonUtils_ESTest.java###test01+++unescape###2, JsonUtils_ESTest.java###test01+++assertEquals###2, JsonUtils_ESTest.java###test02+++getInstance###0, JsonUtils_ESTest.java###test02+++allocate###1, JsonUtils_ESTest.java###test02+++wrap###3, JsonUtils_ESTest.java###test02+++escape###2, JsonUtils_ESTest.java###test02+++assertEquals###2, JsonUtils_ESTest.java###test03+++getInstance###0, JsonUtils_ESTest.java###test03+++write###1, JsonUtils_ESTest.java###test03+++getBuffer###0, JsonUtils_ESTest.java###test03+++unescape###3, JsonUtils_ESTest.java###test04+++getInstance###0, JsonUtils_ESTest.java###test04+++verifyException###2, JsonUtils_ESTest.java###test04+++unescape###3, JsonUtils_ESTest.java###test04+++fail###1, JsonUtils_ESTest.java###test05+++getInstance###0, JsonUtils_ESTest.java###test05+++unescape###2, JsonUtils_ESTest.java###test05+++fail###1, JsonUtils_ESTest.java###test06+++getInstance###0, JsonUtils_ESTest.java###test06+++unescape###2, JsonUtils_ESTest.java###test06+++fail###1, JsonUtils_ESTest.java###test07+++getInstance###0, JsonUtils_ESTest.java###test07+++allocate###1, JsonUtils_ESTest.java###test07+++escape###3, JsonUtils_ESTest.java###test07+++escape###3, JsonUtils_ESTest.java###test08+++getInstance###0, JsonUtils_ESTest.java###test08+++verifyException###2, JsonUtils_ESTest.java###test08+++escape###3, JsonUtils_ESTest.java###test08+++fail###1, JsonUtils_ESTest.java###test09+++getInstance###0, JsonUtils_ESTest.java###test09+++allocate###1, JsonUtils_ESTest.java###test09+++escape###2, JsonUtils_ESTest.java###test09+++escape###2, JsonUtils_ESTest.java###test10+++escape###2, JsonUtils_ESTest.java###test10+++fail###1, JsonUtils_ESTest.java###test11+++getInstance###1, JsonUtils_ESTest.java###test11+++unescape###3, JsonUtils_ESTest.java###test11+++assertEquals###2, JsonUtils_ESTest.java###test11+++size###0, JsonUtils_ESTest.java###test11+++assertEquals###2, JsonUtils_ESTest.java###test11+++toString###0, JsonUtils_ESTest.java###test12+++getInstance###0, JsonUtils_ESTest.java###test12+++escape###3, JsonUtils_ESTest.java###test12+++assertEquals###2, JsonUtils_ESTest.java###test12+++toString###0, JsonUtils_ESTest.java###test13+++getInstance###1, JsonUtils_ESTest.java###test13+++write###1, JsonUtils_ESTest.java###test13+++getBuffer###0, JsonUtils_ESTest.java###test13+++escape###3, JsonUtils_ESTest.java###test13+++assertEquals###2, JsonUtils_ESTest.java###test13+++length###0, JsonUtils_ESTest.java###test13+++assertEquals###2, JsonUtils_ESTest.java###test13+++toString###0, JsonUtils_ESTest.java###test14+++getInstance###1, JsonUtils_ESTest.java###test14+++escape###3, JsonUtils_ESTest.java###test14+++fail###1, JsonUtils_ESTest.java###test15+++getInstance###0, JsonUtils_ESTest.java###test15+++defaultCharset###0, JsonUtils_ESTest.java###test15+++encode###1, JsonUtils_ESTest.java###test15+++decode###1, JsonUtils_ESTest.java###test15+++unescape###2, JsonUtils_ESTest.java###test15+++assertEquals###2, JsonUtils_ESTest.java###test16+++write###1, JsonUtils_ESTest.java###test16+++getBuffer###0, JsonUtils_ESTest.java###test16+++getInstance###1, JsonUtils_ESTest.java###test16+++escape###2, JsonUtils_ESTest.java###test16+++assertEquals###2, JsonUtils_ESTest.java###test17+++getInstance###1, JsonUtils_ESTest.java###test17+++escape###2, JsonUtils_ESTest.java###test17+++assertEquals###2, JsonUtils_ESTest.java###test19+++getInstance###1, JsonUtils_ESTest.java###test19+++unescape###2, JsonUtils_ESTest.java###test19+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:07:05 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonUtils_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.JsonUtils\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonUtils_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonUtils_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.util.JsonUtils;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.Writer;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/JsonUtils_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) \"&\", (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"f[lX;J:ziZx\\\"\");\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) \"f[lX;J:ziZx\\\"\");\n    assertEquals(\"f[lX;J:ziZx\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    CharBuffer charBuffer0 = CharBuffer.allocate(9);\n    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer1);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringWriter stringWriter0 = new StringWriter();\n    stringWriter0.write(9983);\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    // Undeclared exception!\n    JsonUtils.unescape(zapposJson0, (CharSequence) stringBuffer0, (Writer) stringWriter0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) \"*aim\\\"!ww'{-g3*\\\"*O[7\", (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    String string0 = \"\\\\u\";\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) string0);\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringWriter stringWriter0 = new StringWriter();\n    CharBuffer charBuffer0 = CharBuffer.allocate(9983);\n    JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);\n    // Undeclared exception!\n    JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonUtils.escape(zapposJson0, (CharSequence) \"$u@],C=p25_^znH8,*Z\", (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    CharBuffer charBuffer0 = CharBuffer.allocate(8233);\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0);\n    // Undeclared exception!\n    JsonUtils.escape(zapposJson0, (CharSequence) string0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonUtils.escape((ZapposJson) null, (CharSequence) \"&\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);\n    JsonUtils.unescape(zapposJson0, (CharSequence) \"*ai\\\"!ww'{-g3*\\\"*O[7\", (Writer) charArrayWriter0);\n    assertEquals(19, charArrayWriter0.size());\n    assertEquals(\"*ai\\\"!ww'{-g3*\\\"*O[7\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter(8232);\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonUtils.escape(zapposJson0, (CharSequence) \"\\u2028& \\u2028\", (Writer) stringWriter0);\n    assertEquals(\"\\\\u2028& \\\\u2028\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\".g\");\n    StringWriter stringWriter0 = new StringWriter(1948);\n    stringWriter0.write((-4019));\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0, (Writer) stringWriter0);\n    assertEquals(2, stringBuffer0.length());\n    assertEquals(\"\\uF04D\\uF04D\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*aim\\\"!ww'{-g3*\\\"*O[7\");\n    // Undeclared exception!\n    try {\n        JsonUtils.escape(zapposJson0, (CharSequence) \"*aim\\\"!ww'{-g3*\\\"*O[7\", (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Charset charset0 = Charset.defaultCharset();\n    ByteBuffer byteBuffer0 = charset0.encode(\"$u@],C=p25\\\\_^znH8,*Z\");\n    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) charBuffer0);\n    assertEquals(\"$u@],C=p25_^znH8,*Z\", string0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    stringWriter0.write(128);\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"KU/\\\";l\");\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0);\n    assertEquals(\"\\u0080\", string0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) \"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    assertEquals(\"*ai\\\\\\\"!ww'{-g3*\\\\\\\"*O[7\", string0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    JsonUtils jsonUtils0 = new JsonUtils();\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) \"\");\n    assertEquals(\"\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) \"*aim\\\"!ww'{-g3*\\\"*O[7\", (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}",
            "TestRelevantFocal": "[unescape###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:07:05 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.util.JsonUtils;\nimport java.io.CharArrayWriter;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonUtils_ESTest extends JsonUtils_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static String unescape(ZapposJson zapposJson, CharSequence value) {\n    StringWriter writer = new StringWriter();\n    try {\n        unescape(zapposJson, value, writer);\n    } catch (IOException e) {\n    }\n    return writer.toString();\n}",
            "all_field_declaration": "/*\n   * Source: GSON\n   * From RFC 4627, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http://code.google.com/p/google-gson/issues/detail?id=341\n   */\nprivate static final String[] REPLACEMENT_CHARS;\nprivate static final String[] HTML_SAFE_REPLACEMENT_CHARS;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "ZapposJson,CharSequence",
            "Import_statements": "import java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public static void escape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String escape(ZapposJson zapposJson, CharSequence value);\npublic static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String unescape(ZapposJson zapposJson, CharSequence value);",
            "public_field": "",
            "Method_statement": "unescape(ZapposJson zapposJson, CharSequence value)",
            "Method_name": "unescape",
            "Class_declaration": "public class JsonUtils {\n",
            "constructors": "",
            "all_method_signature": "public static void escape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String escape(ZapposJson zapposJson, CharSequence value);\npublic static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String unescape(ZapposJson zapposJson, CharSequence value);",
            "Class_name": "JsonUtils",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/JsonUtils.java###unescape",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static String unescape(ZapposJson zapposJson, CharSequence value);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonUtils_ESTest.java###test00+++getInstance###1, JsonUtils_ESTest.java###test00+++unescape###3, JsonUtils_ESTest.java###test00+++fail###1, JsonUtils_ESTest.java###test01+++getInstance###1, JsonUtils_ESTest.java###test01+++unescape###2, JsonUtils_ESTest.java###test01+++assertEquals###2, JsonUtils_ESTest.java###test02+++getInstance###0, JsonUtils_ESTest.java###test02+++allocate###1, JsonUtils_ESTest.java###test02+++wrap###3, JsonUtils_ESTest.java###test02+++escape###2, JsonUtils_ESTest.java###test02+++assertEquals###2, JsonUtils_ESTest.java###test03+++getInstance###0, JsonUtils_ESTest.java###test03+++write###1, JsonUtils_ESTest.java###test03+++getBuffer###0, JsonUtils_ESTest.java###test03+++unescape###3, JsonUtils_ESTest.java###test04+++getInstance###0, JsonUtils_ESTest.java###test04+++verifyException###2, JsonUtils_ESTest.java###test04+++unescape###3, JsonUtils_ESTest.java###test04+++fail###1, JsonUtils_ESTest.java###test05+++getInstance###0, JsonUtils_ESTest.java###test05+++unescape###2, JsonUtils_ESTest.java###test05+++fail###1, JsonUtils_ESTest.java###test06+++getInstance###0, JsonUtils_ESTest.java###test06+++unescape###2, JsonUtils_ESTest.java###test06+++fail###1, JsonUtils_ESTest.java###test07+++getInstance###0, JsonUtils_ESTest.java###test07+++allocate###1, JsonUtils_ESTest.java###test07+++escape###3, JsonUtils_ESTest.java###test07+++escape###3, JsonUtils_ESTest.java###test08+++getInstance###0, JsonUtils_ESTest.java###test08+++verifyException###2, JsonUtils_ESTest.java###test08+++escape###3, JsonUtils_ESTest.java###test08+++fail###1, JsonUtils_ESTest.java###test09+++getInstance###0, JsonUtils_ESTest.java###test09+++allocate###1, JsonUtils_ESTest.java###test09+++escape###2, JsonUtils_ESTest.java###test09+++escape###2, JsonUtils_ESTest.java###test10+++escape###2, JsonUtils_ESTest.java###test10+++fail###1, JsonUtils_ESTest.java###test11+++getInstance###1, JsonUtils_ESTest.java###test11+++unescape###3, JsonUtils_ESTest.java###test11+++assertEquals###2, JsonUtils_ESTest.java###test11+++size###0, JsonUtils_ESTest.java###test11+++assertEquals###2, JsonUtils_ESTest.java###test11+++toString###0, JsonUtils_ESTest.java###test12+++getInstance###0, JsonUtils_ESTest.java###test12+++escape###3, JsonUtils_ESTest.java###test12+++assertEquals###2, JsonUtils_ESTest.java###test12+++toString###0, JsonUtils_ESTest.java###test13+++getInstance###1, JsonUtils_ESTest.java###test13+++write###1, JsonUtils_ESTest.java###test13+++getBuffer###0, JsonUtils_ESTest.java###test13+++escape###3, JsonUtils_ESTest.java###test13+++assertEquals###2, JsonUtils_ESTest.java###test13+++length###0, JsonUtils_ESTest.java###test13+++assertEquals###2, JsonUtils_ESTest.java###test13+++toString###0, JsonUtils_ESTest.java###test14+++getInstance###1, JsonUtils_ESTest.java###test14+++escape###3, JsonUtils_ESTest.java###test14+++fail###1, JsonUtils_ESTest.java###test15+++getInstance###0, JsonUtils_ESTest.java###test15+++defaultCharset###0, JsonUtils_ESTest.java###test15+++encode###1, JsonUtils_ESTest.java###test15+++decode###1, JsonUtils_ESTest.java###test15+++unescape###2, JsonUtils_ESTest.java###test15+++assertEquals###2, JsonUtils_ESTest.java###test16+++write###1, JsonUtils_ESTest.java###test16+++getBuffer###0, JsonUtils_ESTest.java###test16+++getInstance###1, JsonUtils_ESTest.java###test16+++escape###2, JsonUtils_ESTest.java###test16+++assertEquals###2, JsonUtils_ESTest.java###test17+++getInstance###1, JsonUtils_ESTest.java###test17+++escape###2, JsonUtils_ESTest.java###test17+++assertEquals###2, JsonUtils_ESTest.java###test19+++getInstance###1, JsonUtils_ESTest.java###test19+++unescape###2, JsonUtils_ESTest.java###test19+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:07:05 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonUtils_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.JsonUtils\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonUtils_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonUtils_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.util.JsonUtils;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/JsonUtils_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) \"&\", (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"f[lX;J:ziZx\\\"\");\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) \"f[lX;J:ziZx\\\"\");\n    assertEquals(\"f[lX;J:ziZx\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    CharBuffer charBuffer0 = CharBuffer.allocate(9);\n    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer1);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringWriter stringWriter0 = new StringWriter();\n    stringWriter0.write(9983);\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    // Undeclared exception!\n    JsonUtils.unescape(zapposJson0, (CharSequence) stringBuffer0, (Writer) stringWriter0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) \"*aim\\\"!ww'{-g3*\\\"*O[7\", (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    String string0 = \"\\\\u\";\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) string0);\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringWriter stringWriter0 = new StringWriter();\n    CharBuffer charBuffer0 = CharBuffer.allocate(9983);\n    JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);\n    // Undeclared exception!\n    JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonUtils.escape(zapposJson0, (CharSequence) \"$u@],C=p25_^znH8,*Z\", (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    CharBuffer charBuffer0 = CharBuffer.allocate(8233);\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0);\n    // Undeclared exception!\n    JsonUtils.escape(zapposJson0, (CharSequence) string0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonUtils.escape((ZapposJson) null, (CharSequence) \"&\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);\n    JsonUtils.unescape(zapposJson0, (CharSequence) \"*ai\\\"!ww'{-g3*\\\"*O[7\", (Writer) charArrayWriter0);\n    assertEquals(19, charArrayWriter0.size());\n    assertEquals(\"*ai\\\"!ww'{-g3*\\\"*O[7\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter(8232);\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonUtils.escape(zapposJson0, (CharSequence) \"\\u2028& \\u2028\", (Writer) stringWriter0);\n    assertEquals(\"\\\\u2028& \\\\u2028\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\".g\");\n    StringWriter stringWriter0 = new StringWriter(1948);\n    stringWriter0.write((-4019));\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0, (Writer) stringWriter0);\n    assertEquals(2, stringBuffer0.length());\n    assertEquals(\"\\uF04D\\uF04D\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*aim\\\"!ww'{-g3*\\\"*O[7\");\n    // Undeclared exception!\n    try {\n        JsonUtils.escape(zapposJson0, (CharSequence) \"*aim\\\"!ww'{-g3*\\\"*O[7\", (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Charset charset0 = Charset.defaultCharset();\n    ByteBuffer byteBuffer0 = charset0.encode(\"$u@],C=p25\\\\_^znH8,*Z\");\n    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) charBuffer0);\n    assertEquals(\"$u@],C=p25_^znH8,*Z\", string0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    stringWriter0.write(128);\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"KU/\\\";l\");\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0);\n    assertEquals(\"\\u0080\", string0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) \"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    assertEquals(\"*ai\\\\\\\"!ww'{-g3*\\\\\\\"*O[7\", string0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    JsonUtils jsonUtils0 = new JsonUtils();\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) \"\");\n    assertEquals(\"\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    String string0 = \"\\\\u\";\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) string0);\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}",
            "TestRelevantFocal": "[unescape###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:07:05 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.util.JsonUtils;\nimport java.io.CharArrayWriter;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonUtils_ESTest extends JsonUtils_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static String escape(ZapposJson zapposJson, CharSequence value) {\n    StringWriter writer = new StringWriter();\n    try {\n        escape(zapposJson, value, writer);\n    } catch (IOException e) {\n    }\n    return writer.toString();\n}",
            "all_field_declaration": "/*\n   * Source: GSON\n   * From RFC 4627, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http://code.google.com/p/google-gson/issues/detail?id=341\n   */\nprivate static final String[] REPLACEMENT_CHARS;\nprivate static final String[] HTML_SAFE_REPLACEMENT_CHARS;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "ZapposJson,CharSequence",
            "Import_statements": "import java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public static void escape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String escape(ZapposJson zapposJson, CharSequence value);\npublic static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String unescape(ZapposJson zapposJson, CharSequence value);",
            "public_field": "",
            "Method_statement": "escape(ZapposJson zapposJson, CharSequence value)",
            "Method_name": "escape",
            "Class_declaration": "public class JsonUtils {\n",
            "constructors": "",
            "all_method_signature": "public static void escape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String escape(ZapposJson zapposJson, CharSequence value);\npublic static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String unescape(ZapposJson zapposJson, CharSequence value);",
            "Class_name": "JsonUtils",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/JsonUtils.java###escape",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static String escape(ZapposJson zapposJson, CharSequence value);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonUtils_ESTest.java###test00+++getInstance###1, JsonUtils_ESTest.java###test00+++unescape###3, JsonUtils_ESTest.java###test00+++fail###1, JsonUtils_ESTest.java###test01+++getInstance###1, JsonUtils_ESTest.java###test01+++unescape###2, JsonUtils_ESTest.java###test01+++assertEquals###2, JsonUtils_ESTest.java###test02+++getInstance###0, JsonUtils_ESTest.java###test02+++allocate###1, JsonUtils_ESTest.java###test02+++wrap###3, JsonUtils_ESTest.java###test02+++escape###2, JsonUtils_ESTest.java###test02+++assertEquals###2, JsonUtils_ESTest.java###test03+++getInstance###0, JsonUtils_ESTest.java###test03+++write###1, JsonUtils_ESTest.java###test03+++getBuffer###0, JsonUtils_ESTest.java###test03+++unescape###3, JsonUtils_ESTest.java###test04+++getInstance###0, JsonUtils_ESTest.java###test04+++verifyException###2, JsonUtils_ESTest.java###test04+++unescape###3, JsonUtils_ESTest.java###test04+++fail###1, JsonUtils_ESTest.java###test05+++getInstance###0, JsonUtils_ESTest.java###test05+++unescape###2, JsonUtils_ESTest.java###test05+++fail###1, JsonUtils_ESTest.java###test06+++getInstance###0, JsonUtils_ESTest.java###test06+++unescape###2, JsonUtils_ESTest.java###test06+++fail###1, JsonUtils_ESTest.java###test07+++getInstance###0, JsonUtils_ESTest.java###test07+++allocate###1, JsonUtils_ESTest.java###test07+++escape###3, JsonUtils_ESTest.java###test07+++escape###3, JsonUtils_ESTest.java###test08+++getInstance###0, JsonUtils_ESTest.java###test08+++verifyException###2, JsonUtils_ESTest.java###test08+++escape###3, JsonUtils_ESTest.java###test08+++fail###1, JsonUtils_ESTest.java###test09+++getInstance###0, JsonUtils_ESTest.java###test09+++allocate###1, JsonUtils_ESTest.java###test09+++escape###2, JsonUtils_ESTest.java###test09+++escape###2, JsonUtils_ESTest.java###test10+++escape###2, JsonUtils_ESTest.java###test10+++fail###1, JsonUtils_ESTest.java###test11+++getInstance###1, JsonUtils_ESTest.java###test11+++unescape###3, JsonUtils_ESTest.java###test11+++assertEquals###2, JsonUtils_ESTest.java###test11+++size###0, JsonUtils_ESTest.java###test11+++assertEquals###2, JsonUtils_ESTest.java###test11+++toString###0, JsonUtils_ESTest.java###test12+++getInstance###0, JsonUtils_ESTest.java###test12+++escape###3, JsonUtils_ESTest.java###test12+++assertEquals###2, JsonUtils_ESTest.java###test12+++toString###0, JsonUtils_ESTest.java###test13+++getInstance###1, JsonUtils_ESTest.java###test13+++write###1, JsonUtils_ESTest.java###test13+++getBuffer###0, JsonUtils_ESTest.java###test13+++escape###3, JsonUtils_ESTest.java###test13+++assertEquals###2, JsonUtils_ESTest.java###test13+++length###0, JsonUtils_ESTest.java###test13+++assertEquals###2, JsonUtils_ESTest.java###test13+++toString###0, JsonUtils_ESTest.java###test14+++getInstance###1, JsonUtils_ESTest.java###test14+++escape###3, JsonUtils_ESTest.java###test14+++fail###1, JsonUtils_ESTest.java###test15+++getInstance###0, JsonUtils_ESTest.java###test15+++defaultCharset###0, JsonUtils_ESTest.java###test15+++encode###1, JsonUtils_ESTest.java###test15+++decode###1, JsonUtils_ESTest.java###test15+++unescape###2, JsonUtils_ESTest.java###test15+++assertEquals###2, JsonUtils_ESTest.java###test16+++write###1, JsonUtils_ESTest.java###test16+++getBuffer###0, JsonUtils_ESTest.java###test16+++getInstance###1, JsonUtils_ESTest.java###test16+++escape###2, JsonUtils_ESTest.java###test16+++assertEquals###2, JsonUtils_ESTest.java###test17+++getInstance###1, JsonUtils_ESTest.java###test17+++escape###2, JsonUtils_ESTest.java###test17+++assertEquals###2, JsonUtils_ESTest.java###test19+++getInstance###1, JsonUtils_ESTest.java###test19+++unescape###2, JsonUtils_ESTest.java###test19+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:07:05 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonUtils_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.JsonUtils\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonUtils_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonUtils_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.util.JsonUtils;\nimport java.io.StringWriter;\nimport java.io.Writer;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/JsonUtils_ESTest.java###test16",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) \"&\", (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"f[lX;J:ziZx\\\"\");\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) \"f[lX;J:ziZx\\\"\");\n    assertEquals(\"f[lX;J:ziZx\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    CharBuffer charBuffer0 = CharBuffer.allocate(9);\n    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer1);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringWriter stringWriter0 = new StringWriter();\n    stringWriter0.write(9983);\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    // Undeclared exception!\n    JsonUtils.unescape(zapposJson0, (CharSequence) stringBuffer0, (Writer) stringWriter0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) \"*aim\\\"!ww'{-g3*\\\"*O[7\", (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    String string0 = \"\\\\u\";\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) string0);\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringWriter stringWriter0 = new StringWriter();\n    CharBuffer charBuffer0 = CharBuffer.allocate(9983);\n    JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);\n    // Undeclared exception!\n    JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonUtils.escape(zapposJson0, (CharSequence) \"$u@],C=p25_^znH8,*Z\", (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    CharBuffer charBuffer0 = CharBuffer.allocate(8233);\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0);\n    // Undeclared exception!\n    JsonUtils.escape(zapposJson0, (CharSequence) string0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonUtils.escape((ZapposJson) null, (CharSequence) \"&\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);\n    JsonUtils.unescape(zapposJson0, (CharSequence) \"*ai\\\"!ww'{-g3*\\\"*O[7\", (Writer) charArrayWriter0);\n    assertEquals(19, charArrayWriter0.size());\n    assertEquals(\"*ai\\\"!ww'{-g3*\\\"*O[7\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter(8232);\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonUtils.escape(zapposJson0, (CharSequence) \"\\u2028& \\u2028\", (Writer) stringWriter0);\n    assertEquals(\"\\\\u2028& \\\\u2028\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\".g\");\n    StringWriter stringWriter0 = new StringWriter(1948);\n    stringWriter0.write((-4019));\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0, (Writer) stringWriter0);\n    assertEquals(2, stringBuffer0.length());\n    assertEquals(\"\\uF04D\\uF04D\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*aim\\\"!ww'{-g3*\\\"*O[7\");\n    // Undeclared exception!\n    try {\n        JsonUtils.escape(zapposJson0, (CharSequence) \"*aim\\\"!ww'{-g3*\\\"*O[7\", (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Charset charset0 = Charset.defaultCharset();\n    ByteBuffer byteBuffer0 = charset0.encode(\"$u@],C=p25\\\\_^znH8,*Z\");\n    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) charBuffer0);\n    assertEquals(\"$u@],C=p25_^znH8,*Z\", string0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    stringWriter0.write(128);\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"KU/\\\";l\");\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0);\n    assertEquals(\"\\u0080\", string0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) \"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    assertEquals(\"*ai\\\\\\\"!ww'{-g3*\\\\\\\"*O[7\", string0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    JsonUtils jsonUtils0 = new JsonUtils();\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) \"\");\n    assertEquals(\"\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    stringWriter0.write(128);\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"KU/\\\";l\");\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0);\n    assertEquals(\"\\u0080\", string0);\n}",
            "TestRelevantFocal": "[escape###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:07:05 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.util.JsonUtils;\nimport java.io.CharArrayWriter;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonUtils_ESTest extends JsonUtils_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void escape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException {\n    String[] replacements = (zapposJson.is(WriterConfig.WRITE_HTML_SAFE)) ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;\n    int last = 0;\n    int length = value.length();\n    for (int i = 0; i < length; i++) {\n        char c = value.charAt(i);\n        String replacement;\n        if (c < 128) {\n            replacement = replacements[c];\n            if (replacement == null) {\n                continue;\n            }\n        } else if (c == '\\u2028') {\n            replacement = \"\\\\u2028\";\n        } else if (c == '\\u2029') {\n            replacement = \"\\\\u2029\";\n        } else {\n            continue;\n        }\n        if (last < i) {\n            writer.write(value.toString(), last, i - last);\n        }\n        writer.write(replacement);\n        last = i + 1;\n    }\n    if (last < length) {\n        writer.write(value.toString(), last, length - last);\n    }\n}",
            "all_field_declaration": "/*\n   * Source: GSON\n   * From RFC 4627, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http://code.google.com/p/google-gson/issues/detail?id=341\n   */\nprivate static final String[] REPLACEMENT_CHARS;\nprivate static final String[] HTML_SAFE_REPLACEMENT_CHARS;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "5",
            "Filed": "private static final String[] REPLACEMENT_CHARS;private static final String[] HTML_SAFE_REPLACEMENT_CHARS;",
            "Parameter_type": "ZapposJson,CharSequence,Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\nimport com.zappos.json.JsonConfig.WriterConfig;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public static void escape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String escape(ZapposJson zapposJson, CharSequence value);\npublic static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String unescape(ZapposJson zapposJson, CharSequence value);",
            "public_field": "",
            "Method_statement": "escape(ZapposJson zapposJson, CharSequence value, Writer writer)",
            "Method_name": "escape",
            "Class_declaration": "public class JsonUtils {\n",
            "constructors": "",
            "all_method_signature": "public static void escape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String escape(ZapposJson zapposJson, CharSequence value);\npublic static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;\npublic static String unescape(ZapposJson zapposJson, CharSequence value);",
            "Class_name": "JsonUtils",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/JsonUtils.java###escape",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static void escape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonUtils_ESTest.java###test00+++getInstance###1, JsonUtils_ESTest.java###test00+++unescape###3, JsonUtils_ESTest.java###test00+++fail###1, JsonUtils_ESTest.java###test01+++getInstance###1, JsonUtils_ESTest.java###test01+++unescape###2, JsonUtils_ESTest.java###test01+++assertEquals###2, JsonUtils_ESTest.java###test02+++getInstance###0, JsonUtils_ESTest.java###test02+++allocate###1, JsonUtils_ESTest.java###test02+++wrap###3, JsonUtils_ESTest.java###test02+++escape###2, JsonUtils_ESTest.java###test02+++assertEquals###2, JsonUtils_ESTest.java###test03+++getInstance###0, JsonUtils_ESTest.java###test03+++write###1, JsonUtils_ESTest.java###test03+++getBuffer###0, JsonUtils_ESTest.java###test03+++unescape###3, JsonUtils_ESTest.java###test04+++getInstance###0, JsonUtils_ESTest.java###test04+++verifyException###2, JsonUtils_ESTest.java###test04+++unescape###3, JsonUtils_ESTest.java###test04+++fail###1, JsonUtils_ESTest.java###test05+++getInstance###0, JsonUtils_ESTest.java###test05+++unescape###2, JsonUtils_ESTest.java###test05+++fail###1, JsonUtils_ESTest.java###test06+++getInstance###0, JsonUtils_ESTest.java###test06+++unescape###2, JsonUtils_ESTest.java###test06+++fail###1, JsonUtils_ESTest.java###test07+++getInstance###0, JsonUtils_ESTest.java###test07+++allocate###1, JsonUtils_ESTest.java###test07+++escape###3, JsonUtils_ESTest.java###test07+++escape###3, JsonUtils_ESTest.java###test08+++getInstance###0, JsonUtils_ESTest.java###test08+++verifyException###2, JsonUtils_ESTest.java###test08+++escape###3, JsonUtils_ESTest.java###test08+++fail###1, JsonUtils_ESTest.java###test09+++getInstance###0, JsonUtils_ESTest.java###test09+++allocate###1, JsonUtils_ESTest.java###test09+++escape###2, JsonUtils_ESTest.java###test09+++escape###2, JsonUtils_ESTest.java###test10+++escape###2, JsonUtils_ESTest.java###test10+++fail###1, JsonUtils_ESTest.java###test11+++getInstance###1, JsonUtils_ESTest.java###test11+++unescape###3, JsonUtils_ESTest.java###test11+++assertEquals###2, JsonUtils_ESTest.java###test11+++size###0, JsonUtils_ESTest.java###test11+++assertEquals###2, JsonUtils_ESTest.java###test11+++toString###0, JsonUtils_ESTest.java###test12+++getInstance###0, JsonUtils_ESTest.java###test12+++escape###3, JsonUtils_ESTest.java###test12+++assertEquals###2, JsonUtils_ESTest.java###test12+++toString###0, JsonUtils_ESTest.java###test13+++getInstance###1, JsonUtils_ESTest.java###test13+++write###1, JsonUtils_ESTest.java###test13+++getBuffer###0, JsonUtils_ESTest.java###test13+++escape###3, JsonUtils_ESTest.java###test13+++assertEquals###2, JsonUtils_ESTest.java###test13+++length###0, JsonUtils_ESTest.java###test13+++assertEquals###2, JsonUtils_ESTest.java###test13+++toString###0, JsonUtils_ESTest.java###test14+++getInstance###1, JsonUtils_ESTest.java###test14+++escape###3, JsonUtils_ESTest.java###test14+++fail###1, JsonUtils_ESTest.java###test15+++getInstance###0, JsonUtils_ESTest.java###test15+++defaultCharset###0, JsonUtils_ESTest.java###test15+++encode###1, JsonUtils_ESTest.java###test15+++decode###1, JsonUtils_ESTest.java###test15+++unescape###2, JsonUtils_ESTest.java###test15+++assertEquals###2, JsonUtils_ESTest.java###test16+++write###1, JsonUtils_ESTest.java###test16+++getBuffer###0, JsonUtils_ESTest.java###test16+++getInstance###1, JsonUtils_ESTest.java###test16+++escape###2, JsonUtils_ESTest.java###test16+++assertEquals###2, JsonUtils_ESTest.java###test17+++getInstance###1, JsonUtils_ESTest.java###test17+++escape###2, JsonUtils_ESTest.java###test17+++assertEquals###2, JsonUtils_ESTest.java###test19+++getInstance###1, JsonUtils_ESTest.java###test19+++unescape###2, JsonUtils_ESTest.java###test19+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:07:05 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonUtils_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.JsonUtils\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonUtils_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonUtils_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.util.JsonUtils;\nimport java.io.Writer;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/JsonUtils_ESTest.java###test14",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) \"&\", (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"f[lX;J:ziZx\\\"\");\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) \"f[lX;J:ziZx\\\"\");\n    assertEquals(\"f[lX;J:ziZx\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    CharBuffer charBuffer0 = CharBuffer.allocate(9);\n    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer1);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringWriter stringWriter0 = new StringWriter();\n    stringWriter0.write(9983);\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    // Undeclared exception!\n    JsonUtils.unescape(zapposJson0, (CharSequence) stringBuffer0, (Writer) stringWriter0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) \"*aim\\\"!ww'{-g3*\\\"*O[7\", (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    String string0 = \"\\\\u\";\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) string0);\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        JsonUtils.unescape(zapposJson0, (CharSequence) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringWriter stringWriter0 = new StringWriter();\n    CharBuffer charBuffer0 = CharBuffer.allocate(9983);\n    JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);\n    // Undeclared exception!\n    JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonUtils.escape(zapposJson0, (CharSequence) \"$u@],C=p25_^znH8,*Z\", (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    CharBuffer charBuffer0 = CharBuffer.allocate(8233);\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0);\n    // Undeclared exception!\n    JsonUtils.escape(zapposJson0, (CharSequence) string0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonUtils.escape((ZapposJson) null, (CharSequence) \"&\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);\n    JsonUtils.unescape(zapposJson0, (CharSequence) \"*ai\\\"!ww'{-g3*\\\"*O[7\", (Writer) charArrayWriter0);\n    assertEquals(19, charArrayWriter0.size());\n    assertEquals(\"*ai\\\"!ww'{-g3*\\\"*O[7\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter(8232);\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonUtils.escape(zapposJson0, (CharSequence) \"\\u2028& \\u2028\", (Writer) stringWriter0);\n    assertEquals(\"\\\\u2028& \\\\u2028\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\".g\");\n    StringWriter stringWriter0 = new StringWriter(1948);\n    stringWriter0.write((-4019));\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0, (Writer) stringWriter0);\n    assertEquals(2, stringBuffer0.length());\n    assertEquals(\"\\uF04D\\uF04D\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*aim\\\"!ww'{-g3*\\\"*O[7\");\n    // Undeclared exception!\n    try {\n        JsonUtils.escape(zapposJson0, (CharSequence) \"*aim\\\"!ww'{-g3*\\\"*O[7\", (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Charset charset0 = Charset.defaultCharset();\n    ByteBuffer byteBuffer0 = charset0.encode(\"$u@],C=p25\\\\_^znH8,*Z\");\n    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) charBuffer0);\n    assertEquals(\"$u@],C=p25_^znH8,*Z\", string0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    stringWriter0.write(128);\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"KU/\\\";l\");\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0);\n    assertEquals(\"\\u0080\", string0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) \"*ai\\\"!ww'{-g3*\\\"*O[7\");\n    assertEquals(\"*ai\\\\\\\"!ww'{-g3*\\\\\\\"*O[7\", string0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    JsonUtils jsonUtils0 = new JsonUtils();\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) \"\");\n    assertEquals(\"\", string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"*aim\\\"!ww'{-g3*\\\"*O[7\");\n    // Undeclared exception!\n    try {\n        JsonUtils.escape(zapposJson0, (CharSequence) \"*aim\\\"!ww'{-g3*\\\"*O[7\", (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}",
            "TestRelevantFocal": "[escape###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:07:05 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.util.JsonUtils;\nimport java.io.CharArrayWriter;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonUtils_ESTest extends JsonUtils_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static boolean classPresent(String className) {\n    ClassLoader thisClassLoader = Reflections.class.getClassLoader();\n    try {\n        Class.forName(className, false, thisClassLoader);\n        return true;\n    } catch (ClassNotFoundException e) {\n        return false;\n    }\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "String",
            "Import_statements": "",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "classPresent(String className)",
            "Method_name": "classPresent",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###classPresent",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static boolean classPresent(String className);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[classPresent###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static Class<?> getSecondGenericType(Field field) {\n    Class<?>[] types = getGenericTypes(field);\n    if (types != null && types.length > 1) {\n        return types[1];\n    }\n    return null;\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "Field",
            "Import_statements": "import java.lang.reflect.Field;\nimport java.lang.reflect.Type;\n",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "getSecondGenericType(Field field)",
            "Method_name": "getSecondGenericType",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###getSecondGenericType",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static Class<?> getSecondGenericType(Field field);",
            "Junit_version": "4",
            "returnType": "Class<?>"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\nimport java.lang.reflect.Field;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}",
            "TestRelevantFocal": "[getSecondGenericType###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static Class<?> getSecondGenericParameterType(Method method) {\n    Class<?>[] types = getGenericParameterTypes(method);\n    if (types != null && types.length > 1) {\n        return types[1];\n    }\n    return null;\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "Method",
            "Import_statements": "import java.lang.reflect.Method;\nimport java.lang.reflect.Type;\n",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "getSecondGenericParameterType(Method method)",
            "Method_name": "getSecondGenericParameterType",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###getSecondGenericParameterType",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static Class<?> getSecondGenericParameterType(Method method);",
            "Junit_version": "4",
            "returnType": "Class<?>"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\nimport java.lang.reflect.Method;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}",
            "TestRelevantFocal": "[getSecondGenericParameterType###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static Class<?>[] getGenericTypes(Field field) {\n    Type fieldType = field.getGenericType();\n    if (fieldType instanceof ParameterizedType) {\n        Type[] typeArgs = ((ParameterizedType) fieldType).getActualTypeArguments();\n        if (typeArgs.length > 0) {\n            List<Class<?>> genericTypes = new ArrayList<>();\n            for (Type typeArg : typeArgs) {\n                if (typeArg instanceof Class<?>) {\n                    genericTypes.add((Class<?>) typeArg);\n                }\n            }\n            return genericTypes.toArray(new Class[0]);\n        }\n    }\n    return null;\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "Field",
            "Import_statements": "import java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.List;\n",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "getGenericTypes(Field field)",
            "Method_name": "getGenericTypes",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###getGenericTypes",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static Class<?>[] getGenericTypes(Field field);",
            "Junit_version": "4",
            "returnType": "Class<?>[]"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\nimport java.lang.reflect.Field;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}",
            "TestRelevantFocal": "[getGenericTypes###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static Class<?>[] getGenericParameterTypes(Method method) {\n    Type[] argTypes = method.getGenericParameterTypes();\n    for (Type argType : argTypes) {\n        if (argType instanceof ParameterizedType) {\n            Type[] typeArgs = ((ParameterizedType) argType).getActualTypeArguments();\n            if (typeArgs.length > 0) {\n                List<Class<?>> genericTypes = new ArrayList<>();\n                for (Type typeArg : typeArgs) {\n                    if (typeArg instanceof Class<?>) {\n                        genericTypes.add((Class<?>) typeArg);\n                    }\n                }\n                return genericTypes.toArray(new Class[0]);\n            }\n        }\n    }\n    return null;\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "Method",
            "Import_statements": "import java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.List;\n",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "getGenericParameterTypes(Method method)",
            "Method_name": "getGenericParameterTypes",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###getGenericParameterTypes",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static Class<?>[] getGenericParameterTypes(Method method);",
            "Junit_version": "4",
            "returnType": "Class<?>[]"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\nimport java.lang.reflect.Method;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}",
            "TestRelevantFocal": "[getGenericParameterTypes###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static Class<?> getFirstGenericType(Field field) {\n    Class<?>[] types = getGenericTypes(field);\n    if (types != null && types.length > 0) {\n        return types[0];\n    }\n    return null;\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "Field",
            "Import_statements": "import java.lang.reflect.Field;\nimport java.lang.reflect.Type;\n",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "getFirstGenericType(Field field)",
            "Method_name": "getFirstGenericType",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###getFirstGenericType",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static Class<?> getFirstGenericType(Field field);",
            "Junit_version": "4",
            "returnType": "Class<?>"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\nimport java.lang.reflect.Field;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}",
            "TestRelevantFocal": "[getFirstGenericType###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static Class<?> getFirstGenericParameterType(Method method) {\n    Class<?>[] types = getGenericParameterTypes(method);\n    if (types != null && types.length > 0) {\n        return types[0];\n    }\n    return null;\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "Method",
            "Import_statements": "import java.lang.reflect.Method;\nimport java.lang.reflect.Type;\n",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "getFirstGenericParameterType(Method method)",
            "Method_name": "getFirstGenericParameterType",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###getFirstGenericParameterType",
            "Parameter_num": "1",
            "contextMethod": "public static boolean classPresent(String className) {\n    ClassLoader thisClassLoader = Reflections.class.getClassLoader();\n    try {\n        Class.forName(className, false, thisClassLoader);\n        return true;\n    } catch (ClassNotFoundException e) {\n        return false;\n    }\n}",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static Class<?> getFirstGenericParameterType(Method method);",
            "Junit_version": "4",
            "returnType": "Class<?>"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\nimport java.lang.reflect.Method;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test06",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}",
            "TestRelevantFocal": "[getFirstGenericParameterType###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException {\n    if (clazz == Object.class) {\n        return null;\n    }\n    try {\n        Field field = clazz.getDeclaredField(fieldName);\n        return field;\n    } catch (NoSuchFieldException e) {\n        return getField(clazz.getSuperclass(), fieldName);\n    }\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "Class<?>,String",
            "Import_statements": "import java.lang.reflect.Field;\n",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "getField(Class<?> clazz, String fieldName)",
            "Method_name": "getField",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###getField",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "\n   * Recursively find the field by name up to the top of class hierarchy.\n   * \n   * @param clazz the class object\n   * @param fieldName declared field name of specified class\n   * @return the field object\n   ",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;",
            "Junit_version": "4",
            "returnType": "Field"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\nimport java.lang.reflect.Field;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test13",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}",
            "TestRelevantFocal": "[getField###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass) {\n    if (method != null) {\n        return method.isAnnotationPresent(annotationClass);\n    }\n    return false;\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "Method,Class<? extends Annotation>",
            "Import_statements": "import java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\n",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "hasAnnotation(Method method, Class<? extends Annotation> annotationClass)",
            "Method_name": "hasAnnotation",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###hasAnnotation",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test10",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[hasAnnotation###2, hasAnnotation###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static <T extends Annotation> T getAnnotation(Method method, Field field, Class<T> annotationClass) {\n    T annot = null;\n    if (field != null) {\n        annot = field.getAnnotation(annotationClass);\n    }\n    if (annot == null && method != null) {\n        annot = method.getAnnotation(annotationClass);\n    }\n    return annot;\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "4",
            "Filed": "",
            "Parameter_type": "Method,Field,Class<T>",
            "Import_statements": "import java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "getAnnotation(Method method, Field field, Class<T> annotationClass)",
            "Method_name": "getAnnotation",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###getAnnotation",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static T getAnnotation(Method method, Field field, Class<T> annotationClass);",
            "Junit_version": "4",
            "returnType": "T"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test11",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}",
            "TestRelevantFocal": "[getAnnotation###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass) {\n    return hasAnnotation(field, annotationClass) || hasAnnotation(method, annotationClass);\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Method,Field,Class<? extends Annotation>",
            "Import_statements": "import java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n",
            "public_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "public_field": "",
            "Method_statement": "hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass)",
            "Method_name": "hasAnnotation",
            "Class_declaration": "public  final class Reflections {\n",
            "constructors": "",
            "all_method_signature": "public static boolean classPresent(String className);\npublic static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException;\npublic static boolean hasAnnotation(Field field, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass);\npublic static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);\npublic static T getAnnotation(Method method, Field field, Class<T> annotationClass);\npublic static Class<?> getFirstGenericParameterType(Method method);\npublic static Class<?> getSecondGenericParameterType(Method method);\npublic static Class<?>[] getGenericParameterTypes(Method method);\npublic static Class<?> getFirstGenericType(Field field);\npublic static Class<?> getSecondGenericType(Field field);\npublic static Class<?>[] getGenericTypes(Field field);",
            "Class_name": "Reflections",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/Reflections.java###hasAnnotation",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.annotation.Annotation;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.lang.reflect.ParameterizedType;\n\nimport java.lang.reflect.Type;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static boolean hasAnnotation(Method method, Field field, Class<? extends Annotation> annotationClass);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[Reflections_ESTest.java###test00+++classPresent###1, Reflections_ESTest.java###test00+++assertFalse###1, Reflections_ESTest.java###test01+++verifyException###2, Reflections_ESTest.java###test01+++getSecondGenericType###1, Reflections_ESTest.java###test01+++fail###1, Reflections_ESTest.java###test02+++verifyException###2, Reflections_ESTest.java###test02+++getSecondGenericParameterType###1, Reflections_ESTest.java###test02+++fail###1, Reflections_ESTest.java###test03+++verifyException###2, Reflections_ESTest.java###test03+++getGenericTypes###1, Reflections_ESTest.java###test03+++fail###1, Reflections_ESTest.java###test04+++verifyException###2, Reflections_ESTest.java###test04+++getGenericParameterTypes###1, Reflections_ESTest.java###test04+++fail###1, Reflections_ESTest.java###test05+++verifyException###2, Reflections_ESTest.java###test05+++getFirstGenericType###1, Reflections_ESTest.java###test05+++fail###1, Reflections_ESTest.java###test06+++verifyException###2, Reflections_ESTest.java###test06+++getFirstGenericParameterType###1, Reflections_ESTest.java###test06+++fail###1, Reflections_ESTest.java###test07+++verifyException###2, Reflections_ESTest.java###test07+++getField###2, Reflections_ESTest.java###test07+++fail###1, Reflections_ESTest.java###test08+++classPresent###1, Reflections_ESTest.java###test08+++fail###1, Reflections_ESTest.java###test09+++hasAnnotation###2, Reflections_ESTest.java###test09+++assertFalse###1, Reflections_ESTest.java###test10+++hasAnnotation###2, Reflections_ESTest.java###test10+++assertFalse###1, Reflections_ESTest.java###test11+++getAnnotation###3, Reflections_ESTest.java###test11+++assertNull###1, Reflections_ESTest.java###test12+++hasAnnotation###3, Reflections_ESTest.java###test12+++assertFalse###1, Reflections_ESTest.java###test13+++getField###2, Reflections_ESTest.java###test13+++assertNull###1, Reflections_ESTest.java###test14+++classPresent###1, Reflections_ESTest.java###test14+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:11:21 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Reflections_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.Reflections\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Reflections_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.Reflections\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Reflections_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.Reflections\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java###test12",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"|B7\");\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getSecondGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericTypes((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getGenericParameterTypes((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericType((Field) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.getFirstGenericParameterType((Method) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    // Undeclared exception!\n    try {\n        Reflections.getField(class0, \" A6)j>Vi@=Y\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.Reflections\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        Reflections.classPresent((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Annotation annotation0 = Reflections.getAnnotation((Method) null, (Field) null, class0);\n    assertNull(annotation0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Reflections> class0 = Reflections.class;\n    Field field0 = Reflections.getField(class0, \"com.zappos.json.util.Reflections\");\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    boolean boolean0 = Reflections.classPresent(\"com.zappos.json.util.Reflections\");\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Reflections reflections0 = new Reflections();\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    boolean boolean0 = Reflections.hasAnnotation((Method) null, (Field) null, class0);\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[hasAnnotation###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:11:21 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.Reflections;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Reflections_ESTest extends Reflections_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static TypeImpl getMapImpl(Class<?> mapClass) {\n    if (mapClass == Map.class || mapClass == AbstractMap.class) {\n        return new TypeImpl(mapClass, HashMap.class);\n    } else if (mapClass == ConcurrentMap.class) {\n        return new TypeImpl(mapClass, ConcurrentHashMap.class);\n    } else if (SortedMap.class.isAssignableFrom(mapClass)) {\n        return new TypeImpl(mapClass, TreeMap.class);\n    } else if (Modifier.isAbstract(mapClass.getModifiers()) || Modifier.isInterface(mapClass.getModifiers())) {\n        throw new RuntimeException(\"Cannot find appropriate implementation of collection type: \" + mapClass.getName());\n    }\n    return new TypeImpl(mapClass, mapClass);\n}",
            "all_field_declaration": "private Class<?> infClass;\nprivate Class<?> implClass;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "Class<?>",
            "Import_statements": "import java.lang.reflect.Modifier;\nimport java.util.AbstractMap;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n",
            "public_method_signature": "public Class<?> getInfClass();\npublic Class<?> getImplClass();\npublic static TypeImpl getMapImpl(Class<?> mapClass);\npublic static TypeImpl getIterableImpl(Class<?> iterClass);",
            "public_field": "",
            "Method_statement": "getMapImpl(Class<?> mapClass)",
            "Method_name": "getMapImpl",
            "Class_declaration": "public class TypeImpl {\n",
            "constructors": "private TypeImpl(Class<?> infClass, Class<?> implClass) {\n    this.infClass = infClass;\n    this.implClass = implClass;\n}",
            "all_method_signature": "private TypeImpl(Class<?> infClass, Class<?> implClass);\npublic Class<?> getInfClass();\npublic Class<?> getImplClass();\npublic static TypeImpl getMapImpl(Class<?> mapClass);\npublic static TypeImpl getIterableImpl(Class<?> iterClass);",
            "Class_name": "TypeImpl",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/TypeImpl.java###getMapImpl",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Modifier;\n\nimport java.util.AbstractMap;\n\nimport java.util.ArrayList;\n\nimport java.util.Collection;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.SortedMap;\n\nimport java.util.TreeMap;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport java.util.concurrent.ConcurrentMap;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static TypeImpl getMapImpl(Class<?> mapClass);",
            "Junit_version": "4",
            "returnType": "TypeImpl"
        },
        "Test_method": {
            "AllTest2Focal": "[TypeImpl_ESTest.java###test0+++getMapImpl###1, TypeImpl_ESTest.java###test0+++fail###1, TypeImpl_ESTest.java###test1+++verifyException###2, TypeImpl_ESTest.java###test1+++getIterableImpl###1, TypeImpl_ESTest.java###test1+++fail###1, TypeImpl_ESTest.java###test2+++getMapImpl###1, TypeImpl_ESTest.java###test2+++assertNotNull###1, TypeImpl_ESTest.java###test3+++getIterableImpl###1, TypeImpl_ESTest.java###test3+++getInfClass###0, TypeImpl_ESTest.java###test3+++assertFalse###1, TypeImpl_ESTest.java###test3+++isInterface###0, TypeImpl_ESTest.java###test4+++getIterableImpl###1, TypeImpl_ESTest.java###test4+++getImplClass###0, TypeImpl_ESTest.java###test4+++assertEquals###2, TypeImpl_ESTest.java###test4+++toString###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:15:15 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TypeImpl_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.TypeImpl\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TypeImpl_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.TypeImpl\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TypeImpl_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.TypeImpl\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.TypeImpl;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/TypeImpl_ESTest.java###test2",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    // Undeclared exception!\n    try {\n        TypeImpl.getMapImpl((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    // Undeclared exception!\n    try {\n        TypeImpl.getIterableImpl((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"org.evosuite.runtime.Reflection\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getMapImpl(class0);\n    assertNotNull(typeImpl0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getIterableImpl(class0);\n    Class<?> class1 = typeImpl0.getInfClass();\n    assertFalse(class1.isInterface());\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getIterableImpl(class0);\n    Class<?> class1 = typeImpl0.getImplClass();\n    assertEquals(\"class java.lang.Object\", class1.toString());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getMapImpl(class0);\n    assertNotNull(typeImpl0);\n}",
            "TestRelevantFocal": "[getMapImpl###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:15:15 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.TypeImpl;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TypeImpl_ESTest extends TypeImpl_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static TypeImpl getIterableImpl(Class<?> iterClass) {\n    if (iterClass == List.class || iterClass == Collection.class || iterClass == Iterable.class) {\n        return new TypeImpl(iterClass, ArrayList.class);\n    } else if (Modifier.isAbstract(iterClass.getModifiers()) || Modifier.isInterface(iterClass.getModifiers())) {\n        throw new RuntimeException(\"Cannot find appropriate implementation of collection type: \" + iterClass.getName());\n    }\n    return new TypeImpl(iterClass, iterClass);\n}",
            "all_field_declaration": "private Class<?> infClass;\nprivate Class<?> implClass;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "Class<?>",
            "Import_statements": "import java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n",
            "public_method_signature": "public Class<?> getInfClass();\npublic Class<?> getImplClass();\npublic static TypeImpl getMapImpl(Class<?> mapClass);\npublic static TypeImpl getIterableImpl(Class<?> iterClass);",
            "public_field": "",
            "Method_statement": "getIterableImpl(Class<?> iterClass)",
            "Method_name": "getIterableImpl",
            "Class_declaration": "public class TypeImpl {\n",
            "constructors": "private TypeImpl(Class<?> infClass, Class<?> implClass) {\n    this.infClass = infClass;\n    this.implClass = implClass;\n}",
            "all_method_signature": "private TypeImpl(Class<?> infClass, Class<?> implClass);\npublic Class<?> getInfClass();\npublic Class<?> getImplClass();\npublic static TypeImpl getMapImpl(Class<?> mapClass);\npublic static TypeImpl getIterableImpl(Class<?> iterClass);",
            "Class_name": "TypeImpl",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/TypeImpl.java###getIterableImpl",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Modifier;\n\nimport java.util.AbstractMap;\n\nimport java.util.ArrayList;\n\nimport java.util.Collection;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.SortedMap;\n\nimport java.util.TreeMap;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport java.util.concurrent.ConcurrentMap;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public static TypeImpl getIterableImpl(Class<?> iterClass);",
            "Junit_version": "4",
            "returnType": "TypeImpl"
        },
        "Test_method": {
            "AllTest2Focal": "[TypeImpl_ESTest.java###test0+++getMapImpl###1, TypeImpl_ESTest.java###test0+++fail###1, TypeImpl_ESTest.java###test1+++verifyException###2, TypeImpl_ESTest.java###test1+++getIterableImpl###1, TypeImpl_ESTest.java###test1+++fail###1, TypeImpl_ESTest.java###test2+++getMapImpl###1, TypeImpl_ESTest.java###test2+++assertNotNull###1, TypeImpl_ESTest.java###test3+++getIterableImpl###1, TypeImpl_ESTest.java###test3+++getInfClass###0, TypeImpl_ESTest.java###test3+++assertFalse###1, TypeImpl_ESTest.java###test3+++isInterface###0, TypeImpl_ESTest.java###test4+++getIterableImpl###1, TypeImpl_ESTest.java###test4+++getImplClass###0, TypeImpl_ESTest.java###test4+++assertEquals###2, TypeImpl_ESTest.java###test4+++toString###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:15:15 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TypeImpl_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.TypeImpl\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TypeImpl_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.TypeImpl\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TypeImpl_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.TypeImpl\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.TypeImpl;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/TypeImpl_ESTest.java###test3",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    // Undeclared exception!\n    try {\n        TypeImpl.getMapImpl((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    // Undeclared exception!\n    try {\n        TypeImpl.getIterableImpl((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"org.evosuite.runtime.Reflection\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getMapImpl(class0);\n    assertNotNull(typeImpl0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getIterableImpl(class0);\n    Class<?> class1 = typeImpl0.getInfClass();\n    assertFalse(class1.isInterface());\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getIterableImpl(class0);\n    Class<?> class1 = typeImpl0.getImplClass();\n    assertEquals(\"class java.lang.Object\", class1.toString());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getIterableImpl(class0);\n    Class<?> class1 = typeImpl0.getInfClass();\n    assertFalse(class1.isInterface());\n}",
            "TestRelevantFocal": "[getIterableImpl###1, getInfClass###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:15:15 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.TypeImpl;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TypeImpl_ESTest extends TypeImpl_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Class<?> getInfClass() {\n    return infClass;\n}",
            "all_field_declaration": "private Class<?> infClass;\nprivate Class<?> implClass;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private Class<?> infClass;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Class<?> getInfClass();\npublic Class<?> getImplClass();\npublic static TypeImpl getMapImpl(Class<?> mapClass);\npublic static TypeImpl getIterableImpl(Class<?> iterClass);",
            "public_field": "",
            "Method_statement": "getInfClass()",
            "Method_name": "getInfClass",
            "Class_declaration": "public class TypeImpl {\n",
            "constructors": "private TypeImpl(Class<?> infClass, Class<?> implClass) {\n    this.infClass = infClass;\n    this.implClass = implClass;\n}",
            "all_method_signature": "private TypeImpl(Class<?> infClass, Class<?> implClass);\npublic Class<?> getInfClass();\npublic Class<?> getImplClass();\npublic static TypeImpl getMapImpl(Class<?> mapClass);\npublic static TypeImpl getIterableImpl(Class<?> iterClass);",
            "Class_name": "TypeImpl",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/util/TypeImpl.java###getInfClass",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Modifier;\n\nimport java.util.AbstractMap;\n\nimport java.util.ArrayList;\n\nimport java.util.Collection;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.SortedMap;\n\nimport java.util.TreeMap;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport java.util.concurrent.ConcurrentMap;\n",
            "comment": "",
            "packageName": "com.zappos.json.util",
            "method_signature": "public Class<?> getInfClass();",
            "Junit_version": "4",
            "returnType": "Class<?>"
        },
        "Test_method": {
            "AllTest2Focal": "[TypeImpl_ESTest.java###test0+++getMapImpl###1, TypeImpl_ESTest.java###test0+++fail###1, TypeImpl_ESTest.java###test1+++verifyException###2, TypeImpl_ESTest.java###test1+++getIterableImpl###1, TypeImpl_ESTest.java###test1+++fail###1, TypeImpl_ESTest.java###test2+++getMapImpl###1, TypeImpl_ESTest.java###test2+++assertNotNull###1, TypeImpl_ESTest.java###test3+++getIterableImpl###1, TypeImpl_ESTest.java###test3+++getInfClass###0, TypeImpl_ESTest.java###test3+++assertFalse###1, TypeImpl_ESTest.java###test3+++isInterface###0, TypeImpl_ESTest.java###test4+++getIterableImpl###1, TypeImpl_ESTest.java###test4+++getImplClass###0, TypeImpl_ESTest.java###test4+++assertEquals###2, TypeImpl_ESTest.java###test4+++toString###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:15:15 GMT 2024\n */\n\npackage com.zappos.json.util;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TypeImpl_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.util.TypeImpl\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TypeImpl_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.util.TypeImpl\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TypeImpl_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.util.TypeImpl\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.util.TypeImpl;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/util/TypeImpl_ESTest.java###test3",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    // Undeclared exception!\n    try {\n        TypeImpl.getMapImpl((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    // Undeclared exception!\n    try {\n        TypeImpl.getIterableImpl((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"org.evosuite.runtime.Reflection\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getMapImpl(class0);\n    assertNotNull(typeImpl0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getIterableImpl(class0);\n    Class<?> class1 = typeImpl0.getInfClass();\n    assertFalse(class1.isInterface());\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getIterableImpl(class0);\n    Class<?> class1 = typeImpl0.getImplClass();\n    assertEquals(\"class java.lang.Object\", class1.toString());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeImpl typeImpl0 = TypeImpl.getIterableImpl(class0);\n    Class<?> class1 = typeImpl0.getInfClass();\n    assertFalse(class1.isInterface());\n}",
            "TestRelevantFocal": "[getIterableImpl###1, getInfClass###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:15:15 GMT 2024\n */\npackage com.zappos.json.util;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.util.TypeImpl;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TypeImpl_ESTest extends TypeImpl_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic void setTarget(T target) {\n    this.target = target;\n}",
            "all_field_declaration": "private Class<?> componentType;\nprivate T target;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private T target;",
            "Parameter_type": "T",
            "Import_statements": "",
            "public_method_signature": "public void setTarget(T target);\npublic T getTarget();\npublic Class<?> getComponentType();\npublic void setComponentType(Class<?> componentType);",
            "public_field": "",
            "Method_statement": "setTarget(T target)",
            "Method_name": "setTarget",
            "Class_declaration": "public class ArrayTypeWrapper {\n",
            "constructors": "",
            "all_method_signature": "public void setTarget(T target);\npublic T getTarget();\npublic Class<?> getComponentType();\npublic void setComponentType(Class<?> componentType);",
            "Class_name": "ArrayTypeWrapper",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/wrapper/ArrayTypeWrapper.java###setTarget",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "",
            "comment": "",
            "packageName": "com.zappos.json.wrapper",
            "method_signature": "public void setTarget(T target);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[ArrayTypeWrapper_ESTest.java###test0+++setTarget###1, ArrayTypeWrapper_ESTest.java###test0+++getTarget###0, ArrayTypeWrapper_ESTest.java###test0+++assertFalse###1, ArrayTypeWrapper_ESTest.java###test0+++isInterface###0, ArrayTypeWrapper_ESTest.java###test1+++setComponentType###1, ArrayTypeWrapper_ESTest.java###test1+++getComponentType###0, ArrayTypeWrapper_ESTest.java###test1+++assertFalse###1, ArrayTypeWrapper_ESTest.java###test1+++isArray###0, ArrayTypeWrapper_ESTest.java###test2+++getTarget###0, ArrayTypeWrapper_ESTest.java###test2+++assertNull###1, ArrayTypeWrapper_ESTest.java###test3+++getComponentType###0, ArrayTypeWrapper_ESTest.java###test3+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:16:56 GMT 2024\n */\n\npackage com.zappos.json.wrapper;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ArrayTypeWrapper_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.wrapper.ArrayTypeWrapper\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ArrayTypeWrapper_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.wrapper.TypeWrapper\",\n      \"com.zappos.json.wrapper.ArrayTypeWrapper\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ArrayTypeWrapper_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.wrapper.ArrayTypeWrapper\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.wrapper.ArrayTypeWrapper;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/wrapper/ArrayTypeWrapper_ESTest.java###test0",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setTarget(class0);\n    Class class1 = (Class) arrayTypeWrapper0.getTarget();\n    assertFalse(class1.isInterface());\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setComponentType(class0);\n    Class<?> class1 = arrayTypeWrapper0.getComponentType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Object object0 = arrayTypeWrapper0.getTarget();\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<?> class0 = arrayTypeWrapper0.getComponentType();\n    assertNull(class0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setTarget(class0);\n    Class class1 = (Class) arrayTypeWrapper0.getTarget();\n    assertFalse(class1.isInterface());\n}",
            "TestRelevantFocal": "[setTarget###1, getTarget###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:16:56 GMT 2024\n */\npackage com.zappos.json.wrapper;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.zappos.json.wrapper.ArrayTypeWrapper;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ArrayTypeWrapper_ESTest extends ArrayTypeWrapper_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic T getTarget() {\n    return target;\n}",
            "all_field_declaration": "private Class<?> componentType;\nprivate T target;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private T target;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public void setTarget(T target);\npublic T getTarget();\npublic Class<?> getComponentType();\npublic void setComponentType(Class<?> componentType);",
            "public_field": "",
            "Method_statement": "getTarget()",
            "Method_name": "getTarget",
            "Class_declaration": "public class ArrayTypeWrapper {\n",
            "constructors": "",
            "all_method_signature": "public void setTarget(T target);\npublic T getTarget();\npublic Class<?> getComponentType();\npublic void setComponentType(Class<?> componentType);",
            "Class_name": "ArrayTypeWrapper",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/wrapper/ArrayTypeWrapper.java###getTarget",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "",
            "comment": "",
            "packageName": "com.zappos.json.wrapper",
            "method_signature": "public T getTarget();",
            "Junit_version": "4",
            "returnType": "T"
        },
        "Test_method": {
            "AllTest2Focal": "[ArrayTypeWrapper_ESTest.java###test0+++setTarget###1, ArrayTypeWrapper_ESTest.java###test0+++getTarget###0, ArrayTypeWrapper_ESTest.java###test0+++assertFalse###1, ArrayTypeWrapper_ESTest.java###test0+++isInterface###0, ArrayTypeWrapper_ESTest.java###test1+++setComponentType###1, ArrayTypeWrapper_ESTest.java###test1+++getComponentType###0, ArrayTypeWrapper_ESTest.java###test1+++assertFalse###1, ArrayTypeWrapper_ESTest.java###test1+++isArray###0, ArrayTypeWrapper_ESTest.java###test2+++getTarget###0, ArrayTypeWrapper_ESTest.java###test2+++assertNull###1, ArrayTypeWrapper_ESTest.java###test3+++getComponentType###0, ArrayTypeWrapper_ESTest.java###test3+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:16:56 GMT 2024\n */\n\npackage com.zappos.json.wrapper;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ArrayTypeWrapper_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.wrapper.ArrayTypeWrapper\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ArrayTypeWrapper_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.wrapper.TypeWrapper\",\n      \"com.zappos.json.wrapper.ArrayTypeWrapper\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ArrayTypeWrapper_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.wrapper.ArrayTypeWrapper\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.wrapper.ArrayTypeWrapper;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/wrapper/ArrayTypeWrapper_ESTest.java###test0",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setTarget(class0);\n    Class class1 = (Class) arrayTypeWrapper0.getTarget();\n    assertFalse(class1.isInterface());\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setComponentType(class0);\n    Class<?> class1 = arrayTypeWrapper0.getComponentType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Object object0 = arrayTypeWrapper0.getTarget();\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<?> class0 = arrayTypeWrapper0.getComponentType();\n    assertNull(class0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setTarget(class0);\n    Class class1 = (Class) arrayTypeWrapper0.getTarget();\n    assertFalse(class1.isInterface());\n}",
            "TestRelevantFocal": "[setTarget###1, getTarget###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:16:56 GMT 2024\n */\npackage com.zappos.json.wrapper;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.zappos.json.wrapper.ArrayTypeWrapper;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ArrayTypeWrapper_ESTest extends ArrayTypeWrapper_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setComponentType(Class<?> componentType) {\n    this.componentType = componentType;\n}",
            "all_field_declaration": "private Class<?> componentType;\nprivate T target;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private Class<?> componentType;",
            "Parameter_type": "Class<?>",
            "Import_statements": "",
            "public_method_signature": "public void setTarget(T target);\npublic T getTarget();\npublic Class<?> getComponentType();\npublic void setComponentType(Class<?> componentType);",
            "public_field": "",
            "Method_statement": "setComponentType(Class<?> componentType)",
            "Method_name": "setComponentType",
            "Class_declaration": "public class ArrayTypeWrapper {\n",
            "constructors": "",
            "all_method_signature": "public void setTarget(T target);\npublic T getTarget();\npublic Class<?> getComponentType();\npublic void setComponentType(Class<?> componentType);",
            "Class_name": "ArrayTypeWrapper",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/wrapper/ArrayTypeWrapper.java###setComponentType",
            "Parameter_num": "1",
            "contextMethod": "@Override\npublic void setTarget(T target) {\n    this.target = target;\n}\n@Override\npublic T getTarget() {\n    return target;\n}",
            "all_Import_statements": "",
            "comment": "",
            "packageName": "com.zappos.json.wrapper",
            "method_signature": "public void setComponentType(Class<?> componentType);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[ArrayTypeWrapper_ESTest.java###test0+++setTarget###1, ArrayTypeWrapper_ESTest.java###test0+++getTarget###0, ArrayTypeWrapper_ESTest.java###test0+++assertFalse###1, ArrayTypeWrapper_ESTest.java###test0+++isInterface###0, ArrayTypeWrapper_ESTest.java###test1+++setComponentType###1, ArrayTypeWrapper_ESTest.java###test1+++getComponentType###0, ArrayTypeWrapper_ESTest.java###test1+++assertFalse###1, ArrayTypeWrapper_ESTest.java###test1+++isArray###0, ArrayTypeWrapper_ESTest.java###test2+++getTarget###0, ArrayTypeWrapper_ESTest.java###test2+++assertNull###1, ArrayTypeWrapper_ESTest.java###test3+++getComponentType###0, ArrayTypeWrapper_ESTest.java###test3+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:16:56 GMT 2024\n */\n\npackage com.zappos.json.wrapper;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ArrayTypeWrapper_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.wrapper.ArrayTypeWrapper\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ArrayTypeWrapper_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.wrapper.TypeWrapper\",\n      \"com.zappos.json.wrapper.ArrayTypeWrapper\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ArrayTypeWrapper_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.wrapper.ArrayTypeWrapper\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.wrapper.ArrayTypeWrapper;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/wrapper/ArrayTypeWrapper_ESTest.java###test1",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setTarget(class0);\n    Class class1 = (Class) arrayTypeWrapper0.getTarget();\n    assertFalse(class1.isInterface());\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setComponentType(class0);\n    Class<?> class1 = arrayTypeWrapper0.getComponentType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Object object0 = arrayTypeWrapper0.getTarget();\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<?> class0 = arrayTypeWrapper0.getComponentType();\n    assertNull(class0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setComponentType(class0);\n    Class<?> class1 = arrayTypeWrapper0.getComponentType();\n    assertFalse(class1.isArray());\n}",
            "TestRelevantFocal": "[setComponentType###1, getComponentType###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:16:56 GMT 2024\n */\npackage com.zappos.json.wrapper;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.zappos.json.wrapper.ArrayTypeWrapper;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ArrayTypeWrapper_ESTest extends ArrayTypeWrapper_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Class<?> getComponentType() {\n    return componentType;\n}",
            "all_field_declaration": "private Class<?> componentType;\nprivate T target;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private Class<?> componentType;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public void setTarget(T target);\npublic T getTarget();\npublic Class<?> getComponentType();\npublic void setComponentType(Class<?> componentType);",
            "public_field": "",
            "Method_statement": "getComponentType()",
            "Method_name": "getComponentType",
            "Class_declaration": "public class ArrayTypeWrapper {\n",
            "constructors": "",
            "all_method_signature": "public void setTarget(T target);\npublic T getTarget();\npublic Class<?> getComponentType();\npublic void setComponentType(Class<?> componentType);",
            "Class_name": "ArrayTypeWrapper",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/wrapper/ArrayTypeWrapper.java###getComponentType",
            "Parameter_num": "0",
            "contextMethod": "@Override\npublic void setTarget(T target) {\n    this.target = target;\n}\n@Override\npublic T getTarget() {\n    return target;\n}",
            "all_Import_statements": "",
            "comment": "",
            "packageName": "com.zappos.json.wrapper",
            "method_signature": "public Class<?> getComponentType();",
            "Junit_version": "4",
            "returnType": "Class<?>"
        },
        "Test_method": {
            "AllTest2Focal": "[ArrayTypeWrapper_ESTest.java###test0+++setTarget###1, ArrayTypeWrapper_ESTest.java###test0+++getTarget###0, ArrayTypeWrapper_ESTest.java###test0+++assertFalse###1, ArrayTypeWrapper_ESTest.java###test0+++isInterface###0, ArrayTypeWrapper_ESTest.java###test1+++setComponentType###1, ArrayTypeWrapper_ESTest.java###test1+++getComponentType###0, ArrayTypeWrapper_ESTest.java###test1+++assertFalse###1, ArrayTypeWrapper_ESTest.java###test1+++isArray###0, ArrayTypeWrapper_ESTest.java###test2+++getTarget###0, ArrayTypeWrapper_ESTest.java###test2+++assertNull###1, ArrayTypeWrapper_ESTest.java###test3+++getComponentType###0, ArrayTypeWrapper_ESTest.java###test3+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:16:56 GMT 2024\n */\n\npackage com.zappos.json.wrapper;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ArrayTypeWrapper_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.wrapper.ArrayTypeWrapper\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ArrayTypeWrapper_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.wrapper.TypeWrapper\",\n      \"com.zappos.json.wrapper.ArrayTypeWrapper\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ArrayTypeWrapper_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.wrapper.ArrayTypeWrapper\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.wrapper.ArrayTypeWrapper;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/wrapper/ArrayTypeWrapper_ESTest.java###test1",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setTarget(class0);\n    Class class1 = (Class) arrayTypeWrapper0.getTarget();\n    assertFalse(class1.isInterface());\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setComponentType(class0);\n    Class<?> class1 = arrayTypeWrapper0.getComponentType();\n    assertFalse(class1.isArray());\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Object object0 = arrayTypeWrapper0.getTarget();\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<?> class0 = arrayTypeWrapper0.getComponentType();\n    assertNull(class0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();\n    Class<Object> class0 = Object.class;\n    arrayTypeWrapper0.setComponentType(class0);\n    Class<?> class1 = arrayTypeWrapper0.getComponentType();\n    assertFalse(class1.isArray());\n}",
            "TestRelevantFocal": "[setComponentType###1, getComponentType###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:16:56 GMT 2024\n */\npackage com.zappos.json.wrapper;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.zappos.json.wrapper.ArrayTypeWrapper;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ArrayTypeWrapper_ESTest extends ArrayTypeWrapper_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "protected synchronized void deregisterAll() {\n    JSON_WRITER_INVOKERS.clear();\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonWriterInvoker> JSON_WRITER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private final Map<Class<?>, JsonWriterInvoker> JSON_WRITER_INVOKERS = new ConcurrentHashMap<>();",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "deregisterAll()",
            "Method_name": "deregisterAll",
            "Class_declaration": "public class JsonWriterCodeGenerator {\n",
            "constructors": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector) {\n    this.zapposJson = zapposJson;\n    this.beanIntrospector = beanIntrospector;\n}",
            "all_method_signature": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonWriterInvoker getWriter(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonWriterInvoker registerWriter(Class<?> clazz) throws Exception;\nprivate void generateJsonWriterBody(Class<?> clazz, StringBuilder methodBody, Map<String, String> fieldVars) throws Exception;\nprivate void generateWriterCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> attrType, String varName);\nprivate void generateIterableCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateListCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateMapCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateArrayCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> componentType, String varName);",
            "Class_name": "JsonWriterCodeGenerator",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriterCodeGenerator.java###deregisterAll",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtField;\n\nimport javassist.CtNewMethod;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "protected synchronized void deregisterAll();",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriterCodeGenerator_ESTest.java###test0+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test0+++deregisterAll###0, JsonWriterCodeGenerator_ESTest.java###test1+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test1+++deregister###1, JsonWriterCodeGenerator_ESTest.java###test2+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test2+++getWriter###1, JsonWriterCodeGenerator_ESTest.java###test2+++assertNull###1, JsonWriterCodeGenerator_ESTest.java###test3+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test3+++verifyException###2, JsonWriterCodeGenerator_ESTest.java###test3+++registerWriter###1, JsonWriterCodeGenerator_ESTest.java###test3+++fail###1, JsonWriterCodeGenerator_ESTest.java###test4+++getInstance###1, JsonWriterCodeGenerator_ESTest.java###test4+++verifyException###2, JsonWriterCodeGenerator_ESTest.java###test4+++registerWriter###1, JsonWriterCodeGenerator_ESTest.java###test4+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:02:58 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonWriterCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriterCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriterCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriterInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriterCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonWriterCodeGenerator;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriterCodeGenerator_ESTest.java###test0",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonWriterCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<ZapposJson> class0 = ZapposJson.class;\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonWriterCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<ZapposJson> class0 = ZapposJson.class;\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    JsonWriterInvoker jsonWriterInvoker0 = jsonWriterCodeGenerator0.getWriter(class0);\n    assertNull(jsonWriterInvoker0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    try {\n        jsonWriterCodeGenerator0.registerWriter((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"niLm\");\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<ZapposJson> class0 = ZapposJson.class;\n    // Undeclared exception!\n    try {\n        jsonWriterCodeGenerator0.registerWriter(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonWriterCodeGenerator0.deregisterAll();\n}",
            "TestRelevantFocal": "[deregisterAll###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:02:58 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonWriterCodeGenerator;\nimport com.zappos.json.JsonWriterInvoker;\nimport com.zappos.json.ZapposJson;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriterCodeGenerator_ESTest extends JsonWriterCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "protected void deregister(Class<?> clazz) {\n    synchronized (clazz) {\n        JSON_WRITER_INVOKERS.remove(clazz);\n    }\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonWriterInvoker> JSON_WRITER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private final Map<Class<?>, JsonWriterInvoker> JSON_WRITER_INVOKERS = new ConcurrentHashMap<>();",
            "Parameter_type": "Class<?>",
            "Import_statements": "",
            "public_method_signature": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "deregister(Class<?> clazz)",
            "Method_name": "deregister",
            "Class_declaration": "public class JsonWriterCodeGenerator {\n",
            "constructors": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector) {\n    this.zapposJson = zapposJson;\n    this.beanIntrospector = beanIntrospector;\n}",
            "all_method_signature": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonWriterInvoker getWriter(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonWriterInvoker registerWriter(Class<?> clazz) throws Exception;\nprivate void generateJsonWriterBody(Class<?> clazz, StringBuilder methodBody, Map<String, String> fieldVars) throws Exception;\nprivate void generateWriterCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> attrType, String varName);\nprivate void generateIterableCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateListCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateMapCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateArrayCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> componentType, String varName);",
            "Class_name": "JsonWriterCodeGenerator",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriterCodeGenerator.java###deregister",
            "Parameter_num": "1",
            "contextMethod": "protected JsonWriterInvoker getWriter(Class<?> clazz) {\n    return JSON_WRITER_INVOKERS.get(clazz);\n}",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtField;\n\nimport javassist.CtNewMethod;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "protected void deregister(Class<?> clazz);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriterCodeGenerator_ESTest.java###test0+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test0+++deregisterAll###0, JsonWriterCodeGenerator_ESTest.java###test1+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test1+++deregister###1, JsonWriterCodeGenerator_ESTest.java###test2+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test2+++getWriter###1, JsonWriterCodeGenerator_ESTest.java###test2+++assertNull###1, JsonWriterCodeGenerator_ESTest.java###test3+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test3+++verifyException###2, JsonWriterCodeGenerator_ESTest.java###test3+++registerWriter###1, JsonWriterCodeGenerator_ESTest.java###test3+++fail###1, JsonWriterCodeGenerator_ESTest.java###test4+++getInstance###1, JsonWriterCodeGenerator_ESTest.java###test4+++verifyException###2, JsonWriterCodeGenerator_ESTest.java###test4+++registerWriter###1, JsonWriterCodeGenerator_ESTest.java###test4+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:02:58 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonWriterCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriterCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriterCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriterInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriterCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonWriterCodeGenerator;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriterCodeGenerator_ESTest.java###test1",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonWriterCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<ZapposJson> class0 = ZapposJson.class;\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonWriterCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<ZapposJson> class0 = ZapposJson.class;\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    JsonWriterInvoker jsonWriterInvoker0 = jsonWriterCodeGenerator0.getWriter(class0);\n    assertNull(jsonWriterInvoker0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    try {\n        jsonWriterCodeGenerator0.registerWriter((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"niLm\");\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<ZapposJson> class0 = ZapposJson.class;\n    // Undeclared exception!\n    try {\n        jsonWriterCodeGenerator0.registerWriter(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<ZapposJson> class0 = ZapposJson.class;\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonWriterCodeGenerator0.deregister(class0);\n}",
            "TestRelevantFocal": "[deregister###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:02:58 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonWriterCodeGenerator;\nimport com.zappos.json.JsonWriterInvoker;\nimport com.zappos.json.ZapposJson;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriterCodeGenerator_ESTest extends JsonWriterCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "protected JsonWriterInvoker getWriter(Class<?> clazz) {\n    return JSON_WRITER_INVOKERS.get(clazz);\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonWriterInvoker> JSON_WRITER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private final Map<Class<?>, JsonWriterInvoker> JSON_WRITER_INVOKERS = new ConcurrentHashMap<>();",
            "Parameter_type": "Class<?>",
            "Import_statements": "",
            "public_method_signature": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "getWriter(Class<?> clazz)",
            "Method_name": "getWriter",
            "Class_declaration": "public class JsonWriterCodeGenerator {\n",
            "constructors": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector) {\n    this.zapposJson = zapposJson;\n    this.beanIntrospector = beanIntrospector;\n}",
            "all_method_signature": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonWriterInvoker getWriter(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonWriterInvoker registerWriter(Class<?> clazz) throws Exception;\nprivate void generateJsonWriterBody(Class<?> clazz, StringBuilder methodBody, Map<String, String> fieldVars) throws Exception;\nprivate void generateWriterCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> attrType, String varName);\nprivate void generateIterableCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateListCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateMapCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateArrayCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> componentType, String varName);",
            "Class_name": "JsonWriterCodeGenerator",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriterCodeGenerator.java###getWriter",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtField;\n\nimport javassist.CtNewMethod;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "protected JsonWriterInvoker getWriter(Class<?> clazz);",
            "Junit_version": "4",
            "returnType": "JsonWriterInvoker"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriterCodeGenerator_ESTest.java###test0+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test0+++deregisterAll###0, JsonWriterCodeGenerator_ESTest.java###test1+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test1+++deregister###1, JsonWriterCodeGenerator_ESTest.java###test2+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test2+++getWriter###1, JsonWriterCodeGenerator_ESTest.java###test2+++assertNull###1, JsonWriterCodeGenerator_ESTest.java###test3+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test3+++verifyException###2, JsonWriterCodeGenerator_ESTest.java###test3+++registerWriter###1, JsonWriterCodeGenerator_ESTest.java###test3+++fail###1, JsonWriterCodeGenerator_ESTest.java###test4+++getInstance###1, JsonWriterCodeGenerator_ESTest.java###test4+++verifyException###2, JsonWriterCodeGenerator_ESTest.java###test4+++registerWriter###1, JsonWriterCodeGenerator_ESTest.java###test4+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:02:58 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonWriterCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriterCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriterCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriterInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriterCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonWriterCodeGenerator;\nimport com.zappos.json.JsonWriterInvoker;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriterCodeGenerator_ESTest.java###test2",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonWriterCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<ZapposJson> class0 = ZapposJson.class;\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonWriterCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<ZapposJson> class0 = ZapposJson.class;\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    JsonWriterInvoker jsonWriterInvoker0 = jsonWriterCodeGenerator0.getWriter(class0);\n    assertNull(jsonWriterInvoker0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    try {\n        jsonWriterCodeGenerator0.registerWriter((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"niLm\");\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<ZapposJson> class0 = ZapposJson.class;\n    // Undeclared exception!\n    try {\n        jsonWriterCodeGenerator0.registerWriter(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<ZapposJson> class0 = ZapposJson.class;\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    JsonWriterInvoker jsonWriterInvoker0 = jsonWriterCodeGenerator0.getWriter(class0);\n    assertNull(jsonWriterInvoker0);\n}",
            "TestRelevantFocal": "[getWriter###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:02:58 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonWriterCodeGenerator;\nimport com.zappos.json.JsonWriterInvoker;\nimport com.zappos.json.ZapposJson;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriterCodeGenerator_ESTest extends JsonWriterCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "protected JsonWriterInvoker registerWriter(Class<?> clazz) throws Exception {\n    synchronized (clazz) {\n        JsonWriterInvoker writerInvoker = JSON_WRITER_INVOKERS.get(clazz);\n        if (writerInvoker != null) {\n            return writerInvoker;\n        }\n        ClassPool classPool = ClassPool.getDefault();\n        classPool.importPackage(\"java.util\");\n        classPool.importPackage(\"java.math\");\n        CtClass jsonCtClass = classPool.get(JsonWriter.class.getName());\n        String randomName = Strings.randomAlphabetic(16);\n        jsonCtClass.setName(\"com.zappos.json.\" + randomName + \"_JSON_Writer\");\n        Map<String, String> fieldVars = new HashMap<>();\n        StringBuilder methodBody = new StringBuilder();\n        methodBody.append(\"public void writeJson (\").append(clazz.getName()).append(\" __o, java.io.Writer writer) throws Exception {\\n\").append(\"if(__o == null) return;\\n\");\n        generateJsonWriterBody(clazz, methodBody, fieldVars);\n        methodBody.append(\"}\");\n        for (Map.Entry<String, String> fieldEntry : fieldVars.entrySet()) {\n            jsonCtClass.addField(CtField.make(\"public static final String \" + fieldEntry.getKey() + \" = \" + fieldEntry.getValue() + \";\", jsonCtClass));\n        }\n        zapposJson.debug(\"\\nWriter code for \\\"@\\\"\\n=========\\n@\\n=========\\n\", clazz, methodBody);\n        jsonCtClass.addMethod(CtNewMethod.make(methodBody.toString(), jsonCtClass));\n        Class<?> jsonClass = jsonCtClass.toClass();\n        Object jsonWriter = jsonClass.getDeclaredConstructor(ZapposJson.class).newInstance(zapposJson);\n        writerInvoker = new JsonWriterInvoker(clazz, jsonWriter);\n        JSON_WRITER_INVOKERS.put(clazz, writerInvoker);\n        return writerInvoker;\n    }\n}",
            "all_field_declaration": "private final Map<Class<?>, JsonWriterInvoker> JSON_WRITER_INVOKERS = new ConcurrentHashMap<>();\nprivate ZapposJson zapposJson;\nprivate JsonBeanIntrospector beanIntrospector;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private final Map<Class<?>, JsonWriterInvoker> JSON_WRITER_INVOKERS = new ConcurrentHashMap<>();private ZapposJson zapposJson;",
            "Parameter_type": "Class<?>",
            "Import_statements": "import java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\nimport com.zappos.json.util.Strings;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport javassist.CtField;\nimport javassist.CtNewMethod;\n",
            "public_method_signature": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);",
            "public_field": "",
            "Method_statement": "registerWriter(Class<?> clazz)",
            "Method_name": "registerWriter",
            "Class_declaration": "public class JsonWriterCodeGenerator {\n",
            "constructors": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector) {\n    this.zapposJson = zapposJson;\n    this.beanIntrospector = beanIntrospector;\n}",
            "all_method_signature": "public JsonWriterCodeGenerator(ZapposJson zapposJson, JsonBeanIntrospector beanIntrospector);\nprotected JsonWriterInvoker getWriter(Class<?> clazz);\nprotected synchronized void deregisterAll();\nprotected void deregister(Class<?> clazz);\nprotected JsonWriterInvoker registerWriter(Class<?> clazz) throws Exception;\nprivate void generateJsonWriterBody(Class<?> clazz, StringBuilder methodBody, Map<String, String> fieldVars) throws Exception;\nprivate void generateWriterCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> attrType, String varName);\nprivate void generateIterableCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateListCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateMapCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> valueType, String varName);\nprivate void generateArrayCode(JsonBeanAttribute beanAttr, StringBuilder methodBody, Class<?> componentType, String varName);",
            "Class_name": "JsonWriterCodeGenerator",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriterCodeGenerator.java###registerWriter",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Method;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n\nimport javassist.ClassPool;\n\nimport javassist.CtClass;\n\nimport javassist.CtField;\n\nimport javassist.CtNewMethod;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "protected JsonWriterInvoker registerWriter(Class<?> clazz) throws Exception;",
            "Junit_version": "4",
            "returnType": "JsonWriterInvoker"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriterCodeGenerator_ESTest.java###test0+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test0+++deregisterAll###0, JsonWriterCodeGenerator_ESTest.java###test1+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test1+++deregister###1, JsonWriterCodeGenerator_ESTest.java###test2+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test2+++getWriter###1, JsonWriterCodeGenerator_ESTest.java###test2+++assertNull###1, JsonWriterCodeGenerator_ESTest.java###test3+++getInstance###0, JsonWriterCodeGenerator_ESTest.java###test3+++verifyException###2, JsonWriterCodeGenerator_ESTest.java###test3+++registerWriter###1, JsonWriterCodeGenerator_ESTest.java###test3+++fail###1, JsonWriterCodeGenerator_ESTest.java###test4+++getInstance###1, JsonWriterCodeGenerator_ESTest.java###test4+++verifyException###2, JsonWriterCodeGenerator_ESTest.java###test4+++registerWriter###1, JsonWriterCodeGenerator_ESTest.java###test4+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:02:58 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonWriterCodeGenerator_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriterCodeGenerator\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriterCodeGenerator_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriterInvoker\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriterCodeGenerator_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonWriterCodeGenerator;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriterCodeGenerator_ESTest.java###test3",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonWriterCodeGenerator0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<ZapposJson> class0 = ZapposJson.class;\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    jsonWriterCodeGenerator0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<ZapposJson> class0 = ZapposJson.class;\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    JsonWriterInvoker jsonWriterInvoker0 = jsonWriterCodeGenerator0.getWriter(class0);\n    assertNull(jsonWriterInvoker0);\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    try {\n        jsonWriterCodeGenerator0.registerWriter((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"niLm\");\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    Class<ZapposJson> class0 = ZapposJson.class;\n    // Undeclared exception!\n    try {\n        jsonWriterCodeGenerator0.registerWriter(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);\n    try {\n        jsonWriterCodeGenerator0.registerWriter((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}",
            "TestRelevantFocal": "[registerWriter###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:02:58 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.JsonWriterCodeGenerator;\nimport com.zappos.json.JsonWriterInvoker;\nimport com.zappos.json.ZapposJson;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriterCodeGenerator_ESTest extends JsonWriterCodeGenerator_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "protected void debug(String pattern, Object... args) {\n    if (debug) {\n        System.out.println(Strings.format(pattern, args));\n    }\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private boolean debug = false;",
            "Parameter_type": "String,Object",
            "Import_statements": "import com.zappos.json.util.Strings;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "debug(String pattern, Object... args)",
            "Method_name": "debug",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###debug",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "protected void debug(String pattern, Object... args);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport java.lang.reflect.Array;\nimport java.time.chrono.HijrahEra;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}",
            "TestRelevantFocal": "[debug###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public String toJson(Object object) {\n    StringWriter writer = new StringWriter();\n    toJson(object, writer);\n    return writer.toString();\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "Object",
            "Import_statements": "import java.io.StringWriter;\nimport java.io.Writer;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "toJson(Object object)",
            "Method_name": "toJson",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###toJson",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public String toJson(Object object);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test30",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}",
            "TestRelevantFocal": "[toJson###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static ZapposJson getInstance() {\n    return ZapposJsonSingleton.INSTANCE.get();\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "getInstance()",
            "Method_name": "getInstance",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###getInstance",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public static ZapposJson getInstance();",
            "Junit_version": "4",
            "returnType": "ZapposJson"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test10",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}",
            "TestRelevantFocal": "[getInstance###0, register###1, register###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T fromJson(Reader reader, Class<T> targetClass) {\n    try {\n        ValueFormatter<?> formatter = VALUE_FORMATTERS.get(targetClass);\n        if (formatter != null) {\n            String s = Strings.fromReader(reader).trim();\n            return (T) formatter.parse(this, s);\n        } else if (targetClass == Boolean.class || targetClass == boolean.class) {\n            String s = Strings.fromReader(reader).trim();\n            return (T) Boolean.valueOf(s);\n        } else if (targetClass == String.class || targetClass == Character.class || targetClass == char.class) {\n            String s = Strings.fromReader(reader).trim();\n            if (s.charAt(0) != '\"' || s.charAt(s.length() - 1) != '\"') {\n                throw new IllegalArgumentException(\"Invalid string: \" + s);\n            }\n            s = JsonUtils.unescape(this, s.subSequence(1, s.length() - 1));\n            if (targetClass == Character.class || targetClass == char.class) {\n                if (s.length() != 1) {\n                    throw new IllegalArgumentException(\"Invalid character: \" + s);\n                }\n                return (T) new Character(s.charAt(0));\n            }\n            return (T) s;\n        } else if (Number.class.isAssignableFrom(targetClass) || targetClass.isPrimitive()) {\n            String s = Strings.fromReader(reader).trim();\n            if (targetClass == Byte.class || targetClass == byte.class) {\n                return (T) Byte.valueOf(s);\n            } else if (targetClass == Short.class || targetClass == short.class) {\n                return (T) Short.valueOf(s);\n            } else if (targetClass == Integer.class || targetClass == int.class) {\n                return (T) Integer.valueOf(s);\n            } else if (targetClass == Long.class || targetClass == long.class) {\n                return (T) Long.valueOf(s);\n            } else if (targetClass == Float.class || targetClass == float.class) {\n                return (T) Float.valueOf(s);\n            } else if (targetClass == Double.class || targetClass == double.class) {\n                return (T) Double.valueOf(s);\n            } else {\n                throw new IllegalArgumentException(targetClass.getName() + \" is an unsupported type.\" + \"You need a custom ValueFormatter for this type.\");\n            }\n        } else if (targetClass.isEnum()) {\n            String s = Strings.fromReader(reader).trim();\n            return (T) Enum.valueOf((Class<? extends Enum>) targetClass, s);\n        } else if (Iterable.class.isAssignableFrom(targetClass) || Map.class.isAssignableFrom(targetClass)) {\n            throw new IllegalArgumentException(targetClass.getName() + \" not support yet\");\n        } else if (targetClass.isArray()) {\n            throw new IllegalArgumentException(\"Array type not support yet\");\n        }\n        JsonReaderInvoker readerInvoker = readerCodeGenerator.getReader(targetClass);\n        if (readerInvoker == null) {\n            readerInvoker = readerCodeGenerator.registerReader(targetClass);\n        }\n        return readerInvoker.readJson(reader, targetClass);\n    } catch (JsonException e) {\n        throw e;\n    } catch (Exception e) {\n        throw new JsonException(e);\n    }\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();private JsonReaderCodeGenerator readerCodeGenerator;",
            "Parameter_type": "Reader,Class<T>",
            "Import_statements": "import java.io.Reader;\nimport java.util.Map;\nimport com.zappos.json.format.ValueFormatter;\nimport com.zappos.json.util.JsonUtils;\nimport com.zappos.json.util.Strings;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "fromJson(Reader reader, Class<T> targetClass)",
            "Method_name": "fromJson",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###fromJson",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public T fromJson(Reader reader, Class<T> targetClass);",
            "Junit_version": "4",
            "returnType": "T"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test12",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}",
            "TestRelevantFocal": "[getInstance###0, fromJson###2, fromJson###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {},
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport java.io.Writer;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test17",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[get###0, is###1, is###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void deregister(Class<?> clazz) {\n    writerCodeGenerator.deregister(clazz);\n    readerCodeGenerator.deregister(clazz);\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private JsonWriterCodeGenerator writerCodeGenerator;private JsonReaderCodeGenerator readerCodeGenerator;",
            "Parameter_type": "Class<?>",
            "Import_statements": "",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "deregister(Class<?> clazz)",
            "Method_name": "deregister",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###deregister",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public void deregister(Class<?> clazz);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}",
            "TestRelevantFocal": "[deregister###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public synchronized boolean is(WriterConfig config) {\n    return WRITER_CONFIGS[config.ordinal()];\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];",
            "Parameter_type": "WriterConfig",
            "Import_statements": "import java.io.Writer;\nimport com.zappos.json.JsonConfig.WriterConfig;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "is(WriterConfig config)",
            "Method_name": "is",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###is",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public synchronized boolean is(WriterConfig config);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport java.io.Writer;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test17",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[get###0, is###1, is###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public ValueFormatter<Object> getValueFormatter(Class<?> objectType) {\n    return VALUE_FORMATTERS.get(objectType);\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();",
            "Parameter_type": "Class<?>",
            "Import_statements": "import com.zappos.json.format.ValueFormatter;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "getValueFormatter(Class<?> objectType)",
            "Method_name": "getValueFormatter",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###getValueFormatter",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public ValueFormatter<Object> getValueFormatter(Class<?> objectType);",
            "Junit_version": "4",
            "returnType": "ValueFormatter<Object>"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.ValueFormatter;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test33",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}",
            "TestRelevantFocal": "[getInstance###0, getValueFormatter###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void register(Class<?> clazz) {\n    try {\n        writerCodeGenerator.registerWriter(clazz);\n        readerCodeGenerator.registerReader(clazz);\n    } catch (Exception e) {\n        throw new JsonException(e);\n    }\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private JsonWriterCodeGenerator writerCodeGenerator;private JsonReaderCodeGenerator readerCodeGenerator;",
            "Parameter_type": "Class<?>",
            "Import_statements": "import java.io.Reader;\nimport java.io.Writer;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "register(Class<?> clazz)",
            "Method_name": "register",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###register",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public void register(Class<?> clazz);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test10",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}",
            "TestRelevantFocal": "[getInstance###0, register###1, register###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public String format(Object value) {\n    ValueFormatter<Object> valueFormatter = VALUE_FORMATTERS.get(value.getClass());\n    if (valueFormatter != null) {\n        return valueFormatter.format(this, value);\n    } else {\n        return value.toString();\n    }\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();",
            "Parameter_type": "Object",
            "Import_statements": "import com.zappos.json.format.ValueFormatter;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "format(Object value)",
            "Method_name": "format",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###format",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "\r\n   * Try to format specified value with the formatter in a registry.\r\n   * This method throws {@link NullPointerException} when the specified value is null.\r\n   * @param value the object being formatted\r\n   * @return formatted value or value.toString when there is no formatter\r\n   ",
            "packageName": "com.zappos.json",
            "method_signature": "public String format(Object value);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test13",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}",
            "TestRelevantFocal": "[getInstance###0, format###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void toJson(Object object, Writer writer) {\n    try {\n        if (object == null) {\n            writer.append(JsonWriter.CONST_NULL);\n            return;\n        }\n        Class<?> objectType = object.getClass();\n        ValueFormatter<?> formatter = VALUE_FORMATTERS.get(objectType);\n        if (formatter != null) {\n            String formattedStr = formatter.formatObject(this, object);\n            writer.append(formattedStr);\n            return;\n        } else if (object instanceof Boolean) {\n            JsonWriter.writeBoolean(this, (Boolean) object, writer);\n            return;\n        } else if (object instanceof String || object instanceof Character) {\n            JsonWriter.writeString(this, object.toString(), writer);\n            return;\n        } else if (object instanceof Number) {\n            JsonWriter.writeNumber(this, (Number) object, writer);\n            return;\n        } else if (object instanceof Enum) {\n            JsonWriter.writeEnum(this, (Enum<?>) object, writer);\n            return;\n        } else if (object instanceof Iterable) {\n            JsonWriter.writeIterable(this, (Iterable<?>) object, writer);\n            return;\n        } else if (object instanceof Map) {\n            JsonWriter.writeMap(this, (Map<?, ?>) object, writer);\n            return;\n        } else if (objectType.isArray()) {\n            Class<?> componentType = objectType.getComponentType();\n            if (componentType == byte.class) {\n                JsonWriter.writeBase64String(this, (byte[]) object, writer);\n            } else if (componentType == char.class) {\n                JsonWriter.writeArray((char[]) object, writer);\n            } else if (componentType == boolean.class) {\n                JsonWriter.writeArray((boolean[]) object, writer);\n            } else if (componentType == short.class) {\n                JsonWriter.writeArray((short[]) object, writer);\n            } else if (componentType == int.class) {\n                JsonWriter.writeArray((int[]) object, writer);\n            } else if (componentType == long.class) {\n                JsonWriter.writeArray((long[]) object, writer);\n            } else if (componentType == float.class) {\n                JsonWriter.writeArray((float[]) object, writer);\n            } else if (componentType == double.class) {\n                JsonWriter.writeArray((double[]) object, writer);\n            } else {\n                JsonWriter.writeArray(this, (Object[]) object, writer);\n            }\n            return;\n        }\n        JsonWriterInvoker writerInvoker = writerCodeGenerator.getWriter(objectType);\n        if (writerInvoker == null) {\n            writerInvoker = writerCodeGenerator.registerWriter(objectType);\n        }\n        writerInvoker.writeJson(object, writer);\n    } catch (JsonException e) {\n        throw e;\n    } catch (Exception e) {\n        throw new JsonException(e);\n    }\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();private JsonWriterCodeGenerator writerCodeGenerator;",
            "Parameter_type": "Object,Writer",
            "Import_statements": "import java.io.Writer;\nimport java.util.Map;\nimport com.zappos.json.format.ValueFormatter;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "toJson(Object object, Writer writer)",
            "Method_name": "toJson",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###toJson",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public void toJson(Object object, Writer writer);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport java.io.Writer;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test15",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}",
            "TestRelevantFocal": "[toJson###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public synchronized static ZapposJson getInstance(String name) {\n    ZapposJson instance = INSTANCES.get(name);\n    if (instance == null) {\n        instance = new ZapposJson();\n        INSTANCES.put(name, instance);\n    }\n    return instance;\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "private final static Map<String, ZapposJson> INSTANCES = new HashMap<>();",
            "Parameter_type": "String",
            "Import_statements": "",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "getInstance(String name)",
            "Method_name": "getInstance",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###getInstance",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public static synchronized ZapposJson getInstance(String name);",
            "Junit_version": "4",
            "returnType": "ZapposJson"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test16",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}",
            "TestRelevantFocal": "[getInstance###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void deregisterAll() {\n    writerCodeGenerator.deregisterAll();\n    readerCodeGenerator.deregisterAll();\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private JsonWriterCodeGenerator writerCodeGenerator;private JsonReaderCodeGenerator readerCodeGenerator;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "deregisterAll()",
            "Method_name": "deregisterAll",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###deregisterAll",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public void deregisterAll();",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test26",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}",
            "TestRelevantFocal": "[deregisterAll###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@SuppressWarnings(\"unchecked\")\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter) {\n    VALUE_FORMATTERS.put(objectType, (ValueFormatter<Object>) valueFormatter);\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();",
            "Parameter_type": "Class<?>,ValueFormatter<?>",
            "Import_statements": "import com.zappos.json.format.ValueFormatter;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter)",
            "Method_name": "addValueFormatter",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###addValueFormatter",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test29",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}",
            "TestRelevantFocal": "[addValueFormatter###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public synchronized void configure(WriterConfig config, boolean value) {\n    WRITER_CONFIGS[config.ordinal()] = true;\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];",
            "Parameter_type": "WriterConfig,boolean",
            "Import_statements": "import java.io.Writer;\nimport com.zappos.json.JsonConfig.WriterConfig;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "configure(WriterConfig config, boolean value)",
            "Method_name": "configure",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###configure",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public synchronized void configure(WriterConfig config, boolean value);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport java.io.Writer;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test35",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}",
            "TestRelevantFocal": "[configure###2, configure###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void removeValueFormatter(Class<?> objectType) {\n    VALUE_FORMATTERS.remove(objectType);\n}",
            "all_field_declaration": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();\nprivate final static Map<String, ZapposJson> INSTANCES = new HashMap<>();\nprivate boolean debug = false;\nprivate JsonBeanIntrospector jsonBeanIntrospector;\nprivate JsonWriterCodeGenerator writerCodeGenerator;\nprivate JsonReaderCodeGenerator readerCodeGenerator;\nprivate final boolean[] WRITER_CONFIGS = new boolean[WriterConfig.values().length];\nprivate final boolean[] READER_CONFIGS = new boolean[ReaderConfig.values().length];",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "protected final Map<Class<?>, ValueFormatter<Object>> VALUE_FORMATTERS = new ConcurrentHashMap<>();",
            "Parameter_type": "Class<?>",
            "Import_statements": "import com.zappos.json.format.ValueFormatter;\n",
            "public_method_signature": "public static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);",
            "public_field": "",
            "Method_statement": "removeValueFormatter(Class<?> objectType)",
            "Method_name": "removeValueFormatter",
            "Class_declaration": "public class ZapposJson {\n",
            "constructors": "protected ZapposJson() {\n    addValueFormatter(Date.class, new JavaDateFormatter());\n    addValueFormatter(java.sql.Date.class, new JavaSqlDateFormatter());\n    addValueFormatter(java.sql.Timestamp.class, new JavaTimestampFormatter());\n    addValueFormatter(java.math.BigInteger.class, new BigIntegerFormatter());\n    addValueFormatter(java.math.BigDecimal.class, new BigDecimalFormatter());\n    if (Reflections.classPresent(\"java.time.chrono.ChronoLocalDate\")) {\n        ValueFormatter<LocalDate> localDateHandler = new JavaTimeLocalDateFormatter();\n        addValueFormatter(LocalDate.class, localDateHandler);\n        ValueFormatter<Instant> instantHandler = new JavaTimeInstantFormatter();\n        addValueFormatter(Instant.class, instantHandler);\n    }\n    jsonBeanIntrospector = new JsonBeanIntrospector(this);\n    writerCodeGenerator = new JsonWriterCodeGenerator(this, jsonBeanIntrospector);\n    readerCodeGenerator = new JsonReaderCodeGenerator(this, jsonBeanIntrospector);\n}protected ZapposJson(boolean debug) {\n    this();\n    this.debug = debug;\n}",
            "all_method_signature": "protected ZapposJson();\nprotected ZapposJson(boolean debug);\npublic static ZapposJson getInstance();\npublic static synchronized ZapposJson getInstance(String name);\npublic void register(Class<?>... classes);\npublic void register(Class<?> clazz);\npublic void deregister(Class<?> clazz);\npublic void deregisterAll();\npublic void addValueFormatter(Class<?> objectType, ValueFormatter<?> valueFormatter);\npublic void removeValueFormatter(Class<?> objectType);\npublic ValueFormatter<Object> getValueFormatter(Class<?> objectType);\npublic synchronized void configure(ReaderConfig config, boolean value);\npublic synchronized boolean is(ReaderConfig config);\npublic synchronized void configure(WriterConfig config, boolean value);\npublic synchronized boolean is(WriterConfig config);\npublic String format(Object value);\npublic String toJson(Object object);\npublic void toJson(Object object, Writer writer);\npublic T fromJson(String json, Class<T> targetClass);\npublic T fromJson(Reader reader, Class<T> targetClass);\nprotected void debug(String pattern, Object... args);",
            "Class_name": "ZapposJson",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/ZapposJson.java###removeValueFormatter",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.time.Instant;\n\nimport java.time.LocalDate;\n\nimport java.util.Date;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.zappos.json.JsonConfig.ReaderConfig;\n\nimport com.zappos.json.JsonConfig.WriterConfig;\n\nimport com.zappos.json.format.BigDecimalFormatter;\n\nimport com.zappos.json.format.BigIntegerFormatter;\n\nimport com.zappos.json.format.JavaDateFormatter;\n\nimport com.zappos.json.format.JavaSqlDateFormatter;\n\nimport com.zappos.json.format.JavaTimeInstantFormatter;\n\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\n\nimport com.zappos.json.format.JavaTimestampFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.JsonUtils;\n\nimport com.zappos.json.util.Reflections;\n\nimport com.zappos.json.util.Strings;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public void removeValueFormatter(Class<?> objectType);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[ZapposJson_ESTest.java###test00+++newInstance###2, ZapposJson_ESTest.java###test00+++debug###2, ZapposJson_ESTest.java###test00+++assertEquals###2, ZapposJson_ESTest.java###test01+++ofEpochSecond###1, ZapposJson_ESTest.java###test01+++from###1, ZapposJson_ESTest.java###test01+++toJson###1, ZapposJson_ESTest.java###test01+++assertEquals###2, ZapposJson_ESTest.java###test02+++getInstance###0, ZapposJson_ESTest.java###test02+++verifyException###2, ZapposJson_ESTest.java###test02+++fromJson###2, ZapposJson_ESTest.java###test02+++fail###1, ZapposJson_ESTest.java###test03+++get###0, ZapposJson_ESTest.java###test03+++verifyException###2, ZapposJson_ESTest.java###test03+++fromJson###2, ZapposJson_ESTest.java###test03+++fail###1, ZapposJson_ESTest.java###test04+++deregister###1, ZapposJson_ESTest.java###test05+++is###1, ZapposJson_ESTest.java###test05+++assertFalse###1, ZapposJson_ESTest.java###test06+++getInstance###0, ZapposJson_ESTest.java###test06+++is###1, ZapposJson_ESTest.java###test06+++assertFalse###1, ZapposJson_ESTest.java###test07+++getValueFormatter###1, ZapposJson_ESTest.java###test07+++assertNotNull###1, ZapposJson_ESTest.java###test08+++verifyException###2, ZapposJson_ESTest.java###test08+++toJson###1, ZapposJson_ESTest.java###test08+++fail###1, ZapposJson_ESTest.java###test09+++verifyException###2, ZapposJson_ESTest.java###test09+++register###1, ZapposJson_ESTest.java###test09+++fail###1, ZapposJson_ESTest.java###test10+++getInstance###0, ZapposJson_ESTest.java###test10+++newInstance###2, ZapposJson_ESTest.java###test10+++verifyException###2, ZapposJson_ESTest.java###test10+++register###1, ZapposJson_ESTest.java###test10+++fail###1, ZapposJson_ESTest.java###test11+++verifyException###2, ZapposJson_ESTest.java###test11+++fromJson###2, ZapposJson_ESTest.java###test11+++fail###1, ZapposJson_ESTest.java###test12+++getInstance###0, ZapposJson_ESTest.java###test12+++verifyException###2, ZapposJson_ESTest.java###test12+++fromJson###2, ZapposJson_ESTest.java###test12+++fail###1, ZapposJson_ESTest.java###test13+++getInstance###0, ZapposJson_ESTest.java###test13+++verifyException###2, ZapposJson_ESTest.java###test13+++format###1, ZapposJson_ESTest.java###test13+++fail###1, ZapposJson_ESTest.java###test14+++verifyException###2, ZapposJson_ESTest.java###test14+++toJson###2, ZapposJson_ESTest.java###test14+++fail###1, ZapposJson_ESTest.java###test15+++verifyException###2, ZapposJson_ESTest.java###test15+++toJson###2, ZapposJson_ESTest.java###test15+++fail###1, ZapposJson_ESTest.java###test16+++getInstance###1, ZapposJson_ESTest.java###test16+++assertNotNull###1, ZapposJson_ESTest.java###test17+++get###0, ZapposJson_ESTest.java###test17+++is###1, ZapposJson_ESTest.java###test17+++assertFalse###1, ZapposJson_ESTest.java###test18+++getInstance###0, ZapposJson_ESTest.java###test18+++verifyException###2, ZapposJson_ESTest.java###test18+++register###1, ZapposJson_ESTest.java###test18+++fail###1, ZapposJson_ESTest.java###test19+++verifyException###2, ZapposJson_ESTest.java###test19+++fromJson###2, ZapposJson_ESTest.java###test19+++fail###1, ZapposJson_ESTest.java###test20+++getInstance###0, ZapposJson_ESTest.java###test20+++verifyException###2, ZapposJson_ESTest.java###test20+++fromJson###2, ZapposJson_ESTest.java###test20+++fail###1, ZapposJson_ESTest.java###test21+++getInstance###0, ZapposJson_ESTest.java###test21+++verifyException###2, ZapposJson_ESTest.java###test21+++fromJson###2, ZapposJson_ESTest.java###test21+++fail###1, ZapposJson_ESTest.java###test22+++verifyException###2, ZapposJson_ESTest.java###test22+++toJson###2, ZapposJson_ESTest.java###test22+++fail###1, ZapposJson_ESTest.java###test23+++now###0, ZapposJson_ESTest.java###test23+++from###1, ZapposJson_ESTest.java###test23+++format###1, ZapposJson_ESTest.java###test23+++assertEquals###2, ZapposJson_ESTest.java###test24+++getInstance###0, ZapposJson_ESTest.java###test24+++format###1, ZapposJson_ESTest.java###test24+++assertNotNull###1, ZapposJson_ESTest.java###test25+++newInstance###2, ZapposJson_ESTest.java###test25+++register###1, ZapposJson_ESTest.java###test25+++assertEquals###2, ZapposJson_ESTest.java###test26+++deregisterAll###0, ZapposJson_ESTest.java###test27+++createTempFile###2, ZapposJson_ESTest.java###test27+++toJson###2, ZapposJson_ESTest.java###test28+++verifyException###2, ZapposJson_ESTest.java###test28+++deregister###1, ZapposJson_ESTest.java###test28+++fail###1, ZapposJson_ESTest.java###test29+++addValueFormatter###2, ZapposJson_ESTest.java###test29+++assertTrue###1, ZapposJson_ESTest.java###test29+++isJsString###0, ZapposJson_ESTest.java###test30+++toJson###1, ZapposJson_ESTest.java###test30+++assertEquals###2, ZapposJson_ESTest.java###test31+++getInstance###0, ZapposJson_ESTest.java###test31+++newInstance###2, ZapposJson_ESTest.java###test31+++verifyException###2, ZapposJson_ESTest.java###test31+++register###1, ZapposJson_ESTest.java###test31+++fail###1, ZapposJson_ESTest.java###test32+++configure###2, ZapposJson_ESTest.java###test33+++getInstance###0, ZapposJson_ESTest.java###test33+++getValueFormatter###1, ZapposJson_ESTest.java###test33+++assertNotNull###1, ZapposJson_ESTest.java###test34+++is###1, ZapposJson_ESTest.java###test34+++assertFalse###1, ZapposJson_ESTest.java###test35+++configure###2, ZapposJson_ESTest.java###test36+++removeValueFormatter###1, ZapposJson_ESTest.java###test37+++getInstance###0, ZapposJson_ESTest.java###test37+++verifyException###2, ZapposJson_ESTest.java###test37+++fromJson###2, ZapposJson_ESTest.java###test37+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:19:12 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ZapposJson_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.ZapposJson\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ZapposJson_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ZapposJson_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonWriter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.ValueFormatter;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java###test36",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.debug(\"[]\", classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    Instant instant0 = MockInstant.ofEpochSecond(0L);\n    Timestamp timestamp0 = Timestamp.from(instant0);\n    String string0 = zapposJson0.toJson((Object) timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\"Invalid character: \");\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // bean introspection failed\n        // \n        verifyException(\"com.zappos.json.JsonBeanIntrospector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    Class<Locale.Category> class0 = Locale.Category.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"#:%a\\\"FPyS[\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\\\"FPyS[\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    zapposJson0.deregister(class0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) zapposJson0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.register((Class<?>[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    Class<Date> class0 = Date.class;\n    classArray0[0] = class0;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Date> class0 = Date.class;\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson(\"\", class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NumberFormatException: For input string: \\\"\\\"\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        zapposJson0.format((Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    java.sql.Date date0 = new java.sql.Date(3581L);\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) date0, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson((Object) null, (Writer) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"}e1F\");\n    assertNotNull(zapposJson0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.register(class0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    StringReader stringReader0 = new StringReader(\" is an unsupported type.You need a custom ValueFormatter for this type.\");\n    Class<HijrahEra> class0 = HijrahEra.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) stringReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    PipedReader pipedReader0 = new PipedReader();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((Reader) pipedReader0, class0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.io.IOException: Pipe not connected\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        zapposJson0.toJson(object0, (Writer) null);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    String string0 = zapposJson0.format(date0);\n    assertEquals(\"1392409281320\", string0);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object object0 = new Object();\n    String string0 = zapposJson0.format(object0);\n    assertNotNull(string0);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);\n    zapposJson0.register(classArray0);\n    assertEquals(0, classArray0.length);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    zapposJson0.deregisterAll();\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    HijrahEra hijrahEra0 = HijrahEra.AH;\n    File file0 = MockFile.createTempFile(\"java.time.chrono.ChronoLocalDate\", \"java.time.chrono.ChronoLocalDate\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);\n    zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;\n    ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;\n    // Undeclared exception!\n    try {\n        zapposJson0.deregister((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Class<Date> class0 = Date.class;\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    zapposJson0.addValueFormatter(class0, javaDateFormatter0);\n    assertTrue(javaDateFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    String string0 = zapposJson0.toJson((Object) null);\n    assertEquals(\"null\", string0);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);\n    // Undeclared exception!\n    try {\n        zapposJson0.register(classArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // java.lang.NullPointerException\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_ReaderConfig0, true);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);\n    assertNotNull(valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;\n    boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;\n    zapposJson0.configure(jsonConfig_WriterConfig0, false);\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Class<Date> class0 = Date.class;\n    // Undeclared exception!\n    try {\n        zapposJson0.fromJson((String) null, class0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Class<Date> class0 = Date.class;\n    zapposJson0.removeValueFormatter(class0);\n}",
            "TestRelevantFocal": "[removeValueFormatter###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:19:12 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.io.File;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.chrono.HijrahEra;\nimport java.util.Date;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public JsonBeanAttribute setJsonKey(String jsonKey) {\n    this.jsonKey = jsonKey;\n    return this;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private String jsonKey;",
            "Parameter_type": "String",
            "Import_statements": "",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "setJsonKey(String jsonKey)",
            "Method_name": "setJsonKey",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###setJsonKey",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public JsonBeanAttribute setJsonKey(String jsonKey);",
            "Junit_version": "4",
            "returnType": "JsonBeanAttribute"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test12",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}",
            "TestRelevantFocal": "[setJsonKey###1, getJsonKey###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public String getJsonKey() {\n    return jsonKey;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private String jsonKey;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "getJsonKey()",
            "Method_name": "getJsonKey",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###getJsonKey",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public String getJsonKey();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test12",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}",
            "TestRelevantFocal": "[setJsonKey###1, getJsonKey###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public JsonBeanAttribute setFormatterPattern(String formatterPattern) {\n    this.formatterPattern = formatterPattern;\n    return this;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private String formatterPattern;",
            "Parameter_type": "String",
            "Import_statements": "",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "setFormatterPattern(String formatterPattern)",
            "Method_name": "setFormatterPattern",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###setFormatterPattern",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public JsonBeanAttribute setFormatterPattern(String formatterPattern);",
            "Junit_version": "4",
            "returnType": "JsonBeanAttribute"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}",
            "TestRelevantFocal": "[setFormatterPattern###1, getFormatterPattern###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public String getFormatterPattern() {\n    return formatterPattern;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private String formatterPattern;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "getFormatterPattern()",
            "Method_name": "getFormatterPattern",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###getFormatterPattern",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public String getFormatterPattern();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}",
            "TestRelevantFocal": "[setFormatterPattern###1, getFormatterPattern###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public JsonBeanAttribute setEnumValue(EnumValue enumValue) {\n    this.enumValue = enumValue;\n    return this;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private EnumValue enumValue;",
            "Parameter_type": "EnumValue",
            "Import_statements": "import com.zappos.json.annot.JsonEnum.EnumValue;\n",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "setEnumValue(EnumValue enumValue)",
            "Method_name": "setEnumValue",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###setEnumValue",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Junit_version": "4",
            "returnType": "JsonBeanAttribute"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}",
            "TestRelevantFocal": "[setEnumValue###1, getEnumValue###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public EnumValue getEnumValue() {\n    return enumValue;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private EnumValue enumValue;",
            "Parameter_type": "",
            "Import_statements": "import com.zappos.json.annot.JsonEnum.EnumValue;\n",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "getEnumValue()",
            "Method_name": "getEnumValue",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###getEnumValue",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public EnumValue getEnumValue();",
            "Junit_version": "4",
            "returnType": "EnumValue"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}",
            "TestRelevantFocal": "[setEnumValue###1, getEnumValue###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public JsonBeanAttribute setAttributeKey(String attributeKey) {\n    this.attributeKey = attributeKey;\n    return this;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private String attributeKey;",
            "Parameter_type": "String",
            "Import_statements": "",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "setAttributeKey(String attributeKey)",
            "Method_name": "setAttributeKey",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###setAttributeKey",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public JsonBeanAttribute setAttributeKey(String attributeKey);",
            "Junit_version": "4",
            "returnType": "JsonBeanAttribute"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}",
            "TestRelevantFocal": "[setAttributeKey###1, getAttributeKey###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public String getAttributeKey() {\n    return attributeKey;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private String attributeKey;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "getAttributeKey()",
            "Method_name": "getAttributeKey",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###getAttributeKey",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public String getAttributeKey();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}",
            "TestRelevantFocal": "[setAttributeKey###1, getAttributeKey###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String toString() {\n    if (field != null) {\n        return field.getName();\n    }\n    return method.getName();\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private Method method;private Field field;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "toString()",
            "Method_name": "toString",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###toString",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public String toString();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test13",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}",
            "TestRelevantFocal": "[setFormatterClass###1, getFormatterClass###0, toString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Field getField() {\n    return field;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private Field field;",
            "Parameter_type": "",
            "Import_statements": "import java.lang.reflect.Field;\n",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "getField()",
            "Method_name": "getField",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###getField",
            "Parameter_num": "0",
            "contextMethod": "@Override\npublic String toString() {\n    if (field != null) {\n        return field.getName();\n    }\n    return method.getName();\n}\npublic Method getMethod() {\n    return method;\n}",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public Field getField();",
            "Junit_version": "4",
            "returnType": "Field"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport java.lang.reflect.Field;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test07",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}",
            "TestRelevantFocal": "[getField###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Method getMethod() {\n    return method;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private Method method;",
            "Parameter_type": "",
            "Import_statements": "import java.lang.reflect.Method;\n",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "getMethod()",
            "Method_name": "getMethod",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###getMethod",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public Method getMethod();",
            "Junit_version": "4",
            "returnType": "Method"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport java.lang.reflect.Method;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test09",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}",
            "TestRelevantFocal": "[getMethod###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass) {\n    this.formatterClass = formatterClass;\n    return this;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private Class<? extends ValueFormatter<?>> formatterClass;",
            "Parameter_type": "Class<? extends ValueFormatter<?>>",
            "Import_statements": "import com.zappos.json.format.ValueFormatter;\n",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass)",
            "Method_name": "setFormatterClass",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###setFormatterClass",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);",
            "Junit_version": "4",
            "returnType": "JsonBeanAttribute"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test13",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}",
            "TestRelevantFocal": "[setFormatterClass###1, getFormatterClass###0, toString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Class<? extends ValueFormatter<?>> getFormatterClass() {\n    return formatterClass;\n}",
            "all_field_declaration": "private Method method;\nprivate Field field;\nprivate String attributeKey;\n/**\n * @JsonKey\n */\nprivate String jsonKey;\nprivate Class<? extends ValueFormatter<?>> formatterClass;\nprivate String formatterPattern;\nprivate EnumValue enumValue;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private Class<? extends ValueFormatter<?>> formatterClass;",
            "Parameter_type": "",
            "Import_statements": "import com.zappos.json.format.ValueFormatter;\n",
            "public_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "public_field": "",
            "Method_statement": "getFormatterClass()",
            "Method_name": "getFormatterClass",
            "Class_declaration": "public class JsonBeanAttribute {\n",
            "constructors": "public JsonBeanAttribute() {\n}public JsonBeanAttribute(Method method, Field field, String attributeKey) {\n    this.method = method;\n    this.field = field;\n    this.attributeKey = attributeKey;\n    this.jsonKey = attributeKey;\n}",
            "all_method_signature": "public JsonBeanAttribute();\npublic JsonBeanAttribute(Method method, Field field, String attributeKey);\npublic String toString();\npublic Method getMethod();\npublic Field getField();\npublic String getAttributeKey();\npublic JsonBeanAttribute setAttributeKey(String attributeKey);\npublic String getJsonKey();\npublic JsonBeanAttribute setJsonKey(String jsonKey);\npublic Class<? extends ValueFormatter<?>> getFormatterClass();\npublic JsonBeanAttribute setFormatterClass(Class<? extends ValueFormatter<?>> formatterClass);\npublic String getFormatterPattern();\npublic JsonBeanAttribute setFormatterPattern(String formatterPattern);\npublic EnumValue getEnumValue();\npublic JsonBeanAttribute setEnumValue(EnumValue enumValue);",
            "Class_name": "JsonBeanAttribute",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanAttribute.java###getFormatterClass",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport com.zappos.json.annot.JsonEnum.EnumValue;\n\nimport com.zappos.json.format.ValueFormatter;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public Class<? extends ValueFormatter<?>> getFormatterClass();",
            "Junit_version": "4",
            "returnType": "Class<? extends ValueFormatter<?>>"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanAttribute_ESTest.java###test00+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test00+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test00+++assertEquals###2, JsonBeanAttribute_ESTest.java###test01+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test01+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test01+++assertEquals###2, JsonBeanAttribute_ESTest.java###test02+++setFormatterPattern###1, JsonBeanAttribute_ESTest.java###test02+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test02+++assertEquals###2, JsonBeanAttribute_ESTest.java###test03+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test03+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test03+++assertEquals###2, JsonBeanAttribute_ESTest.java###test04+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test04+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test04+++assertEquals###2, JsonBeanAttribute_ESTest.java###test05+++verifyException###2, JsonBeanAttribute_ESTest.java###test05+++toString###0, JsonBeanAttribute_ESTest.java###test05+++fail###1, JsonBeanAttribute_ESTest.java###test06+++getFormatterPattern###0, JsonBeanAttribute_ESTest.java###test06+++assertNull###1, JsonBeanAttribute_ESTest.java###test07+++getField###0, JsonBeanAttribute_ESTest.java###test07+++assertNull###1, JsonBeanAttribute_ESTest.java###test08+++setAttributeKey###1, JsonBeanAttribute_ESTest.java###test08+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test08+++assertEquals###2, JsonBeanAttribute_ESTest.java###test09+++getMethod###0, JsonBeanAttribute_ESTest.java###test09+++assertNull###1, JsonBeanAttribute_ESTest.java###test10+++getAttributeKey###0, JsonBeanAttribute_ESTest.java###test10+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test11+++setEnumValue###1, JsonBeanAttribute_ESTest.java###test11+++assertNull###1, JsonBeanAttribute_ESTest.java###test11+++getEnumValue###0, JsonBeanAttribute_ESTest.java###test12+++setJsonKey###1, JsonBeanAttribute_ESTest.java###test12+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test12+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++setFormatterClass###1, JsonBeanAttribute_ESTest.java###test13+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test13+++assertEquals###2, JsonBeanAttribute_ESTest.java###test13+++toString###0, JsonBeanAttribute_ESTest.java###test14+++getFormatterClass###0, JsonBeanAttribute_ESTest.java###test14+++assertNull###1, JsonBeanAttribute_ESTest.java###test15+++getJsonKey###0, JsonBeanAttribute_ESTest.java###test15+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:48:09 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanAttribute_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanAttribute\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.annot.JsonEnum$EnumValue\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanAttribute_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanAttribute\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java###test13",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"U/e9SQZ'~VQDTn\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"U/e9SQZ'~VQDTn\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    jsonBeanAttribute0.setFormatterPattern(\"PFb|,_\");\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertEquals(\"PFb|,_\", string0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern(\"\");\n    String string0 = jsonBeanAttribute1.getFormatterPattern();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();\n    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"q>vG|5PRl$yzt\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"q>vG|5PRl$yzt\", string0);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    // Undeclared exception!\n    try {\n        jsonBeanAttribute0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonBeanAttribute\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getFormatterPattern();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Field field0 = jsonBeanAttribute0.getField();\n    assertNull(field0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey(\"\");\n    String string0 = jsonBeanAttribute1.getAttributeKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Method method0 = jsonBeanAttribute0.getMethod();\n    assertNull(method0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getAttributeKey();\n    assertNull(string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);\n    assertNull(jsonBeanAttribute1.getEnumValue());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(\"\");\n    String string0 = jsonBeanAttribute1.getJsonKey();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, \"-QnH\");\n    Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();\n    assertNull(class0);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    String string0 = jsonBeanAttribute0.getJsonKey();\n    assertNull(string0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();\n    Class<JavaDateFormatter> class0 = JavaDateFormatter.class;\n    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);\n    Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();\n    assertEquals(\"class com.zappos.json.format.JavaDateFormatter\", class1.toString());\n}",
            "TestRelevantFocal": "[setFormatterClass###1, getFormatterClass###0, toString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:48:09 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.annot.JsonEnum;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String format(ZapposJson zapposJson, Timestamp object) {\n    if (getPattern() != null) {\n        return toJsonValue(zapposJson, new SimpleDateFormat(getPattern()).format(object));\n    }\n    return String.valueOf(object.getTime());\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "ZapposJson,Timestamp",
            "Import_statements": "import java.sql.Timestamp;\nimport java.text.SimpleDateFormat;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public Timestamp cast(Object obj);\npublic String format(ZapposJson zapposJson, Timestamp object);\npublic Timestamp parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Timestamp> newInstance();",
            "public_field": "",
            "Method_statement": "format(ZapposJson zapposJson, Timestamp object)",
            "Method_name": "format",
            "Class_declaration": "public class JavaTimestampFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Timestamp cast(Object obj);\npublic String format(ZapposJson zapposJson, Timestamp object);\npublic Timestamp parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Timestamp> newInstance();",
            "Class_name": "JavaTimestampFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimestampFormatter.java###format",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.sql.Timestamp;\n\nimport java.text.SimpleDateFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String format(ZapposJson zapposJson, Timestamp object);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimestampFormatter_ESTest.java###test00+++getInstance###0, JavaTimestampFormatter_ESTest.java###test00+++format###2, JavaTimestampFormatter_ESTest.java###test00+++assertEquals###2, JavaTimestampFormatter_ESTest.java###test01+++cast###1, JavaTimestampFormatter_ESTest.java###test01+++assertEquals###2, JavaTimestampFormatter_ESTest.java###test01+++getNanos###0, JavaTimestampFormatter_ESTest.java###test02+++getInstance###0, JavaTimestampFormatter_ESTest.java###test02+++parse###2, JavaTimestampFormatter_ESTest.java###test02+++cast###1, JavaTimestampFormatter_ESTest.java###test02+++assertSame###2, JavaTimestampFormatter_ESTest.java###test03+++getInstance###0, JavaTimestampFormatter_ESTest.java###test03+++verifyException###2, JavaTimestampFormatter_ESTest.java###test03+++parse###2, JavaTimestampFormatter_ESTest.java###test03+++fail###1, JavaTimestampFormatter_ESTest.java###test04+++setPattern###1, JavaTimestampFormatter_ESTest.java###test04+++verifyException###2, JavaTimestampFormatter_ESTest.java###test04+++parse###2, JavaTimestampFormatter_ESTest.java###test04+++fail###1, JavaTimestampFormatter_ESTest.java###test05+++setPattern###1, JavaTimestampFormatter_ESTest.java###test05+++getInstance###1, JavaTimestampFormatter_ESTest.java###test05+++verifyException###2, JavaTimestampFormatter_ESTest.java###test05+++parse###2, JavaTimestampFormatter_ESTest.java###test05+++fail###1, JavaTimestampFormatter_ESTest.java###test06+++cast###1, JavaTimestampFormatter_ESTest.java###test06+++fail###1, JavaTimestampFormatter_ESTest.java###test07+++setPattern###1, JavaTimestampFormatter_ESTest.java###test07+++getInstance###1, JavaTimestampFormatter_ESTest.java###test07+++verifyException###2, JavaTimestampFormatter_ESTest.java###test07+++parse###2, JavaTimestampFormatter_ESTest.java###test07+++fail###1, JavaTimestampFormatter_ESTest.java###test08+++getInstance###0, JavaTimestampFormatter_ESTest.java###test08+++parse###2, JavaTimestampFormatter_ESTest.java###test08+++assertEquals###2, JavaTimestampFormatter_ESTest.java###test08+++getNanos###0, JavaTimestampFormatter_ESTest.java###test09+++setPattern###1, JavaTimestampFormatter_ESTest.java###test09+++verifyException###2, JavaTimestampFormatter_ESTest.java###test09+++format###2, JavaTimestampFormatter_ESTest.java###test09+++fail###1, JavaTimestampFormatter_ESTest.java###test10+++verifyException###2, JavaTimestampFormatter_ESTest.java###test10+++format###2, JavaTimestampFormatter_ESTest.java###test10+++fail###1, JavaTimestampFormatter_ESTest.java###test11+++cast###1, JavaTimestampFormatter_ESTest.java###test11+++assertNull###1, JavaTimestampFormatter_ESTest.java###test12+++newInstance###0, JavaTimestampFormatter_ESTest.java###test12+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:44:18 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimestampFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimestampFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimestampFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimestampFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport java.sql.Timestamp;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimestampFormatter_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = new Timestamp(0L);\n    String string0 = javaTimestampFormatter0.format(zapposJson0, timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    Timestamp timestamp0 = new Timestamp(0L);\n    Timestamp timestamp1 = javaTimestampFormatter0.cast(timestamp0);\n    assertEquals(0, timestamp1.getNanos());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = javaTimestampFormatter0.parse(zapposJson0, \"5\");\n    Timestamp timestamp1 = javaTimestampFormatter0.cast(timestamp0);\n    assertSame(timestamp0, timestamp1);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimestampFormatter0.parse(zapposJson0, \" f\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\" f\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"\");\n    try {\n        javaTimestampFormatter0.parse((ZapposJson) null, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"com.zappos.json.format.JavaTimestampFormatter\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"com.zappos.json.format.JavaTimestampFormatter\");\n    try {\n        javaTimestampFormatter0.parse(zapposJson0, \"com.zappos.json.format.JavaTimestampFormatter\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'c'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaTimestampFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaTimestampFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = javaTimestampFormatter0.parse(zapposJson0, \"0\");\n    assertEquals(0, timestamp0.getNanos());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"<^o'taeBe\");\n    // Undeclared exception!\n    try {\n        javaTimestampFormatter0.format((ZapposJson) null, (Timestamp) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'o'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    // Undeclared exception!\n    try {\n        javaTimestampFormatter0.format((ZapposJson) null, (Timestamp) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.JavaTimestampFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    Timestamp timestamp0 = javaTimestampFormatter0.cast((Object) null);\n    assertNull(timestamp0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ValueFormatter<Timestamp> valueFormatter0 = javaTimestampFormatter0.newInstance();\n    assertNotSame(javaTimestampFormatter0, valueFormatter0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = new Timestamp(0L);\n    String string0 = javaTimestampFormatter0.format(zapposJson0, timestamp0);\n    assertEquals(\"0\", string0);\n}",
            "TestRelevantFocal": "[format###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:44:18 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.sql.Timestamp;\nimport java.text.ParseException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimestampFormatter_ESTest extends JavaTimestampFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic Timestamp cast(Object obj) {\n    return Timestamp.class.cast(obj);\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Object",
            "Import_statements": "import java.sql.Timestamp;\n",
            "public_method_signature": "public Timestamp cast(Object obj);\npublic String format(ZapposJson zapposJson, Timestamp object);\npublic Timestamp parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Timestamp> newInstance();",
            "public_field": "",
            "Method_statement": "cast(Object obj)",
            "Method_name": "cast",
            "Class_declaration": "public class JavaTimestampFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Timestamp cast(Object obj);\npublic String format(ZapposJson zapposJson, Timestamp object);\npublic Timestamp parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Timestamp> newInstance();",
            "Class_name": "JavaTimestampFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimestampFormatter.java###cast",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.sql.Timestamp;\n\nimport java.text.SimpleDateFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public Timestamp cast(Object obj);",
            "Junit_version": "4",
            "returnType": "Timestamp"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimestampFormatter_ESTest.java###test00+++getInstance###0, JavaTimestampFormatter_ESTest.java###test00+++format###2, JavaTimestampFormatter_ESTest.java###test00+++assertEquals###2, JavaTimestampFormatter_ESTest.java###test01+++cast###1, JavaTimestampFormatter_ESTest.java###test01+++assertEquals###2, JavaTimestampFormatter_ESTest.java###test01+++getNanos###0, JavaTimestampFormatter_ESTest.java###test02+++getInstance###0, JavaTimestampFormatter_ESTest.java###test02+++parse###2, JavaTimestampFormatter_ESTest.java###test02+++cast###1, JavaTimestampFormatter_ESTest.java###test02+++assertSame###2, JavaTimestampFormatter_ESTest.java###test03+++getInstance###0, JavaTimestampFormatter_ESTest.java###test03+++verifyException###2, JavaTimestampFormatter_ESTest.java###test03+++parse###2, JavaTimestampFormatter_ESTest.java###test03+++fail###1, JavaTimestampFormatter_ESTest.java###test04+++setPattern###1, JavaTimestampFormatter_ESTest.java###test04+++verifyException###2, JavaTimestampFormatter_ESTest.java###test04+++parse###2, JavaTimestampFormatter_ESTest.java###test04+++fail###1, JavaTimestampFormatter_ESTest.java###test05+++setPattern###1, JavaTimestampFormatter_ESTest.java###test05+++getInstance###1, JavaTimestampFormatter_ESTest.java###test05+++verifyException###2, JavaTimestampFormatter_ESTest.java###test05+++parse###2, JavaTimestampFormatter_ESTest.java###test05+++fail###1, JavaTimestampFormatter_ESTest.java###test06+++cast###1, JavaTimestampFormatter_ESTest.java###test06+++fail###1, JavaTimestampFormatter_ESTest.java###test07+++setPattern###1, JavaTimestampFormatter_ESTest.java###test07+++getInstance###1, JavaTimestampFormatter_ESTest.java###test07+++verifyException###2, JavaTimestampFormatter_ESTest.java###test07+++parse###2, JavaTimestampFormatter_ESTest.java###test07+++fail###1, JavaTimestampFormatter_ESTest.java###test08+++getInstance###0, JavaTimestampFormatter_ESTest.java###test08+++parse###2, JavaTimestampFormatter_ESTest.java###test08+++assertEquals###2, JavaTimestampFormatter_ESTest.java###test08+++getNanos###0, JavaTimestampFormatter_ESTest.java###test09+++setPattern###1, JavaTimestampFormatter_ESTest.java###test09+++verifyException###2, JavaTimestampFormatter_ESTest.java###test09+++format###2, JavaTimestampFormatter_ESTest.java###test09+++fail###1, JavaTimestampFormatter_ESTest.java###test10+++verifyException###2, JavaTimestampFormatter_ESTest.java###test10+++format###2, JavaTimestampFormatter_ESTest.java###test10+++fail###1, JavaTimestampFormatter_ESTest.java###test11+++cast###1, JavaTimestampFormatter_ESTest.java###test11+++assertNull###1, JavaTimestampFormatter_ESTest.java###test12+++newInstance###0, JavaTimestampFormatter_ESTest.java###test12+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:44:18 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimestampFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimestampFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimestampFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimestampFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport java.sql.Timestamp;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimestampFormatter_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = new Timestamp(0L);\n    String string0 = javaTimestampFormatter0.format(zapposJson0, timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    Timestamp timestamp0 = new Timestamp(0L);\n    Timestamp timestamp1 = javaTimestampFormatter0.cast(timestamp0);\n    assertEquals(0, timestamp1.getNanos());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = javaTimestampFormatter0.parse(zapposJson0, \"5\");\n    Timestamp timestamp1 = javaTimestampFormatter0.cast(timestamp0);\n    assertSame(timestamp0, timestamp1);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimestampFormatter0.parse(zapposJson0, \" f\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\" f\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"\");\n    try {\n        javaTimestampFormatter0.parse((ZapposJson) null, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"com.zappos.json.format.JavaTimestampFormatter\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"com.zappos.json.format.JavaTimestampFormatter\");\n    try {\n        javaTimestampFormatter0.parse(zapposJson0, \"com.zappos.json.format.JavaTimestampFormatter\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'c'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaTimestampFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaTimestampFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = javaTimestampFormatter0.parse(zapposJson0, \"0\");\n    assertEquals(0, timestamp0.getNanos());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"<^o'taeBe\");\n    // Undeclared exception!\n    try {\n        javaTimestampFormatter0.format((ZapposJson) null, (Timestamp) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'o'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    // Undeclared exception!\n    try {\n        javaTimestampFormatter0.format((ZapposJson) null, (Timestamp) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.JavaTimestampFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    Timestamp timestamp0 = javaTimestampFormatter0.cast((Object) null);\n    assertNull(timestamp0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ValueFormatter<Timestamp> valueFormatter0 = javaTimestampFormatter0.newInstance();\n    assertNotSame(javaTimestampFormatter0, valueFormatter0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = javaTimestampFormatter0.parse(zapposJson0, \"5\");\n    Timestamp timestamp1 = javaTimestampFormatter0.cast(timestamp0);\n    assertSame(timestamp0, timestamp1);\n}",
            "TestRelevantFocal": "[parse###2, cast###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:44:18 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.sql.Timestamp;\nimport java.text.ParseException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimestampFormatter_ESTest extends JavaTimestampFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic Timestamp parse(ZapposJson zapposJson, String string) throws Exception {\n    if (getPattern() != null) {\n        return new Timestamp(new SimpleDateFormat(getPattern()).parse(string).getTime());\n    }\n    return new Timestamp(Long.parseLong(string));\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "ZapposJson,String",
            "Import_statements": "import java.sql.Timestamp;\nimport java.text.SimpleDateFormat;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public Timestamp cast(Object obj);\npublic String format(ZapposJson zapposJson, Timestamp object);\npublic Timestamp parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Timestamp> newInstance();",
            "public_field": "",
            "Method_statement": "parse(ZapposJson zapposJson, String string)",
            "Method_name": "parse",
            "Class_declaration": "public class JavaTimestampFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Timestamp cast(Object obj);\npublic String format(ZapposJson zapposJson, Timestamp object);\npublic Timestamp parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Timestamp> newInstance();",
            "Class_name": "JavaTimestampFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimestampFormatter.java###parse",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.sql.Timestamp;\n\nimport java.text.SimpleDateFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public Timestamp parse(ZapposJson zapposJson, String string) throws Exception;",
            "Junit_version": "4",
            "returnType": "Timestamp"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimestampFormatter_ESTest.java###test00+++getInstance###0, JavaTimestampFormatter_ESTest.java###test00+++format###2, JavaTimestampFormatter_ESTest.java###test00+++assertEquals###2, JavaTimestampFormatter_ESTest.java###test01+++cast###1, JavaTimestampFormatter_ESTest.java###test01+++assertEquals###2, JavaTimestampFormatter_ESTest.java###test01+++getNanos###0, JavaTimestampFormatter_ESTest.java###test02+++getInstance###0, JavaTimestampFormatter_ESTest.java###test02+++parse###2, JavaTimestampFormatter_ESTest.java###test02+++cast###1, JavaTimestampFormatter_ESTest.java###test02+++assertSame###2, JavaTimestampFormatter_ESTest.java###test03+++getInstance###0, JavaTimestampFormatter_ESTest.java###test03+++verifyException###2, JavaTimestampFormatter_ESTest.java###test03+++parse###2, JavaTimestampFormatter_ESTest.java###test03+++fail###1, JavaTimestampFormatter_ESTest.java###test04+++setPattern###1, JavaTimestampFormatter_ESTest.java###test04+++verifyException###2, JavaTimestampFormatter_ESTest.java###test04+++parse###2, JavaTimestampFormatter_ESTest.java###test04+++fail###1, JavaTimestampFormatter_ESTest.java###test05+++setPattern###1, JavaTimestampFormatter_ESTest.java###test05+++getInstance###1, JavaTimestampFormatter_ESTest.java###test05+++verifyException###2, JavaTimestampFormatter_ESTest.java###test05+++parse###2, JavaTimestampFormatter_ESTest.java###test05+++fail###1, JavaTimestampFormatter_ESTest.java###test06+++cast###1, JavaTimestampFormatter_ESTest.java###test06+++fail###1, JavaTimestampFormatter_ESTest.java###test07+++setPattern###1, JavaTimestampFormatter_ESTest.java###test07+++getInstance###1, JavaTimestampFormatter_ESTest.java###test07+++verifyException###2, JavaTimestampFormatter_ESTest.java###test07+++parse###2, JavaTimestampFormatter_ESTest.java###test07+++fail###1, JavaTimestampFormatter_ESTest.java###test08+++getInstance###0, JavaTimestampFormatter_ESTest.java###test08+++parse###2, JavaTimestampFormatter_ESTest.java###test08+++assertEquals###2, JavaTimestampFormatter_ESTest.java###test08+++getNanos###0, JavaTimestampFormatter_ESTest.java###test09+++setPattern###1, JavaTimestampFormatter_ESTest.java###test09+++verifyException###2, JavaTimestampFormatter_ESTest.java###test09+++format###2, JavaTimestampFormatter_ESTest.java###test09+++fail###1, JavaTimestampFormatter_ESTest.java###test10+++verifyException###2, JavaTimestampFormatter_ESTest.java###test10+++format###2, JavaTimestampFormatter_ESTest.java###test10+++fail###1, JavaTimestampFormatter_ESTest.java###test11+++cast###1, JavaTimestampFormatter_ESTest.java###test11+++assertNull###1, JavaTimestampFormatter_ESTest.java###test12+++newInstance###0, JavaTimestampFormatter_ESTest.java###test12+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:44:18 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimestampFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimestampFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimestampFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimestampFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport java.sql.Timestamp;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimestampFormatter_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = new Timestamp(0L);\n    String string0 = javaTimestampFormatter0.format(zapposJson0, timestamp0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    Timestamp timestamp0 = new Timestamp(0L);\n    Timestamp timestamp1 = javaTimestampFormatter0.cast(timestamp0);\n    assertEquals(0, timestamp1.getNanos());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = javaTimestampFormatter0.parse(zapposJson0, \"5\");\n    Timestamp timestamp1 = javaTimestampFormatter0.cast(timestamp0);\n    assertSame(timestamp0, timestamp1);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimestampFormatter0.parse(zapposJson0, \" f\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\" f\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"\");\n    try {\n        javaTimestampFormatter0.parse((ZapposJson) null, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"com.zappos.json.format.JavaTimestampFormatter\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"com.zappos.json.format.JavaTimestampFormatter\");\n    try {\n        javaTimestampFormatter0.parse(zapposJson0, \"com.zappos.json.format.JavaTimestampFormatter\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'c'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaTimestampFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaTimestampFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = javaTimestampFormatter0.parse(zapposJson0, \"0\");\n    assertEquals(0, timestamp0.getNanos());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    javaTimestampFormatter0.setPattern(\"<^o'taeBe\");\n    // Undeclared exception!\n    try {\n        javaTimestampFormatter0.format((ZapposJson) null, (Timestamp) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'o'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    // Undeclared exception!\n    try {\n        javaTimestampFormatter0.format((ZapposJson) null, (Timestamp) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.JavaTimestampFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    Timestamp timestamp0 = javaTimestampFormatter0.cast((Object) null);\n    assertNull(timestamp0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ValueFormatter<Timestamp> valueFormatter0 = javaTimestampFormatter0.newInstance();\n    assertNotSame(javaTimestampFormatter0, valueFormatter0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Timestamp timestamp0 = javaTimestampFormatter0.parse(zapposJson0, \"5\");\n    Timestamp timestamp1 = javaTimestampFormatter0.cast(timestamp0);\n    assertSame(timestamp0, timestamp1);\n}",
            "TestRelevantFocal": "[parse###2, cast###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:44:18 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.sql.Timestamp;\nimport java.text.ParseException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimestampFormatter_ESTest extends JavaTimestampFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic ValueFormatter<T> setPattern(String pattern) {\n    this.pattern = pattern;\n    return this;\n}",
            "all_field_declaration": "private String pattern;\nprivate boolean jsString = true;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private String pattern;",
            "Parameter_type": "String",
            "Import_statements": "",
            "public_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "public_field": "",
            "Method_statement": "setPattern(String pattern)",
            "Method_name": "setPattern",
            "Class_declaration": "public  abstract class AbstractValueFormatter {\n",
            "constructors": "",
            "all_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "Class_name": "AbstractValueFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/AbstractValueFormatter.java###setPattern",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport com.zappos.json.JsonWriter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public ValueFormatter<T> setPattern(String pattern);",
            "Junit_version": "4",
            "returnType": "ValueFormatter<T>"
        },
        "Test_method": {
            "AllTest2Focal": "[AbstractValueFormatter_ESTest.java###test00+++setPattern###1, AbstractValueFormatter_ESTest.java###test00+++getPattern###0, AbstractValueFormatter_ESTest.java###test00+++assertTrue###1, AbstractValueFormatter_ESTest.java###test00+++isJsString###0, AbstractValueFormatter_ESTest.java###test01+++setPattern###1, AbstractValueFormatter_ESTest.java###test01+++getPattern###0, AbstractValueFormatter_ESTest.java###test01+++assertTrue###1, AbstractValueFormatter_ESTest.java###test01+++isJsString###0, AbstractValueFormatter_ESTest.java###test02+++verifyException###2, AbstractValueFormatter_ESTest.java###test02+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test02+++fail###1, AbstractValueFormatter_ESTest.java###test03+++verifyException###2, AbstractValueFormatter_ESTest.java###test03+++formatObject###2, AbstractValueFormatter_ESTest.java###test03+++fail###1, AbstractValueFormatter_ESTest.java###test04+++getInstance###0, AbstractValueFormatter_ESTest.java###test04+++formatObject###2, AbstractValueFormatter_ESTest.java###test04+++fail###1, AbstractValueFormatter_ESTest.java###test05+++getInstance###1, AbstractValueFormatter_ESTest.java###test05+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test05+++assertEquals###2, AbstractValueFormatter_ESTest.java###test06+++getPattern###0, AbstractValueFormatter_ESTest.java###test06+++assertTrue###1, AbstractValueFormatter_ESTest.java###test06+++isJsString###0, AbstractValueFormatter_ESTest.java###test07+++getInstance###1, AbstractValueFormatter_ESTest.java###test07+++ofDays###1, AbstractValueFormatter_ESTest.java###test07+++getChronology###0, AbstractValueFormatter_ESTest.java###test07+++ofHoursMinutesSeconds###3, AbstractValueFormatter_ESTest.java###test07+++tickMinutes###1, AbstractValueFormatter_ESTest.java###test07+++dateNow###1, AbstractValueFormatter_ESTest.java###test07+++formatObject###2, AbstractValueFormatter_ESTest.java###test07+++assertEquals###2, AbstractValueFormatter_ESTest.java###test08+++assertTrue###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test08+++getInstance###0, AbstractValueFormatter_ESTest.java###test08+++setJsString###1, AbstractValueFormatter_ESTest.java###test08+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test08+++assertFalse###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++setJsString###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++assertFalse###1, AbstractValueFormatter_ESTest.java###test11+++verifyException###2, AbstractValueFormatter_ESTest.java###test11+++formatObject###2, AbstractValueFormatter_ESTest.java###test11+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:29:33 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class AbstractValueFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.AbstractValueFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.NoOpValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/AbstractValueFormatter_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"EW]EY<\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.toJsonValue((ZapposJson) null, \"`&\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.JsonUtils\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject(zapposJson0, zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\",bbWO21-fur>&ib\");\n    String string0 = javaTimestampFormatter0.toJsonValue(zapposJson0, \",bbWO21-fur>&ib\");\n    assertEquals(\"\\\",bbWO21-fur>&ib\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"VezqWorr+Eqzgsa\");\n    Period period0 = Period.ofDays(0);\n    IsoChronology isoChronology0 = period0.getChronology();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(1, 0, 1);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow(clock0);\n    String string0 = javaTimeLocalDateFormatter0.formatObject(zapposJson0, chronoLocalDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    noOpValueFormatter0.setJsString(false);\n    noOpValueFormatter0.toJsonValue(zapposJson0, \"\");\n    assertFalse(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    noOpValueFormatter0.setJsString(false);\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigIntegerFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}",
            "TestRelevantFocal": "[setPattern###1, getPattern###0, isJsString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:29:33 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport java.time.Clock;\nimport java.time.Period;\nimport java.time.ZoneOffset;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.chrono.IsoChronology;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class AbstractValueFormatter_ESTest extends AbstractValueFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public String getPattern() {\n    return pattern;\n}",
            "all_field_declaration": "private String pattern;\nprivate boolean jsString = true;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private String pattern;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "public_field": "",
            "Method_statement": "getPattern()",
            "Method_name": "getPattern",
            "Class_declaration": "public  abstract class AbstractValueFormatter {\n",
            "constructors": "",
            "all_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "Class_name": "AbstractValueFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/AbstractValueFormatter.java###getPattern",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport com.zappos.json.JsonWriter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String getPattern();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[AbstractValueFormatter_ESTest.java###test00+++setPattern###1, AbstractValueFormatter_ESTest.java###test00+++getPattern###0, AbstractValueFormatter_ESTest.java###test00+++assertTrue###1, AbstractValueFormatter_ESTest.java###test00+++isJsString###0, AbstractValueFormatter_ESTest.java###test01+++setPattern###1, AbstractValueFormatter_ESTest.java###test01+++getPattern###0, AbstractValueFormatter_ESTest.java###test01+++assertTrue###1, AbstractValueFormatter_ESTest.java###test01+++isJsString###0, AbstractValueFormatter_ESTest.java###test02+++verifyException###2, AbstractValueFormatter_ESTest.java###test02+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test02+++fail###1, AbstractValueFormatter_ESTest.java###test03+++verifyException###2, AbstractValueFormatter_ESTest.java###test03+++formatObject###2, AbstractValueFormatter_ESTest.java###test03+++fail###1, AbstractValueFormatter_ESTest.java###test04+++getInstance###0, AbstractValueFormatter_ESTest.java###test04+++formatObject###2, AbstractValueFormatter_ESTest.java###test04+++fail###1, AbstractValueFormatter_ESTest.java###test05+++getInstance###1, AbstractValueFormatter_ESTest.java###test05+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test05+++assertEquals###2, AbstractValueFormatter_ESTest.java###test06+++getPattern###0, AbstractValueFormatter_ESTest.java###test06+++assertTrue###1, AbstractValueFormatter_ESTest.java###test06+++isJsString###0, AbstractValueFormatter_ESTest.java###test07+++getInstance###1, AbstractValueFormatter_ESTest.java###test07+++ofDays###1, AbstractValueFormatter_ESTest.java###test07+++getChronology###0, AbstractValueFormatter_ESTest.java###test07+++ofHoursMinutesSeconds###3, AbstractValueFormatter_ESTest.java###test07+++tickMinutes###1, AbstractValueFormatter_ESTest.java###test07+++dateNow###1, AbstractValueFormatter_ESTest.java###test07+++formatObject###2, AbstractValueFormatter_ESTest.java###test07+++assertEquals###2, AbstractValueFormatter_ESTest.java###test08+++assertTrue###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test08+++getInstance###0, AbstractValueFormatter_ESTest.java###test08+++setJsString###1, AbstractValueFormatter_ESTest.java###test08+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test08+++assertFalse###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++setJsString###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++assertFalse###1, AbstractValueFormatter_ESTest.java###test11+++verifyException###2, AbstractValueFormatter_ESTest.java###test11+++formatObject###2, AbstractValueFormatter_ESTest.java###test11+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:29:33 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class AbstractValueFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.AbstractValueFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.NoOpValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/AbstractValueFormatter_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"EW]EY<\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.toJsonValue((ZapposJson) null, \"`&\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.JsonUtils\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject(zapposJson0, zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\",bbWO21-fur>&ib\");\n    String string0 = javaTimestampFormatter0.toJsonValue(zapposJson0, \",bbWO21-fur>&ib\");\n    assertEquals(\"\\\",bbWO21-fur>&ib\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"VezqWorr+Eqzgsa\");\n    Period period0 = Period.ofDays(0);\n    IsoChronology isoChronology0 = period0.getChronology();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(1, 0, 1);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow(clock0);\n    String string0 = javaTimeLocalDateFormatter0.formatObject(zapposJson0, chronoLocalDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    noOpValueFormatter0.setJsString(false);\n    noOpValueFormatter0.toJsonValue(zapposJson0, \"\");\n    assertFalse(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    noOpValueFormatter0.setJsString(false);\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigIntegerFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}",
            "TestRelevantFocal": "[setPattern###1, getPattern###0, isJsString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:29:33 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport java.time.Clock;\nimport java.time.Period;\nimport java.time.ZoneOffset;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.chrono.IsoChronology;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class AbstractValueFormatter_ESTest extends AbstractValueFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public boolean isJsString() {\n    return jsString;\n}",
            "all_field_declaration": "private String pattern;\nprivate boolean jsString = true;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private boolean jsString = true;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "public_field": "",
            "Method_statement": "isJsString()",
            "Method_name": "isJsString",
            "Class_declaration": "public  abstract class AbstractValueFormatter {\n",
            "constructors": "",
            "all_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "Class_name": "AbstractValueFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/AbstractValueFormatter.java###isJsString",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport com.zappos.json.JsonWriter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "\r\n   * \r\n   * @return boolean indicating string or else\r\n   ",
            "packageName": "com.zappos.json.format",
            "method_signature": "public boolean isJsString();",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[AbstractValueFormatter_ESTest.java###test00+++setPattern###1, AbstractValueFormatter_ESTest.java###test00+++getPattern###0, AbstractValueFormatter_ESTest.java###test00+++assertTrue###1, AbstractValueFormatter_ESTest.java###test00+++isJsString###0, AbstractValueFormatter_ESTest.java###test01+++setPattern###1, AbstractValueFormatter_ESTest.java###test01+++getPattern###0, AbstractValueFormatter_ESTest.java###test01+++assertTrue###1, AbstractValueFormatter_ESTest.java###test01+++isJsString###0, AbstractValueFormatter_ESTest.java###test02+++verifyException###2, AbstractValueFormatter_ESTest.java###test02+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test02+++fail###1, AbstractValueFormatter_ESTest.java###test03+++verifyException###2, AbstractValueFormatter_ESTest.java###test03+++formatObject###2, AbstractValueFormatter_ESTest.java###test03+++fail###1, AbstractValueFormatter_ESTest.java###test04+++getInstance###0, AbstractValueFormatter_ESTest.java###test04+++formatObject###2, AbstractValueFormatter_ESTest.java###test04+++fail###1, AbstractValueFormatter_ESTest.java###test05+++getInstance###1, AbstractValueFormatter_ESTest.java###test05+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test05+++assertEquals###2, AbstractValueFormatter_ESTest.java###test06+++getPattern###0, AbstractValueFormatter_ESTest.java###test06+++assertTrue###1, AbstractValueFormatter_ESTest.java###test06+++isJsString###0, AbstractValueFormatter_ESTest.java###test07+++getInstance###1, AbstractValueFormatter_ESTest.java###test07+++ofDays###1, AbstractValueFormatter_ESTest.java###test07+++getChronology###0, AbstractValueFormatter_ESTest.java###test07+++ofHoursMinutesSeconds###3, AbstractValueFormatter_ESTest.java###test07+++tickMinutes###1, AbstractValueFormatter_ESTest.java###test07+++dateNow###1, AbstractValueFormatter_ESTest.java###test07+++formatObject###2, AbstractValueFormatter_ESTest.java###test07+++assertEquals###2, AbstractValueFormatter_ESTest.java###test08+++assertTrue###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test08+++getInstance###0, AbstractValueFormatter_ESTest.java###test08+++setJsString###1, AbstractValueFormatter_ESTest.java###test08+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test08+++assertFalse###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++setJsString###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++assertFalse###1, AbstractValueFormatter_ESTest.java###test11+++verifyException###2, AbstractValueFormatter_ESTest.java###test11+++formatObject###2, AbstractValueFormatter_ESTest.java###test11+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:29:33 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class AbstractValueFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.AbstractValueFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.NoOpValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/AbstractValueFormatter_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"EW]EY<\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.toJsonValue((ZapposJson) null, \"`&\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.JsonUtils\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject(zapposJson0, zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\",bbWO21-fur>&ib\");\n    String string0 = javaTimestampFormatter0.toJsonValue(zapposJson0, \",bbWO21-fur>&ib\");\n    assertEquals(\"\\\",bbWO21-fur>&ib\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"VezqWorr+Eqzgsa\");\n    Period period0 = Period.ofDays(0);\n    IsoChronology isoChronology0 = period0.getChronology();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(1, 0, 1);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow(clock0);\n    String string0 = javaTimeLocalDateFormatter0.formatObject(zapposJson0, chronoLocalDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    noOpValueFormatter0.setJsString(false);\n    noOpValueFormatter0.toJsonValue(zapposJson0, \"\");\n    assertFalse(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    noOpValueFormatter0.setJsString(false);\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigIntegerFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}",
            "TestRelevantFocal": "[setPattern###1, getPattern###0, isJsString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:29:33 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport java.time.Clock;\nimport java.time.Period;\nimport java.time.ZoneOffset;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.chrono.IsoChronology;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class AbstractValueFormatter_ESTest extends AbstractValueFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public String toJsonValue(ZapposJson zapposJson, String value) {\n    if (jsString) {\n        StringWriter writer = new StringWriter();\n        try {\n            JsonWriter.writeString(zapposJson, value, writer);\n        } catch (IOException e) {\n        }\n        return writer.toString();\n    } else {\n        return value;\n    }\n}",
            "all_field_declaration": "private String pattern;\nprivate boolean jsString = true;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private boolean jsString = true;",
            "Parameter_type": "ZapposJson,String",
            "Import_statements": "import java.io.IOException;\nimport java.io.StringWriter;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "public_field": "",
            "Method_statement": "toJsonValue(ZapposJson zapposJson, String value)",
            "Method_name": "toJsonValue",
            "Class_declaration": "public  abstract class AbstractValueFormatter {\n",
            "constructors": "",
            "all_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "Class_name": "AbstractValueFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/AbstractValueFormatter.java###toJsonValue",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport com.zappos.json.JsonWriter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "\r\n   * \r\n   * @param zapposJson the instance of @{../ZapposJson}\r\n   * @param value JSON value in string format\r\n   * @return the string representing JSON value\r\n   ",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String toJsonValue(ZapposJson zapposJson, String value);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[AbstractValueFormatter_ESTest.java###test00+++setPattern###1, AbstractValueFormatter_ESTest.java###test00+++getPattern###0, AbstractValueFormatter_ESTest.java###test00+++assertTrue###1, AbstractValueFormatter_ESTest.java###test00+++isJsString###0, AbstractValueFormatter_ESTest.java###test01+++setPattern###1, AbstractValueFormatter_ESTest.java###test01+++getPattern###0, AbstractValueFormatter_ESTest.java###test01+++assertTrue###1, AbstractValueFormatter_ESTest.java###test01+++isJsString###0, AbstractValueFormatter_ESTest.java###test02+++verifyException###2, AbstractValueFormatter_ESTest.java###test02+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test02+++fail###1, AbstractValueFormatter_ESTest.java###test03+++verifyException###2, AbstractValueFormatter_ESTest.java###test03+++formatObject###2, AbstractValueFormatter_ESTest.java###test03+++fail###1, AbstractValueFormatter_ESTest.java###test04+++getInstance###0, AbstractValueFormatter_ESTest.java###test04+++formatObject###2, AbstractValueFormatter_ESTest.java###test04+++fail###1, AbstractValueFormatter_ESTest.java###test05+++getInstance###1, AbstractValueFormatter_ESTest.java###test05+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test05+++assertEquals###2, AbstractValueFormatter_ESTest.java###test06+++getPattern###0, AbstractValueFormatter_ESTest.java###test06+++assertTrue###1, AbstractValueFormatter_ESTest.java###test06+++isJsString###0, AbstractValueFormatter_ESTest.java###test07+++getInstance###1, AbstractValueFormatter_ESTest.java###test07+++ofDays###1, AbstractValueFormatter_ESTest.java###test07+++getChronology###0, AbstractValueFormatter_ESTest.java###test07+++ofHoursMinutesSeconds###3, AbstractValueFormatter_ESTest.java###test07+++tickMinutes###1, AbstractValueFormatter_ESTest.java###test07+++dateNow###1, AbstractValueFormatter_ESTest.java###test07+++formatObject###2, AbstractValueFormatter_ESTest.java###test07+++assertEquals###2, AbstractValueFormatter_ESTest.java###test08+++assertTrue###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test08+++getInstance###0, AbstractValueFormatter_ESTest.java###test08+++setJsString###1, AbstractValueFormatter_ESTest.java###test08+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test08+++assertFalse###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++setJsString###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++assertFalse###1, AbstractValueFormatter_ESTest.java###test11+++verifyException###2, AbstractValueFormatter_ESTest.java###test11+++formatObject###2, AbstractValueFormatter_ESTest.java###test11+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:29:33 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class AbstractValueFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.AbstractValueFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.NoOpValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/AbstractValueFormatter_ESTest.java###test08",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"EW]EY<\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.toJsonValue((ZapposJson) null, \"`&\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.JsonUtils\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject(zapposJson0, zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\",bbWO21-fur>&ib\");\n    String string0 = javaTimestampFormatter0.toJsonValue(zapposJson0, \",bbWO21-fur>&ib\");\n    assertEquals(\"\\\",bbWO21-fur>&ib\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"VezqWorr+Eqzgsa\");\n    Period period0 = Period.ofDays(0);\n    IsoChronology isoChronology0 = period0.getChronology();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(1, 0, 1);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow(clock0);\n    String string0 = javaTimeLocalDateFormatter0.formatObject(zapposJson0, chronoLocalDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    noOpValueFormatter0.setJsString(false);\n    noOpValueFormatter0.toJsonValue(zapposJson0, \"\");\n    assertFalse(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    noOpValueFormatter0.setJsString(false);\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigIntegerFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    noOpValueFormatter0.setJsString(false);\n    noOpValueFormatter0.toJsonValue(zapposJson0, \"\");\n    assertFalse(noOpValueFormatter0.isJsString());\n}",
            "TestRelevantFocal": "[isJsString###0, setJsString###1, toJsonValue###2, isJsString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:29:33 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport java.time.Clock;\nimport java.time.Period;\nimport java.time.ZoneOffset;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.chrono.IsoChronology;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class AbstractValueFormatter_ESTest extends AbstractValueFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String formatObject(ZapposJson zapposJson, Object object) {\n    return format(zapposJson, cast(object));\n}",
            "all_field_declaration": "private String pattern;\nprivate boolean jsString = true;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "ZapposJson,Object",
            "Import_statements": "import com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "public_field": "",
            "Method_statement": "formatObject(ZapposJson zapposJson, Object object)",
            "Method_name": "formatObject",
            "Class_declaration": "public  abstract class AbstractValueFormatter {\n",
            "constructors": "",
            "all_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "Class_name": "AbstractValueFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/AbstractValueFormatter.java###formatObject",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport com.zappos.json.JsonWriter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String formatObject(ZapposJson zapposJson, Object object);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[AbstractValueFormatter_ESTest.java###test00+++setPattern###1, AbstractValueFormatter_ESTest.java###test00+++getPattern###0, AbstractValueFormatter_ESTest.java###test00+++assertTrue###1, AbstractValueFormatter_ESTest.java###test00+++isJsString###0, AbstractValueFormatter_ESTest.java###test01+++setPattern###1, AbstractValueFormatter_ESTest.java###test01+++getPattern###0, AbstractValueFormatter_ESTest.java###test01+++assertTrue###1, AbstractValueFormatter_ESTest.java###test01+++isJsString###0, AbstractValueFormatter_ESTest.java###test02+++verifyException###2, AbstractValueFormatter_ESTest.java###test02+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test02+++fail###1, AbstractValueFormatter_ESTest.java###test03+++verifyException###2, AbstractValueFormatter_ESTest.java###test03+++formatObject###2, AbstractValueFormatter_ESTest.java###test03+++fail###1, AbstractValueFormatter_ESTest.java###test04+++getInstance###0, AbstractValueFormatter_ESTest.java###test04+++formatObject###2, AbstractValueFormatter_ESTest.java###test04+++fail###1, AbstractValueFormatter_ESTest.java###test05+++getInstance###1, AbstractValueFormatter_ESTest.java###test05+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test05+++assertEquals###2, AbstractValueFormatter_ESTest.java###test06+++getPattern###0, AbstractValueFormatter_ESTest.java###test06+++assertTrue###1, AbstractValueFormatter_ESTest.java###test06+++isJsString###0, AbstractValueFormatter_ESTest.java###test07+++getInstance###1, AbstractValueFormatter_ESTest.java###test07+++ofDays###1, AbstractValueFormatter_ESTest.java###test07+++getChronology###0, AbstractValueFormatter_ESTest.java###test07+++ofHoursMinutesSeconds###3, AbstractValueFormatter_ESTest.java###test07+++tickMinutes###1, AbstractValueFormatter_ESTest.java###test07+++dateNow###1, AbstractValueFormatter_ESTest.java###test07+++formatObject###2, AbstractValueFormatter_ESTest.java###test07+++assertEquals###2, AbstractValueFormatter_ESTest.java###test08+++assertTrue###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test08+++getInstance###0, AbstractValueFormatter_ESTest.java###test08+++setJsString###1, AbstractValueFormatter_ESTest.java###test08+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test08+++assertFalse###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++setJsString###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++assertFalse###1, AbstractValueFormatter_ESTest.java###test11+++verifyException###2, AbstractValueFormatter_ESTest.java###test11+++formatObject###2, AbstractValueFormatter_ESTest.java###test11+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:29:33 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class AbstractValueFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.AbstractValueFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/AbstractValueFormatter_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"EW]EY<\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.toJsonValue((ZapposJson) null, \"`&\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.JsonUtils\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject(zapposJson0, zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\",bbWO21-fur>&ib\");\n    String string0 = javaTimestampFormatter0.toJsonValue(zapposJson0, \",bbWO21-fur>&ib\");\n    assertEquals(\"\\\",bbWO21-fur>&ib\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"VezqWorr+Eqzgsa\");\n    Period period0 = Period.ofDays(0);\n    IsoChronology isoChronology0 = period0.getChronology();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(1, 0, 1);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow(clock0);\n    String string0 = javaTimeLocalDateFormatter0.formatObject(zapposJson0, chronoLocalDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    noOpValueFormatter0.setJsString(false);\n    noOpValueFormatter0.toJsonValue(zapposJson0, \"\");\n    assertFalse(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    noOpValueFormatter0.setJsString(false);\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigIntegerFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject(zapposJson0, zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}",
            "TestRelevantFocal": "[formatObject###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:29:33 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport java.time.Clock;\nimport java.time.Period;\nimport java.time.ZoneOffset;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.chrono.IsoChronology;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class AbstractValueFormatter_ESTest extends AbstractValueFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setJsString(boolean jsString) {\n    this.jsString = jsString;\n}",
            "all_field_declaration": "private String pattern;\nprivate boolean jsString = true;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private boolean jsString = true;",
            "Parameter_type": "boolean",
            "Import_statements": "",
            "public_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "public_field": "",
            "Method_statement": "setJsString(boolean jsString)",
            "Method_name": "setJsString",
            "Class_declaration": "public  abstract class AbstractValueFormatter {\n",
            "constructors": "",
            "all_method_signature": "public String formatObject(ZapposJson zapposJson, Object object);\npublic ValueFormatter<T> setPattern(String pattern);\npublic String getPattern();\npublic String toJsonValue(ZapposJson zapposJson, String value);\npublic void setJsString(boolean jsString);\npublic boolean isJsString();",
            "Class_name": "AbstractValueFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/AbstractValueFormatter.java###setJsString",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport com.zappos.json.JsonWriter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public void setJsString(boolean jsString);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[AbstractValueFormatter_ESTest.java###test00+++setPattern###1, AbstractValueFormatter_ESTest.java###test00+++getPattern###0, AbstractValueFormatter_ESTest.java###test00+++assertTrue###1, AbstractValueFormatter_ESTest.java###test00+++isJsString###0, AbstractValueFormatter_ESTest.java###test01+++setPattern###1, AbstractValueFormatter_ESTest.java###test01+++getPattern###0, AbstractValueFormatter_ESTest.java###test01+++assertTrue###1, AbstractValueFormatter_ESTest.java###test01+++isJsString###0, AbstractValueFormatter_ESTest.java###test02+++verifyException###2, AbstractValueFormatter_ESTest.java###test02+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test02+++fail###1, AbstractValueFormatter_ESTest.java###test03+++verifyException###2, AbstractValueFormatter_ESTest.java###test03+++formatObject###2, AbstractValueFormatter_ESTest.java###test03+++fail###1, AbstractValueFormatter_ESTest.java###test04+++getInstance###0, AbstractValueFormatter_ESTest.java###test04+++formatObject###2, AbstractValueFormatter_ESTest.java###test04+++fail###1, AbstractValueFormatter_ESTest.java###test05+++getInstance###1, AbstractValueFormatter_ESTest.java###test05+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test05+++assertEquals###2, AbstractValueFormatter_ESTest.java###test06+++getPattern###0, AbstractValueFormatter_ESTest.java###test06+++assertTrue###1, AbstractValueFormatter_ESTest.java###test06+++isJsString###0, AbstractValueFormatter_ESTest.java###test07+++getInstance###1, AbstractValueFormatter_ESTest.java###test07+++ofDays###1, AbstractValueFormatter_ESTest.java###test07+++getChronology###0, AbstractValueFormatter_ESTest.java###test07+++ofHoursMinutesSeconds###3, AbstractValueFormatter_ESTest.java###test07+++tickMinutes###1, AbstractValueFormatter_ESTest.java###test07+++dateNow###1, AbstractValueFormatter_ESTest.java###test07+++formatObject###2, AbstractValueFormatter_ESTest.java###test07+++assertEquals###2, AbstractValueFormatter_ESTest.java###test08+++assertTrue###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test08+++getInstance###0, AbstractValueFormatter_ESTest.java###test08+++setJsString###1, AbstractValueFormatter_ESTest.java###test08+++toJsonValue###2, AbstractValueFormatter_ESTest.java###test08+++assertFalse###1, AbstractValueFormatter_ESTest.java###test08+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++isJsString###0, AbstractValueFormatter_ESTest.java###test09+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++assertTrue###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++setJsString###1, AbstractValueFormatter_ESTest.java###test10+++isJsString###0, AbstractValueFormatter_ESTest.java###test10+++assertFalse###1, AbstractValueFormatter_ESTest.java###test11+++verifyException###2, AbstractValueFormatter_ESTest.java###test11+++formatObject###2, AbstractValueFormatter_ESTest.java###test11+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:29:33 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class AbstractValueFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.AbstractValueFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractValueFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.NoOpValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/AbstractValueFormatter_ESTest.java###test08",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"EW]EY<\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.setPattern(\"\");\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.toJsonValue((ZapposJson) null, \"`&\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.util.JsonUtils\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject(zapposJson0, zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\",bbWO21-fur>&ib\");\n    String string0 = javaTimestampFormatter0.toJsonValue(zapposJson0, \",bbWO21-fur>&ib\");\n    assertEquals(\"\\\",bbWO21-fur>&ib\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    noOpValueFormatter0.getPattern();\n    assertTrue(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"VezqWorr+Eqzgsa\");\n    Period period0 = Period.ofDays(0);\n    IsoChronology isoChronology0 = period0.getChronology();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(1, 0, 1);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow(clock0);\n    String string0 = javaTimeLocalDateFormatter0.formatObject(zapposJson0, chronoLocalDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    noOpValueFormatter0.setJsString(false);\n    noOpValueFormatter0.toJsonValue(zapposJson0, \"\");\n    assertFalse(noOpValueFormatter0.isJsString());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    noOpValueFormatter0.setJsString(false);\n    boolean boolean0 = noOpValueFormatter0.isJsString();\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.formatObject((ZapposJson) null, (Object) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigIntegerFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    assertTrue(noOpValueFormatter0.isJsString());\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    noOpValueFormatter0.setJsString(false);\n    noOpValueFormatter0.toJsonValue(zapposJson0, \"\");\n    assertFalse(noOpValueFormatter0.isJsString());\n}",
            "TestRelevantFocal": "[isJsString###0, setJsString###1, toJsonValue###2, isJsString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:29:33 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.JavaTimestampFormatter;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport java.time.Clock;\nimport java.time.Period;\nimport java.time.ZoneOffset;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.chrono.IsoChronology;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class AbstractValueFormatter_ESTest extends AbstractValueFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic ValueFormatter<LocalDate> setPattern(String pattern) {\n    super.setPattern(pattern);\n    formatter = DateTimeFormatter.ofPattern(pattern).withZone(ZoneId.systemDefault());\n    return this;\n}",
            "all_field_declaration": "private DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "private DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE;",
            "Parameter_type": "String",
            "Import_statements": "import java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\n",
            "public_method_signature": "public LocalDate cast(Object obj);\npublic String format(ZapposJson zapposJson, LocalDate object);\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<LocalDate> setPattern(String pattern);\npublic ValueFormatter<LocalDate> newInstance();",
            "public_field": "",
            "Method_statement": "setPattern(String pattern)",
            "Method_name": "setPattern",
            "Class_declaration": "public class JavaTimeLocalDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public LocalDate cast(Object obj);\npublic String format(ZapposJson zapposJson, LocalDate object);\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<LocalDate> setPattern(String pattern);\npublic ValueFormatter<LocalDate> newInstance();",
            "Class_name": "JavaTimeLocalDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimeLocalDateFormatter.java###setPattern",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.time.LocalDate;\n\nimport java.time.ZoneId;\n\nimport java.time.format.DateTimeFormatter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public ValueFormatter<LocalDate> setPattern(String pattern);",
            "Junit_version": "4",
            "returnType": "ValueFormatter<LocalDate>"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimeLocalDateFormatter_ESTest.java###test00+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test00+++ofTotalSeconds###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++tickMinutes###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++setJsString###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test00+++assertEquals###2, JavaTimeLocalDateFormatter_ESTest.java###test01+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test01+++assertNull###1, JavaTimeLocalDateFormatter_ESTest.java###test02+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test02+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test02+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test03+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test03+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test03+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test04+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test04+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test04+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test05+++getInstance###1, JavaTimeLocalDateFormatter_ESTest.java###test05+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test05+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test05+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test06+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test06+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test06+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test07+++getInstance###1, JavaTimeLocalDateFormatter_ESTest.java###test07+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test07+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test07+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test08+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test08+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test08+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test09+++newInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test09+++assertNotSame###2, JavaTimeLocalDateFormatter_ESTest.java###test10+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test10+++ofTotalSeconds###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++tickMinutes###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test10+++assertEquals###2, JavaTimeLocalDateFormatter_ESTest.java###test11+++ofEpochDay###1, JavaTimeLocalDateFormatter_ESTest.java###test11+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test11+++assertSame###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test12+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test12+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test13+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test13+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test13+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test13+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:42:08 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimeLocalDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimeLocalDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimeLocalDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimeLocalDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport java.time.Clock;\nimport java.time.LocalDate;\nimport java.time.ZoneOffset;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimeLocalDateFormatter_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    javaTimeLocalDateFormatter0.setJsString(false);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = javaTimeLocalDateFormatter0.cast((Object) null);\n    assertNull(localDate0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // pattern\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern(\"qs3'4]V`bTG[e:](T\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Pattern ends with an incomplete string literal: qs3'4]V`bTG[e:](T\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern(\"GpAD-gK?*J,R)bY`k{r\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator cannot be cast to java.time.format.DateTimeFormatterBuilder$NumberPrinterParser\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // text\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"+!&4-L~%a\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MAX;\n    LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n        fail(\"Expecting exception: UnsupportedTemporalTypeException\");\n    } catch (UnsupportedTemporalTypeException e) {\n        // \n        // Unsupported field: AmPmOfDay\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"_U89~\");\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.format(zapposJson0, (LocalDate) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // temporal\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.cast(zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ValueFormatter<LocalDate> valueFormatter0 = javaTimeLocalDateFormatter0.newInstance();\n    assertNotSame(javaTimeLocalDateFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);\n    LocalDate localDate1 = javaTimeLocalDateFormatter0.cast(localDate0);\n    assertSame(localDate1, localDate0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain LocalDate from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    javaTimeLocalDateFormatter0.setJsString(false);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\", string0);\n}",
            "TestRelevantFocal": "[setPattern###1, format###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:42:08 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.Clock;\nimport java.time.DateTimeException;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeParseException;\nimport java.time.temporal.UnsupportedTemporalTypeException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimeLocalDateFormatter_ESTest extends JavaTimeLocalDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String format(ZapposJson zapposJson, LocalDate object) {\n    return toJsonValue(zapposJson, formatter.format(object));\n}",
            "all_field_declaration": "private DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE;",
            "Parameter_type": "ZapposJson,LocalDate",
            "Import_statements": "import java.time.LocalDate;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public LocalDate cast(Object obj);\npublic String format(ZapposJson zapposJson, LocalDate object);\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<LocalDate> setPattern(String pattern);\npublic ValueFormatter<LocalDate> newInstance();",
            "public_field": "",
            "Method_statement": "format(ZapposJson zapposJson, LocalDate object)",
            "Method_name": "format",
            "Class_declaration": "public class JavaTimeLocalDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public LocalDate cast(Object obj);\npublic String format(ZapposJson zapposJson, LocalDate object);\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<LocalDate> setPattern(String pattern);\npublic ValueFormatter<LocalDate> newInstance();",
            "Class_name": "JavaTimeLocalDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimeLocalDateFormatter.java###format",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.time.LocalDate;\n\nimport java.time.ZoneId;\n\nimport java.time.format.DateTimeFormatter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String format(ZapposJson zapposJson, LocalDate object);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimeLocalDateFormatter_ESTest.java###test00+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test00+++ofTotalSeconds###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++tickMinutes###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++setJsString###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test00+++assertEquals###2, JavaTimeLocalDateFormatter_ESTest.java###test01+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test01+++assertNull###1, JavaTimeLocalDateFormatter_ESTest.java###test02+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test02+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test02+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test03+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test03+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test03+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test04+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test04+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test04+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test05+++getInstance###1, JavaTimeLocalDateFormatter_ESTest.java###test05+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test05+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test05+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test06+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test06+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test06+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test07+++getInstance###1, JavaTimeLocalDateFormatter_ESTest.java###test07+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test07+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test07+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test08+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test08+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test08+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test09+++newInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test09+++assertNotSame###2, JavaTimeLocalDateFormatter_ESTest.java###test10+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test10+++ofTotalSeconds###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++tickMinutes###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test10+++assertEquals###2, JavaTimeLocalDateFormatter_ESTest.java###test11+++ofEpochDay###1, JavaTimeLocalDateFormatter_ESTest.java###test11+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test11+++assertSame###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test12+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test12+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test13+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test13+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test13+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test13+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:42:08 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimeLocalDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimeLocalDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimeLocalDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimeLocalDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport java.time.Clock;\nimport java.time.LocalDate;\nimport java.time.ZoneOffset;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimeLocalDateFormatter_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    javaTimeLocalDateFormatter0.setJsString(false);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = javaTimeLocalDateFormatter0.cast((Object) null);\n    assertNull(localDate0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // pattern\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern(\"qs3'4]V`bTG[e:](T\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Pattern ends with an incomplete string literal: qs3'4]V`bTG[e:](T\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern(\"GpAD-gK?*J,R)bY`k{r\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator cannot be cast to java.time.format.DateTimeFormatterBuilder$NumberPrinterParser\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // text\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"+!&4-L~%a\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MAX;\n    LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n        fail(\"Expecting exception: UnsupportedTemporalTypeException\");\n    } catch (UnsupportedTemporalTypeException e) {\n        // \n        // Unsupported field: AmPmOfDay\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"_U89~\");\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.format(zapposJson0, (LocalDate) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // temporal\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.cast(zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ValueFormatter<LocalDate> valueFormatter0 = javaTimeLocalDateFormatter0.newInstance();\n    assertNotSame(javaTimeLocalDateFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);\n    LocalDate localDate1 = javaTimeLocalDateFormatter0.cast(localDate0);\n    assertSame(localDate1, localDate0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain LocalDate from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    javaTimeLocalDateFormatter0.setJsString(false);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\", string0);\n}",
            "TestRelevantFocal": "[setPattern###1, format###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:42:08 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.Clock;\nimport java.time.DateTimeException;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeParseException;\nimport java.time.temporal.UnsupportedTemporalTypeException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimeLocalDateFormatter_ESTest extends JavaTimeLocalDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic LocalDate cast(Object obj) {\n    return LocalDate.class.cast(obj);\n}",
            "all_field_declaration": "private DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Object",
            "Import_statements": "import java.time.LocalDate;\n",
            "public_method_signature": "public LocalDate cast(Object obj);\npublic String format(ZapposJson zapposJson, LocalDate object);\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<LocalDate> setPattern(String pattern);\npublic ValueFormatter<LocalDate> newInstance();",
            "public_field": "",
            "Method_statement": "cast(Object obj)",
            "Method_name": "cast",
            "Class_declaration": "public class JavaTimeLocalDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public LocalDate cast(Object obj);\npublic String format(ZapposJson zapposJson, LocalDate object);\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<LocalDate> setPattern(String pattern);\npublic ValueFormatter<LocalDate> newInstance();",
            "Class_name": "JavaTimeLocalDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimeLocalDateFormatter.java###cast",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.time.LocalDate;\n\nimport java.time.ZoneId;\n\nimport java.time.format.DateTimeFormatter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public LocalDate cast(Object obj);",
            "Junit_version": "4",
            "returnType": "LocalDate"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimeLocalDateFormatter_ESTest.java###test00+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test00+++ofTotalSeconds###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++tickMinutes###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++setJsString###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test00+++assertEquals###2, JavaTimeLocalDateFormatter_ESTest.java###test01+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test01+++assertNull###1, JavaTimeLocalDateFormatter_ESTest.java###test02+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test02+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test02+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test03+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test03+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test03+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test04+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test04+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test04+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test05+++getInstance###1, JavaTimeLocalDateFormatter_ESTest.java###test05+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test05+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test05+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test06+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test06+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test06+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test07+++getInstance###1, JavaTimeLocalDateFormatter_ESTest.java###test07+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test07+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test07+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test08+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test08+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test08+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test09+++newInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test09+++assertNotSame###2, JavaTimeLocalDateFormatter_ESTest.java###test10+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test10+++ofTotalSeconds###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++tickMinutes###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test10+++assertEquals###2, JavaTimeLocalDateFormatter_ESTest.java###test11+++ofEpochDay###1, JavaTimeLocalDateFormatter_ESTest.java###test11+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test11+++assertSame###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test12+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test12+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test13+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test13+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test13+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test13+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:42:08 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimeLocalDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimeLocalDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimeLocalDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimeLocalDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport java.time.LocalDate;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimeLocalDateFormatter_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    javaTimeLocalDateFormatter0.setJsString(false);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = javaTimeLocalDateFormatter0.cast((Object) null);\n    assertNull(localDate0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // pattern\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern(\"qs3'4]V`bTG[e:](T\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Pattern ends with an incomplete string literal: qs3'4]V`bTG[e:](T\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern(\"GpAD-gK?*J,R)bY`k{r\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator cannot be cast to java.time.format.DateTimeFormatterBuilder$NumberPrinterParser\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // text\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"+!&4-L~%a\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MAX;\n    LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n        fail(\"Expecting exception: UnsupportedTemporalTypeException\");\n    } catch (UnsupportedTemporalTypeException e) {\n        // \n        // Unsupported field: AmPmOfDay\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"_U89~\");\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.format(zapposJson0, (LocalDate) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // temporal\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.cast(zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ValueFormatter<LocalDate> valueFormatter0 = javaTimeLocalDateFormatter0.newInstance();\n    assertNotSame(javaTimeLocalDateFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);\n    LocalDate localDate1 = javaTimeLocalDateFormatter0.cast(localDate0);\n    assertSame(localDate1, localDate0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain LocalDate from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = javaTimeLocalDateFormatter0.cast((Object) null);\n    assertNull(localDate0);\n}",
            "TestRelevantFocal": "[cast###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:42:08 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.Clock;\nimport java.time.DateTimeException;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeParseException;\nimport java.time.temporal.UnsupportedTemporalTypeException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimeLocalDateFormatter_ESTest extends JavaTimeLocalDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception {\n    return LocalDate.from(formatter.parse(string));\n}",
            "all_field_declaration": "private DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "private DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE;",
            "Parameter_type": "ZapposJson,String",
            "Import_statements": "import java.time.LocalDate;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public LocalDate cast(Object obj);\npublic String format(ZapposJson zapposJson, LocalDate object);\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<LocalDate> setPattern(String pattern);\npublic ValueFormatter<LocalDate> newInstance();",
            "public_field": "",
            "Method_statement": "parse(ZapposJson zapposJson, String string)",
            "Method_name": "parse",
            "Class_declaration": "public class JavaTimeLocalDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public LocalDate cast(Object obj);\npublic String format(ZapposJson zapposJson, LocalDate object);\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<LocalDate> setPattern(String pattern);\npublic ValueFormatter<LocalDate> newInstance();",
            "Class_name": "JavaTimeLocalDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimeLocalDateFormatter.java###parse",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.time.LocalDate;\n\nimport java.time.ZoneId;\n\nimport java.time.format.DateTimeFormatter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public LocalDate parse(ZapposJson zapposJson, String string) throws Exception;",
            "Junit_version": "4",
            "returnType": "LocalDate"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimeLocalDateFormatter_ESTest.java###test00+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test00+++ofTotalSeconds###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++tickMinutes###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++setJsString###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test00+++assertEquals###2, JavaTimeLocalDateFormatter_ESTest.java###test01+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test01+++assertNull###1, JavaTimeLocalDateFormatter_ESTest.java###test02+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test02+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test02+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test03+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test03+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test03+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test04+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test04+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test04+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test05+++getInstance###1, JavaTimeLocalDateFormatter_ESTest.java###test05+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test05+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test05+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test06+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test06+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test06+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test07+++getInstance###1, JavaTimeLocalDateFormatter_ESTest.java###test07+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test07+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test07+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test08+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test08+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test08+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test09+++newInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test09+++assertNotSame###2, JavaTimeLocalDateFormatter_ESTest.java###test10+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test10+++ofTotalSeconds###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++tickMinutes###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test10+++assertEquals###2, JavaTimeLocalDateFormatter_ESTest.java###test11+++ofEpochDay###1, JavaTimeLocalDateFormatter_ESTest.java###test11+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test11+++assertSame###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test12+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test12+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test13+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test13+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test13+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test13+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:42:08 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimeLocalDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimeLocalDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimeLocalDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimeLocalDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport java.time.DateTimeException;\nimport java.time.LocalDate;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimeLocalDateFormatter_ESTest.java###test12",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    javaTimeLocalDateFormatter0.setJsString(false);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = javaTimeLocalDateFormatter0.cast((Object) null);\n    assertNull(localDate0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // pattern\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern(\"qs3'4]V`bTG[e:](T\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Pattern ends with an incomplete string literal: qs3'4]V`bTG[e:](T\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern(\"GpAD-gK?*J,R)bY`k{r\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator cannot be cast to java.time.format.DateTimeFormatterBuilder$NumberPrinterParser\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // text\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"+!&4-L~%a\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MAX;\n    LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n        fail(\"Expecting exception: UnsupportedTemporalTypeException\");\n    } catch (UnsupportedTemporalTypeException e) {\n        // \n        // Unsupported field: AmPmOfDay\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"_U89~\");\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.format(zapposJson0, (LocalDate) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // temporal\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.cast(zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ValueFormatter<LocalDate> valueFormatter0 = javaTimeLocalDateFormatter0.newInstance();\n    assertNotSame(javaTimeLocalDateFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);\n    LocalDate localDate1 = javaTimeLocalDateFormatter0.cast(localDate0);\n    assertSame(localDate1, localDate0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain LocalDate from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain LocalDate from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}",
            "TestRelevantFocal": "[setPattern###1, parse###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:42:08 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.Clock;\nimport java.time.DateTimeException;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeParseException;\nimport java.time.temporal.UnsupportedTemporalTypeException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimeLocalDateFormatter_ESTest extends JavaTimeLocalDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic ValueFormatter<LocalDate> newInstance() {\n    return new JavaTimeLocalDateFormatter();\n}",
            "all_field_declaration": "private DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "import java.time.LocalDate;\n",
            "public_method_signature": "public LocalDate cast(Object obj);\npublic String format(ZapposJson zapposJson, LocalDate object);\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<LocalDate> setPattern(String pattern);\npublic ValueFormatter<LocalDate> newInstance();",
            "public_field": "",
            "Method_statement": "newInstance()",
            "Method_name": "newInstance",
            "Class_declaration": "public class JavaTimeLocalDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public LocalDate cast(Object obj);\npublic String format(ZapposJson zapposJson, LocalDate object);\npublic LocalDate parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<LocalDate> setPattern(String pattern);\npublic ValueFormatter<LocalDate> newInstance();",
            "Class_name": "JavaTimeLocalDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimeLocalDateFormatter.java###newInstance",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.time.LocalDate;\n\nimport java.time.ZoneId;\n\nimport java.time.format.DateTimeFormatter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public ValueFormatter<LocalDate> newInstance();",
            "Junit_version": "4",
            "returnType": "ValueFormatter<LocalDate>"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimeLocalDateFormatter_ESTest.java###test00+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test00+++ofTotalSeconds###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++tickMinutes###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++setJsString###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test00+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test00+++assertEquals###2, JavaTimeLocalDateFormatter_ESTest.java###test01+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test01+++assertNull###1, JavaTimeLocalDateFormatter_ESTest.java###test02+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test02+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test02+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test03+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test03+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test03+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test04+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test04+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test04+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test05+++getInstance###1, JavaTimeLocalDateFormatter_ESTest.java###test05+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test05+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test05+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test06+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test06+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test06+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test06+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test07+++getInstance###1, JavaTimeLocalDateFormatter_ESTest.java###test07+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test07+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test07+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test08+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test08+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test08+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test09+++newInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test09+++assertNotSame###2, JavaTimeLocalDateFormatter_ESTest.java###test10+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test10+++ofTotalSeconds###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++tickMinutes###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++now###1, JavaTimeLocalDateFormatter_ESTest.java###test10+++format###2, JavaTimeLocalDateFormatter_ESTest.java###test10+++assertEquals###2, JavaTimeLocalDateFormatter_ESTest.java###test11+++ofEpochDay###1, JavaTimeLocalDateFormatter_ESTest.java###test11+++cast###1, JavaTimeLocalDateFormatter_ESTest.java###test11+++assertSame###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++setPattern###1, JavaTimeLocalDateFormatter_ESTest.java###test12+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test12+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test12+++fail###1, JavaTimeLocalDateFormatter_ESTest.java###test13+++getInstance###0, JavaTimeLocalDateFormatter_ESTest.java###test13+++verifyException###2, JavaTimeLocalDateFormatter_ESTest.java###test13+++parse###2, JavaTimeLocalDateFormatter_ESTest.java###test13+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:42:08 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimeLocalDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimeLocalDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimeLocalDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimeLocalDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.LocalDate;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimeLocalDateFormatter_ESTest.java###test09",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    javaTimeLocalDateFormatter0.setJsString(false);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = javaTimeLocalDateFormatter0.cast((Object) null);\n    assertNull(localDate0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // pattern\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern(\"qs3'4]V`bTG[e:](T\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Pattern ends with an incomplete string literal: qs3'4]V`bTG[e:](T\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.setPattern(\"GpAD-gK?*J,R)bY`k{r\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator cannot be cast to java.time.format.DateTimeFormatterBuilder$NumberPrinterParser\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // text\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"+!&4-L~%a\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MAX;\n    LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n        fail(\"Expecting exception: UnsupportedTemporalTypeException\");\n    } catch (UnsupportedTemporalTypeException e) {\n        // \n        // Unsupported field: AmPmOfDay\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"_U89~\");\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.format(zapposJson0, (LocalDate) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // temporal\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeLocalDateFormatter0.cast(zapposJson0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ValueFormatter<LocalDate> valueFormatter0 = javaTimeLocalDateFormatter0.newInstance();\n    assertNotSame(javaTimeLocalDateFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(241);\n    Clock clock0 = MockClock.tickMinutes(zoneOffset0);\n    LocalDate localDate0 = MockLocalDate.now(clock0);\n    String string0 = javaTimeLocalDateFormatter0.format(zapposJson0, localDate0);\n    assertEquals(\"\\\"2014-02-14\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);\n    LocalDate localDate1 = javaTimeLocalDateFormatter0.cast(localDate0);\n    assertSame(localDate1, localDate0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    javaTimeLocalDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain LocalDate from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.LocalDate\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeLocalDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();\n    ValueFormatter<LocalDate> valueFormatter0 = javaTimeLocalDateFormatter0.newInstance();\n    assertNotSame(javaTimeLocalDateFormatter0, valueFormatter0);\n}",
            "TestRelevantFocal": "[newInstance###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:42:08 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeLocalDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.Clock;\nimport java.time.DateTimeException;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeParseException;\nimport java.time.temporal.UnsupportedTemporalTypeException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimeLocalDateFormatter_ESTest extends JavaTimeLocalDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic ValueFormatter<Instant> setPattern(String pattern) {\n    super.setPattern(pattern);\n    formatter = DateTimeFormatter.ofPattern(pattern).withZone(ZoneId.systemDefault());\n    return this;\n}",
            "all_field_declaration": "/**\n * This class is thread-safe\n */\nprivate DateTimeFormatter formatter = null;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "private DateTimeFormatter formatter = null;",
            "Parameter_type": "String",
            "Import_statements": "import java.time.Instant;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\n",
            "public_method_signature": "public Instant cast(Object obj);\npublic String format(ZapposJson zapposJson, Instant object);\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Instant> setPattern(String pattern);\npublic ValueFormatter<Instant> newInstance();",
            "public_field": "",
            "Method_statement": "setPattern(String pattern)",
            "Method_name": "setPattern",
            "Class_declaration": "public class JavaTimeInstantFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Instant cast(Object obj);\npublic String format(ZapposJson zapposJson, Instant object);\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Instant> setPattern(String pattern);\npublic ValueFormatter<Instant> newInstance();",
            "Class_name": "JavaTimeInstantFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimeInstantFormatter.java###setPattern",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.time.Instant;\n\nimport java.time.ZoneId;\n\nimport java.time.format.DateTimeFormatter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public ValueFormatter<Instant> setPattern(String pattern);",
            "Junit_version": "4",
            "returnType": "ValueFormatter<Instant>"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimeInstantFormatter_ESTest.java###test00+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test00+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test00+++setJsString###1, JavaTimeInstantFormatter_ESTest.java###test00+++ofEpochMilli###1, JavaTimeInstantFormatter_ESTest.java###test00+++format###2, JavaTimeInstantFormatter_ESTest.java###test00+++assertEquals###2, JavaTimeInstantFormatter_ESTest.java###test01+++cast###1, JavaTimeInstantFormatter_ESTest.java###test01+++assertNull###1, JavaTimeInstantFormatter_ESTest.java###test02+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test02+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test02+++fail###1, JavaTimeInstantFormatter_ESTest.java###test03+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test03+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test03+++fail###1, JavaTimeInstantFormatter_ESTest.java###test04+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test04+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test04+++fail###1, JavaTimeInstantFormatter_ESTest.java###test05+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test05+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test05+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test05+++parse###2, JavaTimeInstantFormatter_ESTest.java###test05+++fail###1, JavaTimeInstantFormatter_ESTest.java###test06+++getInstance###1, JavaTimeInstantFormatter_ESTest.java###test06+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test06+++parse###2, JavaTimeInstantFormatter_ESTest.java###test06+++fail###1, JavaTimeInstantFormatter_ESTest.java###test07+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test07+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test07+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test07+++parse###2, JavaTimeInstantFormatter_ESTest.java###test07+++fail###1, JavaTimeInstantFormatter_ESTest.java###test08+++cast###1, JavaTimeInstantFormatter_ESTest.java###test08+++fail###1, JavaTimeInstantFormatter_ESTest.java###test09+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test09+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test09+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test09+++parse###2, JavaTimeInstantFormatter_ESTest.java###test09+++fail###1, JavaTimeInstantFormatter_ESTest.java###test10+++getInstance###1, JavaTimeInstantFormatter_ESTest.java###test10+++parse###2, JavaTimeInstantFormatter_ESTest.java###test10+++assertNotNull###1, JavaTimeInstantFormatter_ESTest.java###test11+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test11+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test11+++ofEpochMilli###1, JavaTimeInstantFormatter_ESTest.java###test11+++format###2, JavaTimeInstantFormatter_ESTest.java###test11+++assertEquals###2, JavaTimeInstantFormatter_ESTest.java###test12+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test12+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test12+++format###2, JavaTimeInstantFormatter_ESTest.java###test12+++fail###1, JavaTimeInstantFormatter_ESTest.java###test13+++newInstance###0, JavaTimeInstantFormatter_ESTest.java###test13+++assertNotSame###2, JavaTimeInstantFormatter_ESTest.java###test14+++toInstant###0, JavaTimeInstantFormatter_ESTest.java###test14+++cast###1, JavaTimeInstantFormatter_ESTest.java###test14+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:40:01 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimeInstantFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimeInstantFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimeInstantFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimeInstantFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.time.Instant;\nimport java.time.format.DateTimeParseException;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimeInstantFormatter_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    javaTimeInstantFormatter0.setJsString(false);\n    Instant instant0 = MockInstant.ofEpochMilli(0L);\n    String string0 = javaTimeInstantFormatter0.format(zapposJson0, instant0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    Instant instant0 = javaTimeInstantFormatter0.cast((Object) null);\n    assertNull(instant0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // pattern\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern(\"NoOp\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Unknown pattern letter: o\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern(\"upqA\\\"y/tq7Re\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator cannot be cast to java.time.format.DateTimeFormatterBuilder$NumberPrinterParser\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"1323000\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"__value\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '__value' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"0;-uGc)*0\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"0;-uGc)*0\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"0;-uGc)*0\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"case \");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // text\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.cast(\"1392409281320\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain Instant from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.Instant\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    Instant instant0 = javaTimeInstantFormatter0.parse(zapposJson0, \"1392409281320\");\n    assertNotNull(instant0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    Instant instant0 = MockInstant.ofEpochMilli(0L);\n    String string0 = javaTimeInstantFormatter0.format(zapposJson0, instant0);\n    assertEquals(\"\\\"\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.format(zapposJson0, (Instant) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"org.evosuite.runtime.mock.java.time.MockInstant\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ValueFormatter<Instant> valueFormatter0 = javaTimeInstantFormatter0.newInstance();\n    assertNotSame(javaTimeInstantFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    MockDate mockDate0 = new MockDate();\n    Instant instant0 = mockDate0.toInstant();\n    Instant instant1 = javaTimeInstantFormatter0.cast(instant0);\n    assertSame(instant0, instant1);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"1323000\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"__value\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '__value' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}",
            "TestRelevantFocal": "[setPattern###1, parse###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:40:01 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.DateTimeException;\nimport java.time.Instant;\nimport java.time.format.DateTimeParseException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimeInstantFormatter_ESTest extends JavaTimeInstantFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String format(ZapposJson zapposJson, Instant object) {\n    if (formatter != null) {\n        return toJsonValue(zapposJson, formatter.format(object));\n    }\n    return String.valueOf(object.toEpochMilli());\n}",
            "all_field_declaration": "/**\n * This class is thread-safe\n */\nprivate DateTimeFormatter formatter = null;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private DateTimeFormatter formatter = null;",
            "Parameter_type": "ZapposJson,Instant",
            "Import_statements": "import java.time.Instant;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public Instant cast(Object obj);\npublic String format(ZapposJson zapposJson, Instant object);\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Instant> setPattern(String pattern);\npublic ValueFormatter<Instant> newInstance();",
            "public_field": "",
            "Method_statement": "format(ZapposJson zapposJson, Instant object)",
            "Method_name": "format",
            "Class_declaration": "public class JavaTimeInstantFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Instant cast(Object obj);\npublic String format(ZapposJson zapposJson, Instant object);\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Instant> setPattern(String pattern);\npublic ValueFormatter<Instant> newInstance();",
            "Class_name": "JavaTimeInstantFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimeInstantFormatter.java###format",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.time.Instant;\n\nimport java.time.ZoneId;\n\nimport java.time.format.DateTimeFormatter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String format(ZapposJson zapposJson, Instant object);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimeInstantFormatter_ESTest.java###test00+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test00+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test00+++setJsString###1, JavaTimeInstantFormatter_ESTest.java###test00+++ofEpochMilli###1, JavaTimeInstantFormatter_ESTest.java###test00+++format###2, JavaTimeInstantFormatter_ESTest.java###test00+++assertEquals###2, JavaTimeInstantFormatter_ESTest.java###test01+++cast###1, JavaTimeInstantFormatter_ESTest.java###test01+++assertNull###1, JavaTimeInstantFormatter_ESTest.java###test02+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test02+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test02+++fail###1, JavaTimeInstantFormatter_ESTest.java###test03+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test03+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test03+++fail###1, JavaTimeInstantFormatter_ESTest.java###test04+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test04+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test04+++fail###1, JavaTimeInstantFormatter_ESTest.java###test05+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test05+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test05+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test05+++parse###2, JavaTimeInstantFormatter_ESTest.java###test05+++fail###1, JavaTimeInstantFormatter_ESTest.java###test06+++getInstance###1, JavaTimeInstantFormatter_ESTest.java###test06+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test06+++parse###2, JavaTimeInstantFormatter_ESTest.java###test06+++fail###1, JavaTimeInstantFormatter_ESTest.java###test07+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test07+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test07+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test07+++parse###2, JavaTimeInstantFormatter_ESTest.java###test07+++fail###1, JavaTimeInstantFormatter_ESTest.java###test08+++cast###1, JavaTimeInstantFormatter_ESTest.java###test08+++fail###1, JavaTimeInstantFormatter_ESTest.java###test09+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test09+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test09+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test09+++parse###2, JavaTimeInstantFormatter_ESTest.java###test09+++fail###1, JavaTimeInstantFormatter_ESTest.java###test10+++getInstance###1, JavaTimeInstantFormatter_ESTest.java###test10+++parse###2, JavaTimeInstantFormatter_ESTest.java###test10+++assertNotNull###1, JavaTimeInstantFormatter_ESTest.java###test11+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test11+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test11+++ofEpochMilli###1, JavaTimeInstantFormatter_ESTest.java###test11+++format###2, JavaTimeInstantFormatter_ESTest.java###test11+++assertEquals###2, JavaTimeInstantFormatter_ESTest.java###test12+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test12+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test12+++format###2, JavaTimeInstantFormatter_ESTest.java###test12+++fail###1, JavaTimeInstantFormatter_ESTest.java###test13+++newInstance###0, JavaTimeInstantFormatter_ESTest.java###test13+++assertNotSame###2, JavaTimeInstantFormatter_ESTest.java###test14+++toInstant###0, JavaTimeInstantFormatter_ESTest.java###test14+++cast###1, JavaTimeInstantFormatter_ESTest.java###test14+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:40:01 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimeInstantFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimeInstantFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimeInstantFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimeInstantFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.time.Instant;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimeInstantFormatter_ESTest.java###test12",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    javaTimeInstantFormatter0.setJsString(false);\n    Instant instant0 = MockInstant.ofEpochMilli(0L);\n    String string0 = javaTimeInstantFormatter0.format(zapposJson0, instant0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    Instant instant0 = javaTimeInstantFormatter0.cast((Object) null);\n    assertNull(instant0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // pattern\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern(\"NoOp\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Unknown pattern letter: o\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern(\"upqA\\\"y/tq7Re\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator cannot be cast to java.time.format.DateTimeFormatterBuilder$NumberPrinterParser\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"1323000\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"__value\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '__value' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"0;-uGc)*0\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"0;-uGc)*0\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"0;-uGc)*0\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"case \");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // text\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.cast(\"1392409281320\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain Instant from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.Instant\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    Instant instant0 = javaTimeInstantFormatter0.parse(zapposJson0, \"1392409281320\");\n    assertNotNull(instant0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    Instant instant0 = MockInstant.ofEpochMilli(0L);\n    String string0 = javaTimeInstantFormatter0.format(zapposJson0, instant0);\n    assertEquals(\"\\\"\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.format(zapposJson0, (Instant) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"org.evosuite.runtime.mock.java.time.MockInstant\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ValueFormatter<Instant> valueFormatter0 = javaTimeInstantFormatter0.newInstance();\n    assertNotSame(javaTimeInstantFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    MockDate mockDate0 = new MockDate();\n    Instant instant0 = mockDate0.toInstant();\n    Instant instant1 = javaTimeInstantFormatter0.cast(instant0);\n    assertSame(instant0, instant1);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.format(zapposJson0, (Instant) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"org.evosuite.runtime.mock.java.time.MockInstant\", e);\n    }\n}",
            "TestRelevantFocal": "[format###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:40:01 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.DateTimeException;\nimport java.time.Instant;\nimport java.time.format.DateTimeParseException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimeInstantFormatter_ESTest extends JavaTimeInstantFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic Instant cast(Object obj) {\n    return Instant.class.cast(obj);\n}",
            "all_field_declaration": "/**\n * This class is thread-safe\n */\nprivate DateTimeFormatter formatter = null;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Object",
            "Import_statements": "import java.time.Instant;\n",
            "public_method_signature": "public Instant cast(Object obj);\npublic String format(ZapposJson zapposJson, Instant object);\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Instant> setPattern(String pattern);\npublic ValueFormatter<Instant> newInstance();",
            "public_field": "",
            "Method_statement": "cast(Object obj)",
            "Method_name": "cast",
            "Class_declaration": "public class JavaTimeInstantFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Instant cast(Object obj);\npublic String format(ZapposJson zapposJson, Instant object);\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Instant> setPattern(String pattern);\npublic ValueFormatter<Instant> newInstance();",
            "Class_name": "JavaTimeInstantFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimeInstantFormatter.java###cast",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.time.Instant;\n\nimport java.time.ZoneId;\n\nimport java.time.format.DateTimeFormatter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public Instant cast(Object obj);",
            "Junit_version": "4",
            "returnType": "Instant"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimeInstantFormatter_ESTest.java###test00+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test00+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test00+++setJsString###1, JavaTimeInstantFormatter_ESTest.java###test00+++ofEpochMilli###1, JavaTimeInstantFormatter_ESTest.java###test00+++format###2, JavaTimeInstantFormatter_ESTest.java###test00+++assertEquals###2, JavaTimeInstantFormatter_ESTest.java###test01+++cast###1, JavaTimeInstantFormatter_ESTest.java###test01+++assertNull###1, JavaTimeInstantFormatter_ESTest.java###test02+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test02+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test02+++fail###1, JavaTimeInstantFormatter_ESTest.java###test03+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test03+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test03+++fail###1, JavaTimeInstantFormatter_ESTest.java###test04+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test04+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test04+++fail###1, JavaTimeInstantFormatter_ESTest.java###test05+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test05+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test05+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test05+++parse###2, JavaTimeInstantFormatter_ESTest.java###test05+++fail###1, JavaTimeInstantFormatter_ESTest.java###test06+++getInstance###1, JavaTimeInstantFormatter_ESTest.java###test06+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test06+++parse###2, JavaTimeInstantFormatter_ESTest.java###test06+++fail###1, JavaTimeInstantFormatter_ESTest.java###test07+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test07+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test07+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test07+++parse###2, JavaTimeInstantFormatter_ESTest.java###test07+++fail###1, JavaTimeInstantFormatter_ESTest.java###test08+++cast###1, JavaTimeInstantFormatter_ESTest.java###test08+++fail###1, JavaTimeInstantFormatter_ESTest.java###test09+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test09+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test09+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test09+++parse###2, JavaTimeInstantFormatter_ESTest.java###test09+++fail###1, JavaTimeInstantFormatter_ESTest.java###test10+++getInstance###1, JavaTimeInstantFormatter_ESTest.java###test10+++parse###2, JavaTimeInstantFormatter_ESTest.java###test10+++assertNotNull###1, JavaTimeInstantFormatter_ESTest.java###test11+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test11+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test11+++ofEpochMilli###1, JavaTimeInstantFormatter_ESTest.java###test11+++format###2, JavaTimeInstantFormatter_ESTest.java###test11+++assertEquals###2, JavaTimeInstantFormatter_ESTest.java###test12+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test12+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test12+++format###2, JavaTimeInstantFormatter_ESTest.java###test12+++fail###1, JavaTimeInstantFormatter_ESTest.java###test13+++newInstance###0, JavaTimeInstantFormatter_ESTest.java###test13+++assertNotSame###2, JavaTimeInstantFormatter_ESTest.java###test14+++toInstant###0, JavaTimeInstantFormatter_ESTest.java###test14+++cast###1, JavaTimeInstantFormatter_ESTest.java###test14+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:40:01 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimeInstantFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimeInstantFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimeInstantFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimeInstantFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.time.Instant;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimeInstantFormatter_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    javaTimeInstantFormatter0.setJsString(false);\n    Instant instant0 = MockInstant.ofEpochMilli(0L);\n    String string0 = javaTimeInstantFormatter0.format(zapposJson0, instant0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    Instant instant0 = javaTimeInstantFormatter0.cast((Object) null);\n    assertNull(instant0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // pattern\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern(\"NoOp\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Unknown pattern letter: o\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern(\"upqA\\\"y/tq7Re\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator cannot be cast to java.time.format.DateTimeFormatterBuilder$NumberPrinterParser\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"1323000\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"__value\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '__value' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"0;-uGc)*0\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"0;-uGc)*0\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"0;-uGc)*0\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"case \");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // text\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.cast(\"1392409281320\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain Instant from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.Instant\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    Instant instant0 = javaTimeInstantFormatter0.parse(zapposJson0, \"1392409281320\");\n    assertNotNull(instant0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    Instant instant0 = MockInstant.ofEpochMilli(0L);\n    String string0 = javaTimeInstantFormatter0.format(zapposJson0, instant0);\n    assertEquals(\"\\\"\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.format(zapposJson0, (Instant) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"org.evosuite.runtime.mock.java.time.MockInstant\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ValueFormatter<Instant> valueFormatter0 = javaTimeInstantFormatter0.newInstance();\n    assertNotSame(javaTimeInstantFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    MockDate mockDate0 = new MockDate();\n    Instant instant0 = mockDate0.toInstant();\n    Instant instant1 = javaTimeInstantFormatter0.cast(instant0);\n    assertSame(instant0, instant1);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    Instant instant0 = javaTimeInstantFormatter0.cast((Object) null);\n    assertNull(instant0);\n}",
            "TestRelevantFocal": "[cast###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:40:01 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.DateTimeException;\nimport java.time.Instant;\nimport java.time.format.DateTimeParseException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimeInstantFormatter_ESTest extends JavaTimeInstantFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception {\n    if (formatter != null) {\n        return Instant.from(formatter.parse(string));\n    }\n    return Instant.ofEpochMilli(Long.parseLong(string));\n}",
            "all_field_declaration": "/**\n * This class is thread-safe\n */\nprivate DateTimeFormatter formatter = null;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "private DateTimeFormatter formatter = null;",
            "Parameter_type": "ZapposJson,String",
            "Import_statements": "import java.time.Instant;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public Instant cast(Object obj);\npublic String format(ZapposJson zapposJson, Instant object);\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Instant> setPattern(String pattern);\npublic ValueFormatter<Instant> newInstance();",
            "public_field": "",
            "Method_statement": "parse(ZapposJson zapposJson, String string)",
            "Method_name": "parse",
            "Class_declaration": "public class JavaTimeInstantFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Instant cast(Object obj);\npublic String format(ZapposJson zapposJson, Instant object);\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Instant> setPattern(String pattern);\npublic ValueFormatter<Instant> newInstance();",
            "Class_name": "JavaTimeInstantFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimeInstantFormatter.java###parse",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.time.Instant;\n\nimport java.time.ZoneId;\n\nimport java.time.format.DateTimeFormatter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public Instant parse(ZapposJson zapposJson, String string) throws Exception;",
            "Junit_version": "4",
            "returnType": "Instant"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimeInstantFormatter_ESTest.java###test00+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test00+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test00+++setJsString###1, JavaTimeInstantFormatter_ESTest.java###test00+++ofEpochMilli###1, JavaTimeInstantFormatter_ESTest.java###test00+++format###2, JavaTimeInstantFormatter_ESTest.java###test00+++assertEquals###2, JavaTimeInstantFormatter_ESTest.java###test01+++cast###1, JavaTimeInstantFormatter_ESTest.java###test01+++assertNull###1, JavaTimeInstantFormatter_ESTest.java###test02+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test02+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test02+++fail###1, JavaTimeInstantFormatter_ESTest.java###test03+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test03+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test03+++fail###1, JavaTimeInstantFormatter_ESTest.java###test04+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test04+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test04+++fail###1, JavaTimeInstantFormatter_ESTest.java###test05+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test05+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test05+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test05+++parse###2, JavaTimeInstantFormatter_ESTest.java###test05+++fail###1, JavaTimeInstantFormatter_ESTest.java###test06+++getInstance###1, JavaTimeInstantFormatter_ESTest.java###test06+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test06+++parse###2, JavaTimeInstantFormatter_ESTest.java###test06+++fail###1, JavaTimeInstantFormatter_ESTest.java###test07+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test07+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test07+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test07+++parse###2, JavaTimeInstantFormatter_ESTest.java###test07+++fail###1, JavaTimeInstantFormatter_ESTest.java###test08+++cast###1, JavaTimeInstantFormatter_ESTest.java###test08+++fail###1, JavaTimeInstantFormatter_ESTest.java###test09+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test09+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test09+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test09+++parse###2, JavaTimeInstantFormatter_ESTest.java###test09+++fail###1, JavaTimeInstantFormatter_ESTest.java###test10+++getInstance###1, JavaTimeInstantFormatter_ESTest.java###test10+++parse###2, JavaTimeInstantFormatter_ESTest.java###test10+++assertNotNull###1, JavaTimeInstantFormatter_ESTest.java###test11+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test11+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test11+++ofEpochMilli###1, JavaTimeInstantFormatter_ESTest.java###test11+++format###2, JavaTimeInstantFormatter_ESTest.java###test11+++assertEquals###2, JavaTimeInstantFormatter_ESTest.java###test12+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test12+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test12+++format###2, JavaTimeInstantFormatter_ESTest.java###test12+++fail###1, JavaTimeInstantFormatter_ESTest.java###test13+++newInstance###0, JavaTimeInstantFormatter_ESTest.java###test13+++assertNotSame###2, JavaTimeInstantFormatter_ESTest.java###test14+++toInstant###0, JavaTimeInstantFormatter_ESTest.java###test14+++cast###1, JavaTimeInstantFormatter_ESTest.java###test14+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:40:01 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimeInstantFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimeInstantFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimeInstantFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimeInstantFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport java.time.Instant;\nimport java.time.format.DateTimeParseException;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimeInstantFormatter_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    javaTimeInstantFormatter0.setJsString(false);\n    Instant instant0 = MockInstant.ofEpochMilli(0L);\n    String string0 = javaTimeInstantFormatter0.format(zapposJson0, instant0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    Instant instant0 = javaTimeInstantFormatter0.cast((Object) null);\n    assertNull(instant0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // pattern\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern(\"NoOp\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Unknown pattern letter: o\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern(\"upqA\\\"y/tq7Re\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator cannot be cast to java.time.format.DateTimeFormatterBuilder$NumberPrinterParser\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"1323000\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"__value\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '__value' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"0;-uGc)*0\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"0;-uGc)*0\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"0;-uGc)*0\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"case \");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // text\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.cast(\"1392409281320\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain Instant from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.Instant\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    Instant instant0 = javaTimeInstantFormatter0.parse(zapposJson0, \"1392409281320\");\n    assertNotNull(instant0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    Instant instant0 = MockInstant.ofEpochMilli(0L);\n    String string0 = javaTimeInstantFormatter0.format(zapposJson0, instant0);\n    assertEquals(\"\\\"\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.format(zapposJson0, (Instant) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"org.evosuite.runtime.mock.java.time.MockInstant\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ValueFormatter<Instant> valueFormatter0 = javaTimeInstantFormatter0.newInstance();\n    assertNotSame(javaTimeInstantFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    MockDate mockDate0 = new MockDate();\n    Instant instant0 = mockDate0.toInstant();\n    Instant instant1 = javaTimeInstantFormatter0.cast(instant0);\n    assertSame(instant0, instant1);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"1323000\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"__value\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '__value' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}",
            "TestRelevantFocal": "[setPattern###1, parse###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:40:01 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.DateTimeException;\nimport java.time.Instant;\nimport java.time.format.DateTimeParseException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimeInstantFormatter_ESTest extends JavaTimeInstantFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic ValueFormatter<Instant> newInstance() {\n    return new JavaTimeInstantFormatter();\n}",
            "all_field_declaration": "/**\n * This class is thread-safe\n */\nprivate DateTimeFormatter formatter = null;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "import java.time.Instant;\n",
            "public_method_signature": "public Instant cast(Object obj);\npublic String format(ZapposJson zapposJson, Instant object);\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Instant> setPattern(String pattern);\npublic ValueFormatter<Instant> newInstance();",
            "public_field": "",
            "Method_statement": "newInstance()",
            "Method_name": "newInstance",
            "Class_declaration": "public class JavaTimeInstantFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Instant cast(Object obj);\npublic String format(ZapposJson zapposJson, Instant object);\npublic Instant parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Instant> setPattern(String pattern);\npublic ValueFormatter<Instant> newInstance();",
            "Class_name": "JavaTimeInstantFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaTimeInstantFormatter.java###newInstance",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.time.Instant;\n\nimport java.time.ZoneId;\n\nimport java.time.format.DateTimeFormatter;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public ValueFormatter<Instant> newInstance();",
            "Junit_version": "4",
            "returnType": "ValueFormatter<Instant>"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaTimeInstantFormatter_ESTest.java###test00+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test00+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test00+++setJsString###1, JavaTimeInstantFormatter_ESTest.java###test00+++ofEpochMilli###1, JavaTimeInstantFormatter_ESTest.java###test00+++format###2, JavaTimeInstantFormatter_ESTest.java###test00+++assertEquals###2, JavaTimeInstantFormatter_ESTest.java###test01+++cast###1, JavaTimeInstantFormatter_ESTest.java###test01+++assertNull###1, JavaTimeInstantFormatter_ESTest.java###test02+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test02+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test02+++fail###1, JavaTimeInstantFormatter_ESTest.java###test03+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test03+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test03+++fail###1, JavaTimeInstantFormatter_ESTest.java###test04+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test04+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test04+++fail###1, JavaTimeInstantFormatter_ESTest.java###test05+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test05+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test05+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test05+++parse###2, JavaTimeInstantFormatter_ESTest.java###test05+++fail###1, JavaTimeInstantFormatter_ESTest.java###test06+++getInstance###1, JavaTimeInstantFormatter_ESTest.java###test06+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test06+++parse###2, JavaTimeInstantFormatter_ESTest.java###test06+++fail###1, JavaTimeInstantFormatter_ESTest.java###test07+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test07+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test07+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test07+++parse###2, JavaTimeInstantFormatter_ESTest.java###test07+++fail###1, JavaTimeInstantFormatter_ESTest.java###test08+++cast###1, JavaTimeInstantFormatter_ESTest.java###test08+++fail###1, JavaTimeInstantFormatter_ESTest.java###test09+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test09+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test09+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test09+++parse###2, JavaTimeInstantFormatter_ESTest.java###test09+++fail###1, JavaTimeInstantFormatter_ESTest.java###test10+++getInstance###1, JavaTimeInstantFormatter_ESTest.java###test10+++parse###2, JavaTimeInstantFormatter_ESTest.java###test10+++assertNotNull###1, JavaTimeInstantFormatter_ESTest.java###test11+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test11+++setPattern###1, JavaTimeInstantFormatter_ESTest.java###test11+++ofEpochMilli###1, JavaTimeInstantFormatter_ESTest.java###test11+++format###2, JavaTimeInstantFormatter_ESTest.java###test11+++assertEquals###2, JavaTimeInstantFormatter_ESTest.java###test12+++getInstance###0, JavaTimeInstantFormatter_ESTest.java###test12+++verifyException###2, JavaTimeInstantFormatter_ESTest.java###test12+++format###2, JavaTimeInstantFormatter_ESTest.java###test12+++fail###1, JavaTimeInstantFormatter_ESTest.java###test13+++newInstance###0, JavaTimeInstantFormatter_ESTest.java###test13+++assertNotSame###2, JavaTimeInstantFormatter_ESTest.java###test14+++toInstant###0, JavaTimeInstantFormatter_ESTest.java###test14+++cast###1, JavaTimeInstantFormatter_ESTest.java###test14+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:40:01 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaTimeInstantFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaTimeInstantFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaTimeInstantFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaTimeInstantFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.Instant;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaTimeInstantFormatter_ESTest.java###test13",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    javaTimeInstantFormatter0.setJsString(false);\n    Instant instant0 = MockInstant.ofEpochMilli(0L);\n    String string0 = javaTimeInstantFormatter0.format(zapposJson0, instant0);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    Instant instant0 = javaTimeInstantFormatter0.cast((Object) null);\n    assertNull(instant0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // pattern\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern(\"NoOp\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Unknown pattern letter: o\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.setPattern(\"upqA\\\"y/tq7Re\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator cannot be cast to java.time.format.DateTimeFormatterBuilder$NumberPrinterParser\n        // \n        verifyException(\"java.time.format.DateTimeFormatterBuilder\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"1323000\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"__value\");\n        fail(\"Expecting exception: DateTimeParseException\");\n    } catch (DateTimeParseException e) {\n        // \n        // Text '__value' could not be parsed at index 0\n        // \n        verifyException(\"java.time.format.DateTimeFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"0;-uGc)*0\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"0;-uGc)*0\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"0;-uGc)*0\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    javaTimeInstantFormatter0.setPattern(\"case \");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // text\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.cast(\"1392409281320\");\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    try {\n        javaTimeInstantFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: DateTimeException\");\n    } catch (DateTimeException e) {\n        // \n        // Unable to obtain Instant from TemporalAccessor: {},ISO,GMT of type java.time.format.Parsed\n        // \n        verifyException(\"java.time.Instant\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    Instant instant0 = javaTimeInstantFormatter0.parse(zapposJson0, \"1392409281320\");\n    assertNotNull(instant0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaTimeInstantFormatter0.setPattern(\"\");\n    Instant instant0 = MockInstant.ofEpochMilli(0L);\n    String string0 = javaTimeInstantFormatter0.format(zapposJson0, instant0);\n    assertEquals(\"\\\"\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaTimeInstantFormatter0.format(zapposJson0, (Instant) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"org.evosuite.runtime.mock.java.time.MockInstant\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ValueFormatter<Instant> valueFormatter0 = javaTimeInstantFormatter0.newInstance();\n    assertNotSame(javaTimeInstantFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    MockDate mockDate0 = new MockDate();\n    Instant instant0 = mockDate0.toInstant();\n    Instant instant1 = javaTimeInstantFormatter0.cast(instant0);\n    assertSame(instant0, instant1);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    JavaTimeInstantFormatter javaTimeInstantFormatter0 = new JavaTimeInstantFormatter();\n    ValueFormatter<Instant> valueFormatter0 = javaTimeInstantFormatter0.newInstance();\n    assertNotSame(javaTimeInstantFormatter0, valueFormatter0);\n}",
            "TestRelevantFocal": "[newInstance###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:40:01 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaTimeInstantFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.time.DateTimeException;\nimport java.time.Instant;\nimport java.time.format.DateTimeParseException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaTimeInstantFormatter_ESTest extends JavaTimeInstantFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String format(ZapposJson zapposJson, Date object) {\n    if (getPattern() != null) {\n        return toJsonValue(zapposJson, new SimpleDateFormat(getPattern()).format(object));\n    }\n    return toJsonValue(zapposJson, newFormatter().format(object));\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "ZapposJson,Date",
            "Import_statements": "import java.sql.Date;\nimport java.text.SimpleDateFormat;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic SimpleDateFormat newFormatter();\npublic ValueFormatter<Date> newInstance();",
            "public_field": "",
            "Method_statement": "format(ZapposJson zapposJson, Date object)",
            "Method_name": "format",
            "Class_declaration": "public class JavaSqlDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic SimpleDateFormat newFormatter();\npublic ValueFormatter<Date> newInstance();",
            "Class_name": "JavaSqlDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaSqlDateFormatter.java###format",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.sql.Date;\n\nimport java.text.SimpleDateFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String format(ZapposJson zapposJson, Date object);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaSqlDateFormatter_ESTest.java###test00+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test00+++format###2, JavaSqlDateFormatter_ESTest.java###test00+++assertEquals###2, JavaSqlDateFormatter_ESTest.java###test01+++cast###1, JavaSqlDateFormatter_ESTest.java###test01+++assertNull###1, JavaSqlDateFormatter_ESTest.java###test02+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test02+++parse###2, JavaSqlDateFormatter_ESTest.java###test02+++fail###1, JavaSqlDateFormatter_ESTest.java###test03+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test03+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test03+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test03+++parse###2, JavaSqlDateFormatter_ESTest.java###test03+++fail###1, JavaSqlDateFormatter_ESTest.java###test04+++cast###1, JavaSqlDateFormatter_ESTest.java###test04+++fail###1, JavaSqlDateFormatter_ESTest.java###test05+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test05+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test05+++newFormatter###0, JavaSqlDateFormatter_ESTest.java###test05+++fail###1, JavaSqlDateFormatter_ESTest.java###test06+++newFormatter###0, JavaSqlDateFormatter_ESTest.java###test06+++assertEquals###2, JavaSqlDateFormatter_ESTest.java###test06+++toPattern###0, JavaSqlDateFormatter_ESTest.java###test07+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test07+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test07+++parse###2, JavaSqlDateFormatter_ESTest.java###test07+++assertNotNull###1, JavaSqlDateFormatter_ESTest.java###test08+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test08+++getInstance###0, JavaSqlDateFormatter_ESTest.java###test08+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test08+++format###2, JavaSqlDateFormatter_ESTest.java###test08+++fail###1, JavaSqlDateFormatter_ESTest.java###test09+++getInstance###0, JavaSqlDateFormatter_ESTest.java###test09+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test09+++format###2, JavaSqlDateFormatter_ESTest.java###test09+++fail###1, JavaSqlDateFormatter_ESTest.java###test10+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test10+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test10+++parse###2, JavaSqlDateFormatter_ESTest.java###test10+++fail###1, JavaSqlDateFormatter_ESTest.java###test11+++cast###1, JavaSqlDateFormatter_ESTest.java###test11+++assertSame###2, JavaSqlDateFormatter_ESTest.java###test12+++newInstance###0, JavaSqlDateFormatter_ESTest.java###test12+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:37:54 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaSqlDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaSqlDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaSqlDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaSqlDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaSqlDateFormatter;\nimport java.sql.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaSqlDateFormatter_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    Date date0 = new Date(0L);\n    String string0 = javaSqlDateFormatter0.format(zapposJson0, date0);\n    assertEquals(\"\\\"1970-01-01\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Date date0 = javaSqlDateFormatter0.cast((Object) null);\n    assertNull(date0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"Si~e_9Evn\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Si~e_9Evn\");\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, \"Si~e_9Evn\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'i'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"=u'-D{&HY0*f.HK&1\");\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.newFormatter();\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Unterminated quote\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    SimpleDateFormat simpleDateFormat0 = javaSqlDateFormatter0.newFormatter();\n    assertEquals(\"yyyy-MM-dd\", simpleDateFormat0.toPattern());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"8\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"8\");\n    Date date0 = javaSqlDateFormatter0.parse(zapposJson0, \"8\");\n    assertNotNull(date0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"\\u0002Nys\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.format(zapposJson0, (Date) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'N'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.format(zapposJson0, (Date) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Calendar\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"E{M(g0e'DKmx$s*o}\");\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, \"E{M(g0e'DKmx$s*o}\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"E{M(g0e'DKmx$s*o}\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Date date0 = new Date((-1669L));\n    Date date1 = javaSqlDateFormatter0.cast(date0);\n    assertSame(date0, date1);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ValueFormatter<Date> valueFormatter0 = javaSqlDateFormatter0.newInstance();\n    assertNotSame(javaSqlDateFormatter0, valueFormatter0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    Date date0 = new Date(0L);\n    String string0 = javaSqlDateFormatter0.format(zapposJson0, date0);\n    assertEquals(\"\\\"1970-01-01\\\"\", string0);\n}",
            "TestRelevantFocal": "[format###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:37:54 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaSqlDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.sql.Date;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaSqlDateFormatter_ESTest extends JavaSqlDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic Date cast(Object obj) {\n    return Date.class.cast(obj);\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Object",
            "Import_statements": "import java.sql.Date;\n",
            "public_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic SimpleDateFormat newFormatter();\npublic ValueFormatter<Date> newInstance();",
            "public_field": "",
            "Method_statement": "cast(Object obj)",
            "Method_name": "cast",
            "Class_declaration": "public class JavaSqlDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic SimpleDateFormat newFormatter();\npublic ValueFormatter<Date> newInstance();",
            "Class_name": "JavaSqlDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaSqlDateFormatter.java###cast",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.sql.Date;\n\nimport java.text.SimpleDateFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public Date cast(Object obj);",
            "Junit_version": "4",
            "returnType": "Date"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaSqlDateFormatter_ESTest.java###test00+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test00+++format###2, JavaSqlDateFormatter_ESTest.java###test00+++assertEquals###2, JavaSqlDateFormatter_ESTest.java###test01+++cast###1, JavaSqlDateFormatter_ESTest.java###test01+++assertNull###1, JavaSqlDateFormatter_ESTest.java###test02+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test02+++parse###2, JavaSqlDateFormatter_ESTest.java###test02+++fail###1, JavaSqlDateFormatter_ESTest.java###test03+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test03+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test03+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test03+++parse###2, JavaSqlDateFormatter_ESTest.java###test03+++fail###1, JavaSqlDateFormatter_ESTest.java###test04+++cast###1, JavaSqlDateFormatter_ESTest.java###test04+++fail###1, JavaSqlDateFormatter_ESTest.java###test05+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test05+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test05+++newFormatter###0, JavaSqlDateFormatter_ESTest.java###test05+++fail###1, JavaSqlDateFormatter_ESTest.java###test06+++newFormatter###0, JavaSqlDateFormatter_ESTest.java###test06+++assertEquals###2, JavaSqlDateFormatter_ESTest.java###test06+++toPattern###0, JavaSqlDateFormatter_ESTest.java###test07+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test07+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test07+++parse###2, JavaSqlDateFormatter_ESTest.java###test07+++assertNotNull###1, JavaSqlDateFormatter_ESTest.java###test08+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test08+++getInstance###0, JavaSqlDateFormatter_ESTest.java###test08+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test08+++format###2, JavaSqlDateFormatter_ESTest.java###test08+++fail###1, JavaSqlDateFormatter_ESTest.java###test09+++getInstance###0, JavaSqlDateFormatter_ESTest.java###test09+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test09+++format###2, JavaSqlDateFormatter_ESTest.java###test09+++fail###1, JavaSqlDateFormatter_ESTest.java###test10+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test10+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test10+++parse###2, JavaSqlDateFormatter_ESTest.java###test10+++fail###1, JavaSqlDateFormatter_ESTest.java###test11+++cast###1, JavaSqlDateFormatter_ESTest.java###test11+++assertSame###2, JavaSqlDateFormatter_ESTest.java###test12+++newInstance###0, JavaSqlDateFormatter_ESTest.java###test12+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:37:54 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaSqlDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaSqlDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaSqlDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaSqlDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.JavaSqlDateFormatter;\nimport java.sql.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaSqlDateFormatter_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    Date date0 = new Date(0L);\n    String string0 = javaSqlDateFormatter0.format(zapposJson0, date0);\n    assertEquals(\"\\\"1970-01-01\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Date date0 = javaSqlDateFormatter0.cast((Object) null);\n    assertNull(date0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"Si~e_9Evn\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Si~e_9Evn\");\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, \"Si~e_9Evn\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'i'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"=u'-D{&HY0*f.HK&1\");\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.newFormatter();\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Unterminated quote\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    SimpleDateFormat simpleDateFormat0 = javaSqlDateFormatter0.newFormatter();\n    assertEquals(\"yyyy-MM-dd\", simpleDateFormat0.toPattern());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"8\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"8\");\n    Date date0 = javaSqlDateFormatter0.parse(zapposJson0, \"8\");\n    assertNotNull(date0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"\\u0002Nys\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.format(zapposJson0, (Date) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'N'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.format(zapposJson0, (Date) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Calendar\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"E{M(g0e'DKmx$s*o}\");\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, \"E{M(g0e'DKmx$s*o}\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"E{M(g0e'DKmx$s*o}\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Date date0 = new Date((-1669L));\n    Date date1 = javaSqlDateFormatter0.cast(date0);\n    assertSame(date0, date1);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ValueFormatter<Date> valueFormatter0 = javaSqlDateFormatter0.newInstance();\n    assertNotSame(javaSqlDateFormatter0, valueFormatter0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}",
            "TestRelevantFocal": "[cast###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:37:54 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaSqlDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.sql.Date;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaSqlDateFormatter_ESTest extends JavaSqlDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic Date parse(ZapposJson zapposJson, String string) throws Exception {\n    return new Date(newFormatter().parse(string).getTime());\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "ZapposJson,String",
            "Import_statements": "import java.sql.Date;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic SimpleDateFormat newFormatter();\npublic ValueFormatter<Date> newInstance();",
            "public_field": "",
            "Method_statement": "parse(ZapposJson zapposJson, String string)",
            "Method_name": "parse",
            "Class_declaration": "public class JavaSqlDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic SimpleDateFormat newFormatter();\npublic ValueFormatter<Date> newInstance();",
            "Class_name": "JavaSqlDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaSqlDateFormatter.java###parse",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.sql.Date;\n\nimport java.text.SimpleDateFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public Date parse(ZapposJson zapposJson, String string) throws Exception;",
            "Junit_version": "4",
            "returnType": "Date"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaSqlDateFormatter_ESTest.java###test00+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test00+++format###2, JavaSqlDateFormatter_ESTest.java###test00+++assertEquals###2, JavaSqlDateFormatter_ESTest.java###test01+++cast###1, JavaSqlDateFormatter_ESTest.java###test01+++assertNull###1, JavaSqlDateFormatter_ESTest.java###test02+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test02+++parse###2, JavaSqlDateFormatter_ESTest.java###test02+++fail###1, JavaSqlDateFormatter_ESTest.java###test03+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test03+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test03+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test03+++parse###2, JavaSqlDateFormatter_ESTest.java###test03+++fail###1, JavaSqlDateFormatter_ESTest.java###test04+++cast###1, JavaSqlDateFormatter_ESTest.java###test04+++fail###1, JavaSqlDateFormatter_ESTest.java###test05+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test05+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test05+++newFormatter###0, JavaSqlDateFormatter_ESTest.java###test05+++fail###1, JavaSqlDateFormatter_ESTest.java###test06+++newFormatter###0, JavaSqlDateFormatter_ESTest.java###test06+++assertEquals###2, JavaSqlDateFormatter_ESTest.java###test06+++toPattern###0, JavaSqlDateFormatter_ESTest.java###test07+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test07+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test07+++parse###2, JavaSqlDateFormatter_ESTest.java###test07+++assertNotNull###1, JavaSqlDateFormatter_ESTest.java###test08+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test08+++getInstance###0, JavaSqlDateFormatter_ESTest.java###test08+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test08+++format###2, JavaSqlDateFormatter_ESTest.java###test08+++fail###1, JavaSqlDateFormatter_ESTest.java###test09+++getInstance###0, JavaSqlDateFormatter_ESTest.java###test09+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test09+++format###2, JavaSqlDateFormatter_ESTest.java###test09+++fail###1, JavaSqlDateFormatter_ESTest.java###test10+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test10+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test10+++parse###2, JavaSqlDateFormatter_ESTest.java###test10+++fail###1, JavaSqlDateFormatter_ESTest.java###test11+++cast###1, JavaSqlDateFormatter_ESTest.java###test11+++assertSame###2, JavaSqlDateFormatter_ESTest.java###test12+++newInstance###0, JavaSqlDateFormatter_ESTest.java###test12+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:37:54 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaSqlDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaSqlDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaSqlDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaSqlDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaSqlDateFormatter;\nimport java.sql.Date;\nimport java.text.SimpleDateFormat;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaSqlDateFormatter_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    Date date0 = new Date(0L);\n    String string0 = javaSqlDateFormatter0.format(zapposJson0, date0);\n    assertEquals(\"\\\"1970-01-01\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Date date0 = javaSqlDateFormatter0.cast((Object) null);\n    assertNull(date0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"Si~e_9Evn\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Si~e_9Evn\");\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, \"Si~e_9Evn\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'i'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"=u'-D{&HY0*f.HK&1\");\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.newFormatter();\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Unterminated quote\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    SimpleDateFormat simpleDateFormat0 = javaSqlDateFormatter0.newFormatter();\n    assertEquals(\"yyyy-MM-dd\", simpleDateFormat0.toPattern());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"8\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"8\");\n    Date date0 = javaSqlDateFormatter0.parse(zapposJson0, \"8\");\n    assertNotNull(date0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"\\u0002Nys\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.format(zapposJson0, (Date) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'N'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.format(zapposJson0, (Date) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Calendar\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"E{M(g0e'DKmx$s*o}\");\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, \"E{M(g0e'DKmx$s*o}\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"E{M(g0e'DKmx$s*o}\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Date date0 = new Date((-1669L));\n    Date date1 = javaSqlDateFormatter0.cast(date0);\n    assertSame(date0, date1);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ValueFormatter<Date> valueFormatter0 = javaSqlDateFormatter0.newInstance();\n    assertNotSame(javaSqlDateFormatter0, valueFormatter0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"Si~e_9Evn\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Si~e_9Evn\");\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, \"Si~e_9Evn\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'i'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}",
            "TestRelevantFocal": "[parse###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:37:54 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaSqlDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.sql.Date;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaSqlDateFormatter_ESTest extends JavaSqlDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public SimpleDateFormat newFormatter() {\n    if (getPattern() != null)\n        return new SimpleDateFormat(getPattern());\n    return new SimpleDateFormat(\"yyyy-MM-dd\");\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "import java.sql.Date;\nimport java.text.SimpleDateFormat;\n",
            "public_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic SimpleDateFormat newFormatter();\npublic ValueFormatter<Date> newInstance();",
            "public_field": "",
            "Method_statement": "newFormatter()",
            "Method_name": "newFormatter",
            "Class_declaration": "public class JavaSqlDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic SimpleDateFormat newFormatter();\npublic ValueFormatter<Date> newInstance();",
            "Class_name": "JavaSqlDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaSqlDateFormatter.java###newFormatter",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.sql.Date;\n\nimport java.text.SimpleDateFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public SimpleDateFormat newFormatter();",
            "Junit_version": "4",
            "returnType": "SimpleDateFormat"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaSqlDateFormatter_ESTest.java###test00+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test00+++format###2, JavaSqlDateFormatter_ESTest.java###test00+++assertEquals###2, JavaSqlDateFormatter_ESTest.java###test01+++cast###1, JavaSqlDateFormatter_ESTest.java###test01+++assertNull###1, JavaSqlDateFormatter_ESTest.java###test02+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test02+++parse###2, JavaSqlDateFormatter_ESTest.java###test02+++fail###1, JavaSqlDateFormatter_ESTest.java###test03+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test03+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test03+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test03+++parse###2, JavaSqlDateFormatter_ESTest.java###test03+++fail###1, JavaSqlDateFormatter_ESTest.java###test04+++cast###1, JavaSqlDateFormatter_ESTest.java###test04+++fail###1, JavaSqlDateFormatter_ESTest.java###test05+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test05+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test05+++newFormatter###0, JavaSqlDateFormatter_ESTest.java###test05+++fail###1, JavaSqlDateFormatter_ESTest.java###test06+++newFormatter###0, JavaSqlDateFormatter_ESTest.java###test06+++assertEquals###2, JavaSqlDateFormatter_ESTest.java###test06+++toPattern###0, JavaSqlDateFormatter_ESTest.java###test07+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test07+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test07+++parse###2, JavaSqlDateFormatter_ESTest.java###test07+++assertNotNull###1, JavaSqlDateFormatter_ESTest.java###test08+++setPattern###1, JavaSqlDateFormatter_ESTest.java###test08+++getInstance###0, JavaSqlDateFormatter_ESTest.java###test08+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test08+++format###2, JavaSqlDateFormatter_ESTest.java###test08+++fail###1, JavaSqlDateFormatter_ESTest.java###test09+++getInstance###0, JavaSqlDateFormatter_ESTest.java###test09+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test09+++format###2, JavaSqlDateFormatter_ESTest.java###test09+++fail###1, JavaSqlDateFormatter_ESTest.java###test10+++getInstance###1, JavaSqlDateFormatter_ESTest.java###test10+++verifyException###2, JavaSqlDateFormatter_ESTest.java###test10+++parse###2, JavaSqlDateFormatter_ESTest.java###test10+++fail###1, JavaSqlDateFormatter_ESTest.java###test11+++cast###1, JavaSqlDateFormatter_ESTest.java###test11+++assertSame###2, JavaSqlDateFormatter_ESTest.java###test12+++newInstance###0, JavaSqlDateFormatter_ESTest.java###test12+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:37:54 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaSqlDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaSqlDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaSqlDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaSqlDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.JavaSqlDateFormatter;\nimport java.sql.Date;\nimport java.text.SimpleDateFormat;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaSqlDateFormatter_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    Date date0 = new Date(0L);\n    String string0 = javaSqlDateFormatter0.format(zapposJson0, date0);\n    assertEquals(\"\\\"1970-01-01\\\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Date date0 = javaSqlDateFormatter0.cast((Object) null);\n    assertNull(date0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"Si~e_9Evn\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Si~e_9Evn\");\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, \"Si~e_9Evn\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'i'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"=u'-D{&HY0*f.HK&1\");\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.newFormatter();\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Unterminated quote\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    SimpleDateFormat simpleDateFormat0 = javaSqlDateFormatter0.newFormatter();\n    assertEquals(\"yyyy-MM-dd\", simpleDateFormat0.toPattern());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"8\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"8\");\n    Date date0 = javaSqlDateFormatter0.parse(zapposJson0, \"8\");\n    assertNotNull(date0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"\\u0002Nys\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.format(zapposJson0, (Date) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'N'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.format(zapposJson0, (Date) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Calendar\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"E{M(g0e'DKmx$s*o}\");\n    try {\n        javaSqlDateFormatter0.parse(zapposJson0, \"E{M(g0e'DKmx$s*o}\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"E{M(g0e'DKmx$s*o}\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    Date date0 = new Date((-1669L));\n    Date date1 = javaSqlDateFormatter0.cast(date0);\n    assertSame(date0, date1);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    ValueFormatter<Date> valueFormatter0 = javaSqlDateFormatter0.newInstance();\n    assertNotSame(javaSqlDateFormatter0, valueFormatter0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaSqlDateFormatter javaSqlDateFormatter0 = new JavaSqlDateFormatter();\n    javaSqlDateFormatter0.setPattern(\"=u'-D{&HY0*f.HK&1\");\n    // Undeclared exception!\n    try {\n        javaSqlDateFormatter0.newFormatter();\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Unterminated quote\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}",
            "TestRelevantFocal": "[newFormatter###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:37:54 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaSqlDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.sql.Date;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaSqlDateFormatter_ESTest extends JavaSqlDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic BigDecimal parse(ZapposJson zapposJson, String string) throws Exception {\n    if (getPattern() != null) {\n        DecimalFormat df = new DecimalFormat(getPattern());\n        df.setParseBigDecimal(true);\n        return (BigDecimal) df.parse(string);\n    }\n    return new BigDecimal(string);\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "ZapposJson,String",
            "Import_statements": "import java.math.BigDecimal;\nimport java.text.DecimalFormat;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public BigDecimal cast(Object obj);\npublic String format(ZapposJson zapposJson, BigDecimal object);\npublic BigDecimal parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigDecimal> newInstance();",
            "public_field": "",
            "Method_statement": "parse(ZapposJson zapposJson, String string)",
            "Method_name": "parse",
            "Class_declaration": "public class BigDecimalFormatter {\n",
            "constructors": "",
            "all_method_signature": "public BigDecimal cast(Object obj);\npublic String format(ZapposJson zapposJson, BigDecimal object);\npublic BigDecimal parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigDecimal> newInstance();",
            "Class_name": "BigDecimalFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/BigDecimalFormatter.java###parse",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.math.BigDecimal;\n\nimport java.text.DecimalFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public BigDecimal parse(ZapposJson zapposJson, String string) throws Exception;",
            "Junit_version": "4",
            "returnType": "BigDecimal"
        },
        "Test_method": {
            "AllTest2Focal": "[BigDecimalFormatter_ESTest.java###test00+++parse###2, BigDecimalFormatter_ESTest.java###test00+++assertEquals###2, BigDecimalFormatter_ESTest.java###test00+++byteValue###0, BigDecimalFormatter_ESTest.java###test01+++getInstance###1, BigDecimalFormatter_ESTest.java###test01+++parse###2, BigDecimalFormatter_ESTest.java###test01+++assertEquals###2, BigDecimalFormatter_ESTest.java###test01+++shortValue###0, BigDecimalFormatter_ESTest.java###test02+++cast###1, BigDecimalFormatter_ESTest.java###test02+++assertNull###1, BigDecimalFormatter_ESTest.java###test03+++cast###1, BigDecimalFormatter_ESTest.java###test03+++assertSame###2, BigDecimalFormatter_ESTest.java###test04+++cast###1, BigDecimalFormatter_ESTest.java###test04+++assertEquals###2, BigDecimalFormatter_ESTest.java###test04+++shortValue###0, BigDecimalFormatter_ESTest.java###test05+++getInstance###1, BigDecimalFormatter_ESTest.java###test05+++verifyException###2, BigDecimalFormatter_ESTest.java###test05+++parse###2, BigDecimalFormatter_ESTest.java###test05+++fail###1, BigDecimalFormatter_ESTest.java###test06+++verifyException###2, BigDecimalFormatter_ESTest.java###test06+++parse###2, BigDecimalFormatter_ESTest.java###test06+++fail###1, BigDecimalFormatter_ESTest.java###test07+++getInstance###0, BigDecimalFormatter_ESTest.java###test07+++verifyException###2, BigDecimalFormatter_ESTest.java###test07+++format###2, BigDecimalFormatter_ESTest.java###test07+++fail###1, BigDecimalFormatter_ESTest.java###test08+++cast###1, BigDecimalFormatter_ESTest.java###test08+++fail###1, BigDecimalFormatter_ESTest.java###test09+++getInstance###1, BigDecimalFormatter_ESTest.java###test09+++parse###2, BigDecimalFormatter_ESTest.java###test09+++assertEquals###2, BigDecimalFormatter_ESTest.java###test09+++shortValue###0, BigDecimalFormatter_ESTest.java###test10+++getInstance###1, BigDecimalFormatter_ESTest.java###test10+++format###2, BigDecimalFormatter_ESTest.java###test10+++assertEquals###2, BigDecimalFormatter_ESTest.java###test11+++newInstance###0, BigDecimalFormatter_ESTest.java###test11+++assertNotSame###2, BigDecimalFormatter_ESTest.java###test12+++cast###1, BigDecimalFormatter_ESTest.java###test12+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:31:38 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class BigDecimalFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.BigDecimalFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BigDecimalFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BigDecimalFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigDecimalFormatter;\nimport java.math.BigDecimal;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/BigDecimalFormatter_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse((ZapposJson) null, \"0\");\n    assertEquals((byte) 0, bigDecimal0.byteValue());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse(zapposJson0, \"10\");\n    assertEquals((short) 10, bigDecimal0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.cast((Object) null);\n    assertNull(bigDecimal0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertSame(bigDecimal0, bigDecimal1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigDecimal bigDecimal0 = new BigDecimal((-2362.417));\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertEquals((short) (-2362), bigDecimal1.shortValue());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"X4\");\n    try {\n        bigDecimalFormatter0.parse(zapposJson0, \"[\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.math.BigDecimal\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    try {\n        bigDecimalFormatter0.parse((ZapposJson) null, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.math.BigDecimal\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigDecimalFormatter0.format(zapposJson0, (BigDecimal) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigDecimalFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    // Undeclared exception!\n    try {\n        bigDecimalFormatter0.cast(bigDecimalFormatter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse(zapposJson0, \"-2362.41699999999991632648743689060211181640625\");\n    assertEquals((short) (-2362), bigDecimal0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = new BigDecimal((-2362.417));\n    String string0 = bigDecimalFormatter0.format(zapposJson0, bigDecimal0);\n    assertEquals(\"-2362.41699999999991632648743689060211181640625\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ValueFormatter<BigDecimal> valueFormatter0 = bigDecimalFormatter0.newInstance();\n    assertNotSame(bigDecimalFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertSame(bigDecimal1, bigDecimal0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"X4\");\n    try {\n        bigDecimalFormatter0.parse(zapposJson0, \"[\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.math.BigDecimal\", e);\n    }\n}",
            "TestRelevantFocal": "[parse###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:31:38 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigDecimalFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.math.BigDecimal;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class BigDecimalFormatter_ESTest extends BigDecimalFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic BigDecimal cast(Object obj) {\n    return BigDecimal.class.cast(obj);\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Object",
            "Import_statements": "import java.math.BigDecimal;\n",
            "public_method_signature": "public BigDecimal cast(Object obj);\npublic String format(ZapposJson zapposJson, BigDecimal object);\npublic BigDecimal parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigDecimal> newInstance();",
            "public_field": "",
            "Method_statement": "cast(Object obj)",
            "Method_name": "cast",
            "Class_declaration": "public class BigDecimalFormatter {\n",
            "constructors": "",
            "all_method_signature": "public BigDecimal cast(Object obj);\npublic String format(ZapposJson zapposJson, BigDecimal object);\npublic BigDecimal parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigDecimal> newInstance();",
            "Class_name": "BigDecimalFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/BigDecimalFormatter.java###cast",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.math.BigDecimal;\n\nimport java.text.DecimalFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public BigDecimal cast(Object obj);",
            "Junit_version": "4",
            "returnType": "BigDecimal"
        },
        "Test_method": {
            "AllTest2Focal": "[BigDecimalFormatter_ESTest.java###test00+++parse###2, BigDecimalFormatter_ESTest.java###test00+++assertEquals###2, BigDecimalFormatter_ESTest.java###test00+++byteValue###0, BigDecimalFormatter_ESTest.java###test01+++getInstance###1, BigDecimalFormatter_ESTest.java###test01+++parse###2, BigDecimalFormatter_ESTest.java###test01+++assertEquals###2, BigDecimalFormatter_ESTest.java###test01+++shortValue###0, BigDecimalFormatter_ESTest.java###test02+++cast###1, BigDecimalFormatter_ESTest.java###test02+++assertNull###1, BigDecimalFormatter_ESTest.java###test03+++cast###1, BigDecimalFormatter_ESTest.java###test03+++assertSame###2, BigDecimalFormatter_ESTest.java###test04+++cast###1, BigDecimalFormatter_ESTest.java###test04+++assertEquals###2, BigDecimalFormatter_ESTest.java###test04+++shortValue###0, BigDecimalFormatter_ESTest.java###test05+++getInstance###1, BigDecimalFormatter_ESTest.java###test05+++verifyException###2, BigDecimalFormatter_ESTest.java###test05+++parse###2, BigDecimalFormatter_ESTest.java###test05+++fail###1, BigDecimalFormatter_ESTest.java###test06+++verifyException###2, BigDecimalFormatter_ESTest.java###test06+++parse###2, BigDecimalFormatter_ESTest.java###test06+++fail###1, BigDecimalFormatter_ESTest.java###test07+++getInstance###0, BigDecimalFormatter_ESTest.java###test07+++verifyException###2, BigDecimalFormatter_ESTest.java###test07+++format###2, BigDecimalFormatter_ESTest.java###test07+++fail###1, BigDecimalFormatter_ESTest.java###test08+++cast###1, BigDecimalFormatter_ESTest.java###test08+++fail###1, BigDecimalFormatter_ESTest.java###test09+++getInstance###1, BigDecimalFormatter_ESTest.java###test09+++parse###2, BigDecimalFormatter_ESTest.java###test09+++assertEquals###2, BigDecimalFormatter_ESTest.java###test09+++shortValue###0, BigDecimalFormatter_ESTest.java###test10+++getInstance###1, BigDecimalFormatter_ESTest.java###test10+++format###2, BigDecimalFormatter_ESTest.java###test10+++assertEquals###2, BigDecimalFormatter_ESTest.java###test11+++newInstance###0, BigDecimalFormatter_ESTest.java###test11+++assertNotSame###2, BigDecimalFormatter_ESTest.java###test12+++cast###1, BigDecimalFormatter_ESTest.java###test12+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:31:38 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class BigDecimalFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.BigDecimalFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BigDecimalFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BigDecimalFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.BigDecimalFormatter;\nimport java.math.BigDecimal;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/BigDecimalFormatter_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse((ZapposJson) null, \"0\");\n    assertEquals((byte) 0, bigDecimal0.byteValue());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse(zapposJson0, \"10\");\n    assertEquals((short) 10, bigDecimal0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.cast((Object) null);\n    assertNull(bigDecimal0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertSame(bigDecimal0, bigDecimal1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigDecimal bigDecimal0 = new BigDecimal((-2362.417));\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertEquals((short) (-2362), bigDecimal1.shortValue());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"X4\");\n    try {\n        bigDecimalFormatter0.parse(zapposJson0, \"[\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.math.BigDecimal\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    try {\n        bigDecimalFormatter0.parse((ZapposJson) null, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.math.BigDecimal\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigDecimalFormatter0.format(zapposJson0, (BigDecimal) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigDecimalFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    // Undeclared exception!\n    try {\n        bigDecimalFormatter0.cast(bigDecimalFormatter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse(zapposJson0, \"-2362.41699999999991632648743689060211181640625\");\n    assertEquals((short) (-2362), bigDecimal0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = new BigDecimal((-2362.417));\n    String string0 = bigDecimalFormatter0.format(zapposJson0, bigDecimal0);\n    assertEquals(\"-2362.41699999999991632648743689060211181640625\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ValueFormatter<BigDecimal> valueFormatter0 = bigDecimalFormatter0.newInstance();\n    assertNotSame(bigDecimalFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertSame(bigDecimal1, bigDecimal0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigDecimal bigDecimal0 = new BigDecimal((-2362.417));\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertEquals((short) (-2362), bigDecimal1.shortValue());\n}",
            "TestRelevantFocal": "[cast###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:31:38 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigDecimalFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.math.BigDecimal;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class BigDecimalFormatter_ESTest extends BigDecimalFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String format(ZapposJson zapposJson, BigDecimal object) {\n    if (getPattern() != null) {\n        return toJsonValue(zapposJson, new DecimalFormat(getPattern()).format(object));\n    }\n    return object.toString();\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "ZapposJson,BigDecimal",
            "Import_statements": "import java.math.BigDecimal;\nimport java.text.DecimalFormat;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public BigDecimal cast(Object obj);\npublic String format(ZapposJson zapposJson, BigDecimal object);\npublic BigDecimal parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigDecimal> newInstance();",
            "public_field": "",
            "Method_statement": "format(ZapposJson zapposJson, BigDecimal object)",
            "Method_name": "format",
            "Class_declaration": "public class BigDecimalFormatter {\n",
            "constructors": "",
            "all_method_signature": "public BigDecimal cast(Object obj);\npublic String format(ZapposJson zapposJson, BigDecimal object);\npublic BigDecimal parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigDecimal> newInstance();",
            "Class_name": "BigDecimalFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/BigDecimalFormatter.java###format",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.math.BigDecimal;\n\nimport java.text.DecimalFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String format(ZapposJson zapposJson, BigDecimal object);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[BigDecimalFormatter_ESTest.java###test00+++parse###2, BigDecimalFormatter_ESTest.java###test00+++assertEquals###2, BigDecimalFormatter_ESTest.java###test00+++byteValue###0, BigDecimalFormatter_ESTest.java###test01+++getInstance###1, BigDecimalFormatter_ESTest.java###test01+++parse###2, BigDecimalFormatter_ESTest.java###test01+++assertEquals###2, BigDecimalFormatter_ESTest.java###test01+++shortValue###0, BigDecimalFormatter_ESTest.java###test02+++cast###1, BigDecimalFormatter_ESTest.java###test02+++assertNull###1, BigDecimalFormatter_ESTest.java###test03+++cast###1, BigDecimalFormatter_ESTest.java###test03+++assertSame###2, BigDecimalFormatter_ESTest.java###test04+++cast###1, BigDecimalFormatter_ESTest.java###test04+++assertEquals###2, BigDecimalFormatter_ESTest.java###test04+++shortValue###0, BigDecimalFormatter_ESTest.java###test05+++getInstance###1, BigDecimalFormatter_ESTest.java###test05+++verifyException###2, BigDecimalFormatter_ESTest.java###test05+++parse###2, BigDecimalFormatter_ESTest.java###test05+++fail###1, BigDecimalFormatter_ESTest.java###test06+++verifyException###2, BigDecimalFormatter_ESTest.java###test06+++parse###2, BigDecimalFormatter_ESTest.java###test06+++fail###1, BigDecimalFormatter_ESTest.java###test07+++getInstance###0, BigDecimalFormatter_ESTest.java###test07+++verifyException###2, BigDecimalFormatter_ESTest.java###test07+++format###2, BigDecimalFormatter_ESTest.java###test07+++fail###1, BigDecimalFormatter_ESTest.java###test08+++cast###1, BigDecimalFormatter_ESTest.java###test08+++fail###1, BigDecimalFormatter_ESTest.java###test09+++getInstance###1, BigDecimalFormatter_ESTest.java###test09+++parse###2, BigDecimalFormatter_ESTest.java###test09+++assertEquals###2, BigDecimalFormatter_ESTest.java###test09+++shortValue###0, BigDecimalFormatter_ESTest.java###test10+++getInstance###1, BigDecimalFormatter_ESTest.java###test10+++format###2, BigDecimalFormatter_ESTest.java###test10+++assertEquals###2, BigDecimalFormatter_ESTest.java###test11+++newInstance###0, BigDecimalFormatter_ESTest.java###test11+++assertNotSame###2, BigDecimalFormatter_ESTest.java###test12+++cast###1, BigDecimalFormatter_ESTest.java###test12+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:31:38 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class BigDecimalFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.BigDecimalFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BigDecimalFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BigDecimalFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigDecimalFormatter;\nimport java.math.BigDecimal;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/BigDecimalFormatter_ESTest.java###test10",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse((ZapposJson) null, \"0\");\n    assertEquals((byte) 0, bigDecimal0.byteValue());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse(zapposJson0, \"10\");\n    assertEquals((short) 10, bigDecimal0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.cast((Object) null);\n    assertNull(bigDecimal0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertSame(bigDecimal0, bigDecimal1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigDecimal bigDecimal0 = new BigDecimal((-2362.417));\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertEquals((short) (-2362), bigDecimal1.shortValue());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"X4\");\n    try {\n        bigDecimalFormatter0.parse(zapposJson0, \"[\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.math.BigDecimal\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    try {\n        bigDecimalFormatter0.parse((ZapposJson) null, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.math.BigDecimal\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigDecimalFormatter0.format(zapposJson0, (BigDecimal) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigDecimalFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    // Undeclared exception!\n    try {\n        bigDecimalFormatter0.cast(bigDecimalFormatter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse(zapposJson0, \"-2362.41699999999991632648743689060211181640625\");\n    assertEquals((short) (-2362), bigDecimal0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = new BigDecimal((-2362.417));\n    String string0 = bigDecimalFormatter0.format(zapposJson0, bigDecimal0);\n    assertEquals(\"-2362.41699999999991632648743689060211181640625\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ValueFormatter<BigDecimal> valueFormatter0 = bigDecimalFormatter0.newInstance();\n    assertNotSame(bigDecimalFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertSame(bigDecimal1, bigDecimal0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = new BigDecimal((-2362.417));\n    String string0 = bigDecimalFormatter0.format(zapposJson0, bigDecimal0);\n    assertEquals(\"-2362.41699999999991632648743689060211181640625\", string0);\n}",
            "TestRelevantFocal": "[format###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:31:38 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigDecimalFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.math.BigDecimal;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class BigDecimalFormatter_ESTest extends BigDecimalFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic ValueFormatter<BigDecimal> newInstance() {\n    return new BigDecimalFormatter();\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "import java.math.BigDecimal;\nimport java.text.DecimalFormat;\n",
            "public_method_signature": "public BigDecimal cast(Object obj);\npublic String format(ZapposJson zapposJson, BigDecimal object);\npublic BigDecimal parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigDecimal> newInstance();",
            "public_field": "",
            "Method_statement": "newInstance()",
            "Method_name": "newInstance",
            "Class_declaration": "public class BigDecimalFormatter {\n",
            "constructors": "",
            "all_method_signature": "public BigDecimal cast(Object obj);\npublic String format(ZapposJson zapposJson, BigDecimal object);\npublic BigDecimal parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigDecimal> newInstance();",
            "Class_name": "BigDecimalFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/BigDecimalFormatter.java###newInstance",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.math.BigDecimal;\n\nimport java.text.DecimalFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public ValueFormatter<BigDecimal> newInstance();",
            "Junit_version": "4",
            "returnType": "ValueFormatter<BigDecimal>"
        },
        "Test_method": {
            "AllTest2Focal": "[BigDecimalFormatter_ESTest.java###test00+++parse###2, BigDecimalFormatter_ESTest.java###test00+++assertEquals###2, BigDecimalFormatter_ESTest.java###test00+++byteValue###0, BigDecimalFormatter_ESTest.java###test01+++getInstance###1, BigDecimalFormatter_ESTest.java###test01+++parse###2, BigDecimalFormatter_ESTest.java###test01+++assertEquals###2, BigDecimalFormatter_ESTest.java###test01+++shortValue###0, BigDecimalFormatter_ESTest.java###test02+++cast###1, BigDecimalFormatter_ESTest.java###test02+++assertNull###1, BigDecimalFormatter_ESTest.java###test03+++cast###1, BigDecimalFormatter_ESTest.java###test03+++assertSame###2, BigDecimalFormatter_ESTest.java###test04+++cast###1, BigDecimalFormatter_ESTest.java###test04+++assertEquals###2, BigDecimalFormatter_ESTest.java###test04+++shortValue###0, BigDecimalFormatter_ESTest.java###test05+++getInstance###1, BigDecimalFormatter_ESTest.java###test05+++verifyException###2, BigDecimalFormatter_ESTest.java###test05+++parse###2, BigDecimalFormatter_ESTest.java###test05+++fail###1, BigDecimalFormatter_ESTest.java###test06+++verifyException###2, BigDecimalFormatter_ESTest.java###test06+++parse###2, BigDecimalFormatter_ESTest.java###test06+++fail###1, BigDecimalFormatter_ESTest.java###test07+++getInstance###0, BigDecimalFormatter_ESTest.java###test07+++verifyException###2, BigDecimalFormatter_ESTest.java###test07+++format###2, BigDecimalFormatter_ESTest.java###test07+++fail###1, BigDecimalFormatter_ESTest.java###test08+++cast###1, BigDecimalFormatter_ESTest.java###test08+++fail###1, BigDecimalFormatter_ESTest.java###test09+++getInstance###1, BigDecimalFormatter_ESTest.java###test09+++parse###2, BigDecimalFormatter_ESTest.java###test09+++assertEquals###2, BigDecimalFormatter_ESTest.java###test09+++shortValue###0, BigDecimalFormatter_ESTest.java###test10+++getInstance###1, BigDecimalFormatter_ESTest.java###test10+++format###2, BigDecimalFormatter_ESTest.java###test10+++assertEquals###2, BigDecimalFormatter_ESTest.java###test11+++newInstance###0, BigDecimalFormatter_ESTest.java###test11+++assertNotSame###2, BigDecimalFormatter_ESTest.java###test12+++cast###1, BigDecimalFormatter_ESTest.java###test12+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:31:38 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class BigDecimalFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.BigDecimalFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BigDecimalFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BigDecimalFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.BigDecimalFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.math.BigDecimal;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/BigDecimalFormatter_ESTest.java###test11",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse((ZapposJson) null, \"0\");\n    assertEquals((byte) 0, bigDecimal0.byteValue());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse(zapposJson0, \"10\");\n    assertEquals((short) 10, bigDecimal0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.cast((Object) null);\n    assertNull(bigDecimal0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = BigDecimal.ZERO;\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertSame(bigDecimal0, bigDecimal1);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigDecimal bigDecimal0 = new BigDecimal((-2362.417));\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertEquals((short) (-2362), bigDecimal1.shortValue());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"X4\");\n    try {\n        bigDecimalFormatter0.parse(zapposJson0, \"[\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.math.BigDecimal\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    try {\n        bigDecimalFormatter0.parse((ZapposJson) null, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.math.BigDecimal\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        bigDecimalFormatter0.format(zapposJson0, (BigDecimal) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigDecimalFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    // Undeclared exception!\n    try {\n        bigDecimalFormatter0.cast(bigDecimalFormatter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = bigDecimalFormatter0.parse(zapposJson0, \"-2362.41699999999991632648743689060211181640625\");\n    assertEquals((short) (-2362), bigDecimal0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    BigDecimal bigDecimal0 = new BigDecimal((-2362.417));\n    String string0 = bigDecimalFormatter0.format(zapposJson0, bigDecimal0);\n    assertEquals(\"-2362.41699999999991632648743689060211181640625\", string0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ValueFormatter<BigDecimal> valueFormatter0 = bigDecimalFormatter0.newInstance();\n    assertNotSame(bigDecimalFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    BigDecimal bigDecimal0 = BigDecimal.TEN;\n    BigDecimal bigDecimal1 = bigDecimalFormatter0.cast(bigDecimal0);\n    assertSame(bigDecimal1, bigDecimal0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigDecimalFormatter bigDecimalFormatter0 = new BigDecimalFormatter();\n    ValueFormatter<BigDecimal> valueFormatter0 = bigDecimalFormatter0.newInstance();\n    assertNotSame(bigDecimalFormatter0, valueFormatter0);\n}",
            "TestRelevantFocal": "[newInstance###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:31:38 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigDecimalFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.math.BigDecimal;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class BigDecimalFormatter_ESTest extends BigDecimalFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic Date cast(Object obj) {\n    return Date.class.cast(obj);\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Object",
            "Import_statements": "import java.util.Date;\n",
            "public_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Date> newInstance();",
            "public_field": "",
            "Method_statement": "cast(Object obj)",
            "Method_name": "cast",
            "Class_declaration": "public class JavaDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Date> newInstance();",
            "Class_name": "JavaDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaDateFormatter.java###cast",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.text.SimpleDateFormat;\n\nimport java.util.Date;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public Date cast(Object obj);",
            "Junit_version": "4",
            "returnType": "Date"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaDateFormatter_ESTest.java###test00+++cast###1, JavaDateFormatter_ESTest.java###test00+++assertSame###2, JavaDateFormatter_ESTest.java###test01+++getInstance###1, JavaDateFormatter_ESTest.java###test01+++verifyException###2, JavaDateFormatter_ESTest.java###test01+++parse###2, JavaDateFormatter_ESTest.java###test01+++fail###1, JavaDateFormatter_ESTest.java###test02+++setPattern###1, JavaDateFormatter_ESTest.java###test02+++getInstance###1, JavaDateFormatter_ESTest.java###test02+++verifyException###2, JavaDateFormatter_ESTest.java###test02+++parse###2, JavaDateFormatter_ESTest.java###test02+++fail###1, JavaDateFormatter_ESTest.java###test03+++setPattern###1, JavaDateFormatter_ESTest.java###test03+++getInstance###1, JavaDateFormatter_ESTest.java###test03+++verifyException###2, JavaDateFormatter_ESTest.java###test03+++parse###2, JavaDateFormatter_ESTest.java###test03+++fail###1, JavaDateFormatter_ESTest.java###test04+++verifyException###2, JavaDateFormatter_ESTest.java###test04+++format###2, JavaDateFormatter_ESTest.java###test04+++fail###1, JavaDateFormatter_ESTest.java###test05+++cast###1, JavaDateFormatter_ESTest.java###test05+++fail###1, JavaDateFormatter_ESTest.java###test06+++setPattern###1, JavaDateFormatter_ESTest.java###test06+++getInstance###1, JavaDateFormatter_ESTest.java###test06+++verifyException###2, JavaDateFormatter_ESTest.java###test06+++parse###2, JavaDateFormatter_ESTest.java###test06+++fail###1, JavaDateFormatter_ESTest.java###test07+++getInstance###1, JavaDateFormatter_ESTest.java###test07+++parse###2, JavaDateFormatter_ESTest.java###test07+++assertEquals###2, JavaDateFormatter_ESTest.java###test07+++toString###0, JavaDateFormatter_ESTest.java###test08+++getInstance###0, JavaDateFormatter_ESTest.java###test08+++setPattern###1, JavaDateFormatter_ESTest.java###test08+++verifyException###2, JavaDateFormatter_ESTest.java###test08+++format###2, JavaDateFormatter_ESTest.java###test08+++fail###1, JavaDateFormatter_ESTest.java###test09+++getInstance###1, JavaDateFormatter_ESTest.java###test09+++format###2, JavaDateFormatter_ESTest.java###test09+++assertEquals###2, JavaDateFormatter_ESTest.java###test10+++newInstance###0, JavaDateFormatter_ESTest.java###test10+++assertNotSame###2, JavaDateFormatter_ESTest.java###test11+++cast###1, JavaDateFormatter_ESTest.java###test11+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:35:46 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.JavaDateFormatter;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaDateFormatter_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    MockDate mockDate0 = new MockDate(2515, 2515, 3113);\n    Date date0 = javaDateFormatter0.cast(mockDate0);\n    assertSame(date0, mockDate0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"^\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"^\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"r32\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"r32\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"r32\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'r'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.format((ZapposJson) null, (Date) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.JavaDateFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    Date date0 = javaDateFormatter0.parse(zapposJson0, \"84039379200000\");\n    assertEquals(\"Thu Feb 07 00:00:00 GMT 4633\", date0.toString());\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaDateFormatter0.setPattern(\"com.zappos.json.format.JavaDateFormatter\");\n    MockDate mockDate0 = new MockDate();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.format(zapposJson0, (Date) mockDate0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'c'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    MockDate mockDate0 = new MockDate(2515, 2515, 3113);\n    String string0 = javaDateFormatter0.format(zapposJson0, (Date) mockDate0);\n    assertEquals(\"84039379200000\", string0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ValueFormatter<Date> valueFormatter0 = javaDateFormatter0.newInstance();\n    assertNotSame(javaDateFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    Date date0 = javaDateFormatter0.cast((Object) null);\n    assertNull(date0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}",
            "TestRelevantFocal": "[cast###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:35:46 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.text.ParseException;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaDateFormatter_ESTest extends JavaDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic Date parse(ZapposJson zapposJson, String string) throws Exception {\n    if (getPattern() != null) {\n        return new SimpleDateFormat(getPattern()).parse(string);\n    }\n    return new Date(Long.parseLong(string));\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "ZapposJson,String",
            "Import_statements": "import java.text.SimpleDateFormat;\nimport java.util.Date;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Date> newInstance();",
            "public_field": "",
            "Method_statement": "parse(ZapposJson zapposJson, String string)",
            "Method_name": "parse",
            "Class_declaration": "public class JavaDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Date> newInstance();",
            "Class_name": "JavaDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaDateFormatter.java###parse",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.text.SimpleDateFormat;\n\nimport java.util.Date;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public Date parse(ZapposJson zapposJson, String string) throws Exception;",
            "Junit_version": "4",
            "returnType": "Date"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaDateFormatter_ESTest.java###test00+++cast###1, JavaDateFormatter_ESTest.java###test00+++assertSame###2, JavaDateFormatter_ESTest.java###test01+++getInstance###1, JavaDateFormatter_ESTest.java###test01+++verifyException###2, JavaDateFormatter_ESTest.java###test01+++parse###2, JavaDateFormatter_ESTest.java###test01+++fail###1, JavaDateFormatter_ESTest.java###test02+++setPattern###1, JavaDateFormatter_ESTest.java###test02+++getInstance###1, JavaDateFormatter_ESTest.java###test02+++verifyException###2, JavaDateFormatter_ESTest.java###test02+++parse###2, JavaDateFormatter_ESTest.java###test02+++fail###1, JavaDateFormatter_ESTest.java###test03+++setPattern###1, JavaDateFormatter_ESTest.java###test03+++getInstance###1, JavaDateFormatter_ESTest.java###test03+++verifyException###2, JavaDateFormatter_ESTest.java###test03+++parse###2, JavaDateFormatter_ESTest.java###test03+++fail###1, JavaDateFormatter_ESTest.java###test04+++verifyException###2, JavaDateFormatter_ESTest.java###test04+++format###2, JavaDateFormatter_ESTest.java###test04+++fail###1, JavaDateFormatter_ESTest.java###test05+++cast###1, JavaDateFormatter_ESTest.java###test05+++fail###1, JavaDateFormatter_ESTest.java###test06+++setPattern###1, JavaDateFormatter_ESTest.java###test06+++getInstance###1, JavaDateFormatter_ESTest.java###test06+++verifyException###2, JavaDateFormatter_ESTest.java###test06+++parse###2, JavaDateFormatter_ESTest.java###test06+++fail###1, JavaDateFormatter_ESTest.java###test07+++getInstance###1, JavaDateFormatter_ESTest.java###test07+++parse###2, JavaDateFormatter_ESTest.java###test07+++assertEquals###2, JavaDateFormatter_ESTest.java###test07+++toString###0, JavaDateFormatter_ESTest.java###test08+++getInstance###0, JavaDateFormatter_ESTest.java###test08+++setPattern###1, JavaDateFormatter_ESTest.java###test08+++verifyException###2, JavaDateFormatter_ESTest.java###test08+++format###2, JavaDateFormatter_ESTest.java###test08+++fail###1, JavaDateFormatter_ESTest.java###test09+++getInstance###1, JavaDateFormatter_ESTest.java###test09+++format###2, JavaDateFormatter_ESTest.java###test09+++assertEquals###2, JavaDateFormatter_ESTest.java###test10+++newInstance###0, JavaDateFormatter_ESTest.java###test10+++assertNotSame###2, JavaDateFormatter_ESTest.java###test11+++cast###1, JavaDateFormatter_ESTest.java###test11+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:35:46 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaDateFormatter_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    MockDate mockDate0 = new MockDate(2515, 2515, 3113);\n    Date date0 = javaDateFormatter0.cast(mockDate0);\n    assertSame(date0, mockDate0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"^\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"^\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"r32\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"r32\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"r32\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'r'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.format((ZapposJson) null, (Date) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.JavaDateFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    Date date0 = javaDateFormatter0.parse(zapposJson0, \"84039379200000\");\n    assertEquals(\"Thu Feb 07 00:00:00 GMT 4633\", date0.toString());\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaDateFormatter0.setPattern(\"com.zappos.json.format.JavaDateFormatter\");\n    MockDate mockDate0 = new MockDate();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.format(zapposJson0, (Date) mockDate0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'c'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    MockDate mockDate0 = new MockDate(2515, 2515, 3113);\n    String string0 = javaDateFormatter0.format(zapposJson0, (Date) mockDate0);\n    assertEquals(\"84039379200000\", string0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ValueFormatter<Date> valueFormatter0 = javaDateFormatter0.newInstance();\n    assertNotSame(javaDateFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    Date date0 = javaDateFormatter0.cast((Object) null);\n    assertNull(date0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"r32\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"r32\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"r32\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'r'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}",
            "TestRelevantFocal": "[parse###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:35:46 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.text.ParseException;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaDateFormatter_ESTest extends JavaDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String format(ZapposJson zapposJson, Date object) {\n    if (getPattern() != null) {\n        return toJsonValue(zapposJson, new SimpleDateFormat(getPattern()).format(object));\n    }\n    return String.valueOf(((Date) object).getTime());\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "ZapposJson,Date",
            "Import_statements": "import java.text.SimpleDateFormat;\nimport java.util.Date;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Date> newInstance();",
            "public_field": "",
            "Method_statement": "format(ZapposJson zapposJson, Date object)",
            "Method_name": "format",
            "Class_declaration": "public class JavaDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Date> newInstance();",
            "Class_name": "JavaDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaDateFormatter.java###format",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.text.SimpleDateFormat;\n\nimport java.util.Date;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String format(ZapposJson zapposJson, Date object);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaDateFormatter_ESTest.java###test00+++cast###1, JavaDateFormatter_ESTest.java###test00+++assertSame###2, JavaDateFormatter_ESTest.java###test01+++getInstance###1, JavaDateFormatter_ESTest.java###test01+++verifyException###2, JavaDateFormatter_ESTest.java###test01+++parse###2, JavaDateFormatter_ESTest.java###test01+++fail###1, JavaDateFormatter_ESTest.java###test02+++setPattern###1, JavaDateFormatter_ESTest.java###test02+++getInstance###1, JavaDateFormatter_ESTest.java###test02+++verifyException###2, JavaDateFormatter_ESTest.java###test02+++parse###2, JavaDateFormatter_ESTest.java###test02+++fail###1, JavaDateFormatter_ESTest.java###test03+++setPattern###1, JavaDateFormatter_ESTest.java###test03+++getInstance###1, JavaDateFormatter_ESTest.java###test03+++verifyException###2, JavaDateFormatter_ESTest.java###test03+++parse###2, JavaDateFormatter_ESTest.java###test03+++fail###1, JavaDateFormatter_ESTest.java###test04+++verifyException###2, JavaDateFormatter_ESTest.java###test04+++format###2, JavaDateFormatter_ESTest.java###test04+++fail###1, JavaDateFormatter_ESTest.java###test05+++cast###1, JavaDateFormatter_ESTest.java###test05+++fail###1, JavaDateFormatter_ESTest.java###test06+++setPattern###1, JavaDateFormatter_ESTest.java###test06+++getInstance###1, JavaDateFormatter_ESTest.java###test06+++verifyException###2, JavaDateFormatter_ESTest.java###test06+++parse###2, JavaDateFormatter_ESTest.java###test06+++fail###1, JavaDateFormatter_ESTest.java###test07+++getInstance###1, JavaDateFormatter_ESTest.java###test07+++parse###2, JavaDateFormatter_ESTest.java###test07+++assertEquals###2, JavaDateFormatter_ESTest.java###test07+++toString###0, JavaDateFormatter_ESTest.java###test08+++getInstance###0, JavaDateFormatter_ESTest.java###test08+++setPattern###1, JavaDateFormatter_ESTest.java###test08+++verifyException###2, JavaDateFormatter_ESTest.java###test08+++format###2, JavaDateFormatter_ESTest.java###test08+++fail###1, JavaDateFormatter_ESTest.java###test09+++getInstance###1, JavaDateFormatter_ESTest.java###test09+++format###2, JavaDateFormatter_ESTest.java###test09+++assertEquals###2, JavaDateFormatter_ESTest.java###test10+++newInstance###0, JavaDateFormatter_ESTest.java###test10+++assertNotSame###2, JavaDateFormatter_ESTest.java###test11+++cast###1, JavaDateFormatter_ESTest.java###test11+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:35:46 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaDateFormatter_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    MockDate mockDate0 = new MockDate(2515, 2515, 3113);\n    Date date0 = javaDateFormatter0.cast(mockDate0);\n    assertSame(date0, mockDate0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"^\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"^\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"r32\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"r32\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"r32\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'r'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.format((ZapposJson) null, (Date) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.JavaDateFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    Date date0 = javaDateFormatter0.parse(zapposJson0, \"84039379200000\");\n    assertEquals(\"Thu Feb 07 00:00:00 GMT 4633\", date0.toString());\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaDateFormatter0.setPattern(\"com.zappos.json.format.JavaDateFormatter\");\n    MockDate mockDate0 = new MockDate();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.format(zapposJson0, (Date) mockDate0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'c'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    MockDate mockDate0 = new MockDate(2515, 2515, 3113);\n    String string0 = javaDateFormatter0.format(zapposJson0, (Date) mockDate0);\n    assertEquals(\"84039379200000\", string0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ValueFormatter<Date> valueFormatter0 = javaDateFormatter0.newInstance();\n    assertNotSame(javaDateFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    Date date0 = javaDateFormatter0.cast((Object) null);\n    assertNull(date0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.format((ZapposJson) null, (Date) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.JavaDateFormatter\", e);\n    }\n}",
            "TestRelevantFocal": "[format###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:35:46 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.text.ParseException;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaDateFormatter_ESTest extends JavaDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic ValueFormatter<Date> newInstance() {\n    return new JavaDateFormatter();\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "import java.util.Date;\n",
            "public_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Date> newInstance();",
            "public_field": "",
            "Method_statement": "newInstance()",
            "Method_name": "newInstance",
            "Class_declaration": "public class JavaDateFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Date cast(Object obj);\npublic String format(ZapposJson zapposJson, Date object);\npublic Date parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Date> newInstance();",
            "Class_name": "JavaDateFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/JavaDateFormatter.java###newInstance",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.text.SimpleDateFormat;\n\nimport java.util.Date;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public ValueFormatter<Date> newInstance();",
            "Junit_version": "4",
            "returnType": "ValueFormatter<Date>"
        },
        "Test_method": {
            "AllTest2Focal": "[JavaDateFormatter_ESTest.java###test00+++cast###1, JavaDateFormatter_ESTest.java###test00+++assertSame###2, JavaDateFormatter_ESTest.java###test01+++getInstance###1, JavaDateFormatter_ESTest.java###test01+++verifyException###2, JavaDateFormatter_ESTest.java###test01+++parse###2, JavaDateFormatter_ESTest.java###test01+++fail###1, JavaDateFormatter_ESTest.java###test02+++setPattern###1, JavaDateFormatter_ESTest.java###test02+++getInstance###1, JavaDateFormatter_ESTest.java###test02+++verifyException###2, JavaDateFormatter_ESTest.java###test02+++parse###2, JavaDateFormatter_ESTest.java###test02+++fail###1, JavaDateFormatter_ESTest.java###test03+++setPattern###1, JavaDateFormatter_ESTest.java###test03+++getInstance###1, JavaDateFormatter_ESTest.java###test03+++verifyException###2, JavaDateFormatter_ESTest.java###test03+++parse###2, JavaDateFormatter_ESTest.java###test03+++fail###1, JavaDateFormatter_ESTest.java###test04+++verifyException###2, JavaDateFormatter_ESTest.java###test04+++format###2, JavaDateFormatter_ESTest.java###test04+++fail###1, JavaDateFormatter_ESTest.java###test05+++cast###1, JavaDateFormatter_ESTest.java###test05+++fail###1, JavaDateFormatter_ESTest.java###test06+++setPattern###1, JavaDateFormatter_ESTest.java###test06+++getInstance###1, JavaDateFormatter_ESTest.java###test06+++verifyException###2, JavaDateFormatter_ESTest.java###test06+++parse###2, JavaDateFormatter_ESTest.java###test06+++fail###1, JavaDateFormatter_ESTest.java###test07+++getInstance###1, JavaDateFormatter_ESTest.java###test07+++parse###2, JavaDateFormatter_ESTest.java###test07+++assertEquals###2, JavaDateFormatter_ESTest.java###test07+++toString###0, JavaDateFormatter_ESTest.java###test08+++getInstance###0, JavaDateFormatter_ESTest.java###test08+++setPattern###1, JavaDateFormatter_ESTest.java###test08+++verifyException###2, JavaDateFormatter_ESTest.java###test08+++format###2, JavaDateFormatter_ESTest.java###test08+++fail###1, JavaDateFormatter_ESTest.java###test09+++getInstance###1, JavaDateFormatter_ESTest.java###test09+++format###2, JavaDateFormatter_ESTest.java###test09+++assertEquals###2, JavaDateFormatter_ESTest.java###test10+++newInstance###0, JavaDateFormatter_ESTest.java###test10+++assertNotSame###2, JavaDateFormatter_ESTest.java###test11+++cast###1, JavaDateFormatter_ESTest.java###test11+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:35:46 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JavaDateFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.JavaDateFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JavaDateFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JavaDateFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.util.Date;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaDateFormatter_ESTest.java###test10",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    MockDate mockDate0 = new MockDate(2515, 2515, 3113);\n    Date date0 = javaDateFormatter0.cast(mockDate0);\n    assertSame(date0, mockDate0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"^\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"^\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"r32\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"r32\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"r32\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'r'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.format((ZapposJson) null, (Date) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.JavaDateFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    javaDateFormatter0.setPattern(\"\");\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        javaDateFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: ParseException\");\n    } catch (ParseException e) {\n        // \n        // Unparseable date: \\\"\\\"\n        // \n        verifyException(\"java.text.DateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    Date date0 = javaDateFormatter0.parse(zapposJson0, \"84039379200000\");\n    assertEquals(\"Thu Feb 07 00:00:00 GMT 4633\", date0.toString());\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    javaDateFormatter0.setPattern(\"com.zappos.json.format.JavaDateFormatter\");\n    MockDate mockDate0 = new MockDate();\n    // Undeclared exception!\n    try {\n        javaDateFormatter0.format(zapposJson0, (Date) mockDate0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // Illegal pattern character 'c'\n        // \n        verifyException(\"java.text.SimpleDateFormat\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"^\");\n    MockDate mockDate0 = new MockDate(2515, 2515, 3113);\n    String string0 = javaDateFormatter0.format(zapposJson0, (Date) mockDate0);\n    assertEquals(\"84039379200000\", string0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ValueFormatter<Date> valueFormatter0 = javaDateFormatter0.newInstance();\n    assertNotSame(javaDateFormatter0, valueFormatter0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    Date date0 = javaDateFormatter0.cast((Object) null);\n    assertNull(date0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();\n    ValueFormatter<Date> valueFormatter0 = javaDateFormatter0.newInstance();\n    assertNotSame(javaDateFormatter0, valueFormatter0);\n}",
            "TestRelevantFocal": "[newInstance###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:35:46 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.JavaDateFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.text.ParseException;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JavaDateFormatter_ESTest extends JavaDateFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic Object cast(Object obj) {\n    return obj;\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Object",
            "Import_statements": "",
            "public_method_signature": "public Object cast(Object obj);\npublic String format(ZapposJson zapposJson, Object object);\npublic Object parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Object> newInstance();",
            "public_field": "",
            "Method_statement": "cast(Object obj)",
            "Method_name": "cast",
            "Class_declaration": "public class NoOpValueFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Object cast(Object obj);\npublic String format(ZapposJson zapposJson, Object object);\npublic Object parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Object> newInstance();",
            "Class_name": "NoOpValueFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/NoOpValueFormatter.java###cast",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public Object cast(Object obj);",
            "Junit_version": "4",
            "returnType": "Object"
        },
        "Test_method": {
            "AllTest2Focal": "[NoOpValueFormatter_ESTest.java###test0+++cast###1, NoOpValueFormatter_ESTest.java###test0+++assertNull###1, NoOpValueFormatter_ESTest.java###test1+++verifyException###2, NoOpValueFormatter_ESTest.java###test1+++newInstance###0, NoOpValueFormatter_ESTest.java###test1+++fail###1, NoOpValueFormatter_ESTest.java###test2+++getInstance###1, NoOpValueFormatter_ESTest.java###test2+++verifyException###2, NoOpValueFormatter_ESTest.java###test2+++parse###2, NoOpValueFormatter_ESTest.java###test2+++fail###1, NoOpValueFormatter_ESTest.java###test3+++getInstance###0, NoOpValueFormatter_ESTest.java###test3+++verifyException###2, NoOpValueFormatter_ESTest.java###test3+++format###2, NoOpValueFormatter_ESTest.java###test3+++fail###1, NoOpValueFormatter_ESTest.java###test4+++cast###1, NoOpValueFormatter_ESTest.java###test4+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:46:01 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class NoOpValueFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.NoOpValueFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NoOpValueFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NoOpValueFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.NoOpValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/NoOpValueFormatter_ESTest.java###test0",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    Object object0 = noOpValueFormatter0.cast((Object) null);\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.newInstance();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        noOpValueFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.format(zapposJson0, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    Object object0 = new Object();\n    Object object1 = noOpValueFormatter0.cast(object0);\n    assertSame(object0, object1);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    Object object0 = noOpValueFormatter0.cast((Object) null);\n    assertNull(object0);\n}",
            "TestRelevantFocal": "[cast###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:46:01 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class NoOpValueFormatter_ESTest extends NoOpValueFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic ValueFormatter<Object> newInstance() {\n    throw new UnsupportedOperationException(\"NoOp\");\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Object cast(Object obj);\npublic String format(ZapposJson zapposJson, Object object);\npublic Object parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Object> newInstance();",
            "public_field": "",
            "Method_statement": "newInstance()",
            "Method_name": "newInstance",
            "Class_declaration": "public class NoOpValueFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Object cast(Object obj);\npublic String format(ZapposJson zapposJson, Object object);\npublic Object parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Object> newInstance();",
            "Class_name": "NoOpValueFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/NoOpValueFormatter.java###newInstance",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public ValueFormatter<Object> newInstance();",
            "Junit_version": "4",
            "returnType": "ValueFormatter<Object>"
        },
        "Test_method": {
            "AllTest2Focal": "[NoOpValueFormatter_ESTest.java###test0+++cast###1, NoOpValueFormatter_ESTest.java###test0+++assertNull###1, NoOpValueFormatter_ESTest.java###test1+++verifyException###2, NoOpValueFormatter_ESTest.java###test1+++newInstance###0, NoOpValueFormatter_ESTest.java###test1+++fail###1, NoOpValueFormatter_ESTest.java###test2+++getInstance###1, NoOpValueFormatter_ESTest.java###test2+++verifyException###2, NoOpValueFormatter_ESTest.java###test2+++parse###2, NoOpValueFormatter_ESTest.java###test2+++fail###1, NoOpValueFormatter_ESTest.java###test3+++getInstance###0, NoOpValueFormatter_ESTest.java###test3+++verifyException###2, NoOpValueFormatter_ESTest.java###test3+++format###2, NoOpValueFormatter_ESTest.java###test3+++fail###1, NoOpValueFormatter_ESTest.java###test4+++cast###1, NoOpValueFormatter_ESTest.java###test4+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:46:01 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class NoOpValueFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.NoOpValueFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NoOpValueFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NoOpValueFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.NoOpValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/NoOpValueFormatter_ESTest.java###test1",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    Object object0 = noOpValueFormatter0.cast((Object) null);\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.newInstance();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        noOpValueFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.format(zapposJson0, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    Object object0 = new Object();\n    Object object1 = noOpValueFormatter0.cast(object0);\n    assertSame(object0, object1);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.newInstance();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}",
            "TestRelevantFocal": "[newInstance###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:46:01 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class NoOpValueFormatter_ESTest extends NoOpValueFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic Object parse(ZapposJson zapposJson, String string) throws Exception {\n    throw new UnsupportedOperationException(\"NoOp\");\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "ZapposJson,String",
            "Import_statements": "import com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public Object cast(Object obj);\npublic String format(ZapposJson zapposJson, Object object);\npublic Object parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Object> newInstance();",
            "public_field": "",
            "Method_statement": "parse(ZapposJson zapposJson, String string)",
            "Method_name": "parse",
            "Class_declaration": "public class NoOpValueFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Object cast(Object obj);\npublic String format(ZapposJson zapposJson, Object object);\npublic Object parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Object> newInstance();",
            "Class_name": "NoOpValueFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/NoOpValueFormatter.java###parse",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public Object parse(ZapposJson zapposJson, String string) throws Exception;",
            "Junit_version": "4",
            "returnType": "Object"
        },
        "Test_method": {
            "AllTest2Focal": "[NoOpValueFormatter_ESTest.java###test0+++cast###1, NoOpValueFormatter_ESTest.java###test0+++assertNull###1, NoOpValueFormatter_ESTest.java###test1+++verifyException###2, NoOpValueFormatter_ESTest.java###test1+++newInstance###0, NoOpValueFormatter_ESTest.java###test1+++fail###1, NoOpValueFormatter_ESTest.java###test2+++getInstance###1, NoOpValueFormatter_ESTest.java###test2+++verifyException###2, NoOpValueFormatter_ESTest.java###test2+++parse###2, NoOpValueFormatter_ESTest.java###test2+++fail###1, NoOpValueFormatter_ESTest.java###test3+++getInstance###0, NoOpValueFormatter_ESTest.java###test3+++verifyException###2, NoOpValueFormatter_ESTest.java###test3+++format###2, NoOpValueFormatter_ESTest.java###test3+++fail###1, NoOpValueFormatter_ESTest.java###test4+++cast###1, NoOpValueFormatter_ESTest.java###test4+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:46:01 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class NoOpValueFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.NoOpValueFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NoOpValueFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NoOpValueFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.NoOpValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/NoOpValueFormatter_ESTest.java###test2",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    Object object0 = noOpValueFormatter0.cast((Object) null);\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.newInstance();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        noOpValueFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.format(zapposJson0, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    Object object0 = new Object();\n    Object object1 = noOpValueFormatter0.cast(object0);\n    assertSame(object0, object1);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        noOpValueFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}",
            "TestRelevantFocal": "[parse###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:46:01 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class NoOpValueFormatter_ESTest extends NoOpValueFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String format(ZapposJson zapposJson, Object object) {\n    throw new UnsupportedOperationException(\"NoOp\");\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "ZapposJson,Object",
            "Import_statements": "import com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public Object cast(Object obj);\npublic String format(ZapposJson zapposJson, Object object);\npublic Object parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Object> newInstance();",
            "public_field": "",
            "Method_statement": "format(ZapposJson zapposJson, Object object)",
            "Method_name": "format",
            "Class_declaration": "public class NoOpValueFormatter {\n",
            "constructors": "",
            "all_method_signature": "public Object cast(Object obj);\npublic String format(ZapposJson zapposJson, Object object);\npublic Object parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<Object> newInstance();",
            "Class_name": "NoOpValueFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/NoOpValueFormatter.java###format",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String format(ZapposJson zapposJson, Object object);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[NoOpValueFormatter_ESTest.java###test0+++cast###1, NoOpValueFormatter_ESTest.java###test0+++assertNull###1, NoOpValueFormatter_ESTest.java###test1+++verifyException###2, NoOpValueFormatter_ESTest.java###test1+++newInstance###0, NoOpValueFormatter_ESTest.java###test1+++fail###1, NoOpValueFormatter_ESTest.java###test2+++getInstance###1, NoOpValueFormatter_ESTest.java###test2+++verifyException###2, NoOpValueFormatter_ESTest.java###test2+++parse###2, NoOpValueFormatter_ESTest.java###test2+++fail###1, NoOpValueFormatter_ESTest.java###test3+++getInstance###0, NoOpValueFormatter_ESTest.java###test3+++verifyException###2, NoOpValueFormatter_ESTest.java###test3+++format###2, NoOpValueFormatter_ESTest.java###test3+++fail###1, NoOpValueFormatter_ESTest.java###test4+++cast###1, NoOpValueFormatter_ESTest.java###test4+++assertSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:46:01 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class NoOpValueFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.NoOpValueFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NoOpValueFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NoOpValueFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.NoOpValueFormatter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/NoOpValueFormatter_ESTest.java###test3",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    Object object0 = noOpValueFormatter0.cast((Object) null);\n    assertNull(object0);\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.newInstance();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"\");\n    try {\n        noOpValueFormatter0.parse(zapposJson0, \"\");\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.format(zapposJson0, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    Object object0 = new Object();\n    Object object1 = noOpValueFormatter0.cast(object0);\n    assertSame(object0, object1);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    // Undeclared exception!\n    try {\n        noOpValueFormatter0.format(zapposJson0, (Object) null);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // NoOp\n        // \n        verifyException(\"com.zappos.json.format.NoOpValueFormatter\", e);\n    }\n}",
            "TestRelevantFocal": "[format###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:46:01 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class NoOpValueFormatter_ESTest extends NoOpValueFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic BigInteger parse(ZapposJson zapposJson, String string) throws Exception {\n    if (getPattern() != null) {\n        DecimalFormat df = new DecimalFormat(getPattern());\n        return BigInteger.valueOf(df.parse(string).longValue());\n    }\n    return new BigInteger(string);\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "ZapposJson,String",
            "Import_statements": "import java.math.BigInteger;\nimport java.text.DecimalFormat;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public BigInteger cast(Object obj);\npublic String format(ZapposJson zapposJson, BigInteger object);\npublic BigInteger parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigInteger> newInstance();",
            "public_field": "",
            "Method_statement": "parse(ZapposJson zapposJson, String string)",
            "Method_name": "parse",
            "Class_declaration": "public class BigIntegerFormatter {\n",
            "constructors": "",
            "all_method_signature": "public BigInteger cast(Object obj);\npublic String format(ZapposJson zapposJson, BigInteger object);\npublic BigInteger parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigInteger> newInstance();",
            "Class_name": "BigIntegerFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/BigIntegerFormatter.java###parse",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.math.BigInteger;\n\nimport java.text.DecimalFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public BigInteger parse(ZapposJson zapposJson, String string) throws Exception;",
            "Junit_version": "4",
            "returnType": "BigInteger"
        },
        "Test_method": {
            "AllTest2Focal": "[BigIntegerFormatter_ESTest.java###test00+++getInstance###0, BigIntegerFormatter_ESTest.java###test00+++parse###2, BigIntegerFormatter_ESTest.java###test00+++assertEquals###2, BigIntegerFormatter_ESTest.java###test00+++byteValue###0, BigIntegerFormatter_ESTest.java###test01+++getInstance###0, BigIntegerFormatter_ESTest.java###test01+++parse###2, BigIntegerFormatter_ESTest.java###test01+++assertEquals###2, BigIntegerFormatter_ESTest.java###test01+++shortValue###0, BigIntegerFormatter_ESTest.java###test02+++getInstance###0, BigIntegerFormatter_ESTest.java###test02+++parse###2, BigIntegerFormatter_ESTest.java###test02+++assertEquals###2, BigIntegerFormatter_ESTest.java###test02+++byteValue###0, BigIntegerFormatter_ESTest.java###test03+++cast###1, BigIntegerFormatter_ESTest.java###test03+++assertNull###1, BigIntegerFormatter_ESTest.java###test04+++cast###1, BigIntegerFormatter_ESTest.java###test04+++assertSame###2, BigIntegerFormatter_ESTest.java###test05+++cast###1, BigIntegerFormatter_ESTest.java###test05+++assertSame###2, BigIntegerFormatter_ESTest.java###test06+++getInstance###0, BigIntegerFormatter_ESTest.java###test06+++verifyException###2, BigIntegerFormatter_ESTest.java###test06+++parse###2, BigIntegerFormatter_ESTest.java###test06+++fail###1, BigIntegerFormatter_ESTest.java###test07+++getInstance###0, BigIntegerFormatter_ESTest.java###test07+++parse###2, BigIntegerFormatter_ESTest.java###test07+++fail###1, BigIntegerFormatter_ESTest.java###test08+++verifyException###2, BigIntegerFormatter_ESTest.java###test08+++format###2, BigIntegerFormatter_ESTest.java###test08+++fail###1, BigIntegerFormatter_ESTest.java###test09+++cast###1, BigIntegerFormatter_ESTest.java###test09+++fail###1, BigIntegerFormatter_ESTest.java###test10+++getInstance###0, BigIntegerFormatter_ESTest.java###test10+++parse###2, BigIntegerFormatter_ESTest.java###test10+++assertEquals###2, BigIntegerFormatter_ESTest.java###test10+++shortValue###0, BigIntegerFormatter_ESTest.java###test11+++getInstance###0, BigIntegerFormatter_ESTest.java###test11+++format###2, BigIntegerFormatter_ESTest.java###test11+++assertEquals###2, BigIntegerFormatter_ESTest.java###test12+++cast###1, BigIntegerFormatter_ESTest.java###test12+++assertSame###2, BigIntegerFormatter_ESTest.java###test13+++newInstance###0, BigIntegerFormatter_ESTest.java###test13+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:33:42 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class BigIntegerFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.BigIntegerFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BigIntegerFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BigIntegerFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport java.math.BigInteger;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/BigIntegerFormatter_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"0\");\n    assertEquals((byte) 0, bigInteger0.byteValue());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"10\");\n    assertEquals((short) 10, bigInteger0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"-1739128425\");\n    assertEquals((byte) (-105), bigInteger0.byteValue());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    BigInteger bigInteger0 = bigIntegerFormatter0.cast((Object) null);\n    assertNull(bigInteger0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    BigInteger bigInteger0 = BigInteger.TEN;\n    BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);\n    assertSame(bigInteger0, bigInteger1);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    byte[] byteArray0 = new byte[1];\n    byteArray0[0] = (byte) (-100);\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);\n    assertSame(bigInteger0, bigInteger1);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        bigIntegerFormatter0.parse(zapposJson0, \"Ta$w=f\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"Ta$w=f\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        bigIntegerFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.format((ZapposJson) null, (BigInteger) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigIntegerFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"-3524910708137984256\");\n    assertEquals((short) (-256), bigInteger0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    byte[] byteArray0 = new byte[8];\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    String string0 = bigIntegerFormatter0.format(zapposJson0, bigInteger0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    byte[] byteArray0 = new byte[8];\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);\n    assertSame(bigInteger1, bigInteger0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ValueFormatter<BigInteger> valueFormatter0 = bigIntegerFormatter0.newInstance();\n    assertNotSame(bigIntegerFormatter0, valueFormatter0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"-1739128425\");\n    assertEquals((byte) (-105), bigInteger0.byteValue());\n}",
            "TestRelevantFocal": "[parse###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:33:42 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.math.BigInteger;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class BigIntegerFormatter_ESTest extends BigIntegerFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic BigInteger cast(Object obj) {\n    return BigInteger.class.cast(obj);\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Object",
            "Import_statements": "import java.math.BigInteger;\n",
            "public_method_signature": "public BigInteger cast(Object obj);\npublic String format(ZapposJson zapposJson, BigInteger object);\npublic BigInteger parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigInteger> newInstance();",
            "public_field": "",
            "Method_statement": "cast(Object obj)",
            "Method_name": "cast",
            "Class_declaration": "public class BigIntegerFormatter {\n",
            "constructors": "",
            "all_method_signature": "public BigInteger cast(Object obj);\npublic String format(ZapposJson zapposJson, BigInteger object);\npublic BigInteger parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigInteger> newInstance();",
            "Class_name": "BigIntegerFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/BigIntegerFormatter.java###cast",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.math.BigInteger;\n\nimport java.text.DecimalFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public BigInteger cast(Object obj);",
            "Junit_version": "4",
            "returnType": "BigInteger"
        },
        "Test_method": {
            "AllTest2Focal": "[BigIntegerFormatter_ESTest.java###test00+++getInstance###0, BigIntegerFormatter_ESTest.java###test00+++parse###2, BigIntegerFormatter_ESTest.java###test00+++assertEquals###2, BigIntegerFormatter_ESTest.java###test00+++byteValue###0, BigIntegerFormatter_ESTest.java###test01+++getInstance###0, BigIntegerFormatter_ESTest.java###test01+++parse###2, BigIntegerFormatter_ESTest.java###test01+++assertEquals###2, BigIntegerFormatter_ESTest.java###test01+++shortValue###0, BigIntegerFormatter_ESTest.java###test02+++getInstance###0, BigIntegerFormatter_ESTest.java###test02+++parse###2, BigIntegerFormatter_ESTest.java###test02+++assertEquals###2, BigIntegerFormatter_ESTest.java###test02+++byteValue###0, BigIntegerFormatter_ESTest.java###test03+++cast###1, BigIntegerFormatter_ESTest.java###test03+++assertNull###1, BigIntegerFormatter_ESTest.java###test04+++cast###1, BigIntegerFormatter_ESTest.java###test04+++assertSame###2, BigIntegerFormatter_ESTest.java###test05+++cast###1, BigIntegerFormatter_ESTest.java###test05+++assertSame###2, BigIntegerFormatter_ESTest.java###test06+++getInstance###0, BigIntegerFormatter_ESTest.java###test06+++verifyException###2, BigIntegerFormatter_ESTest.java###test06+++parse###2, BigIntegerFormatter_ESTest.java###test06+++fail###1, BigIntegerFormatter_ESTest.java###test07+++getInstance###0, BigIntegerFormatter_ESTest.java###test07+++parse###2, BigIntegerFormatter_ESTest.java###test07+++fail###1, BigIntegerFormatter_ESTest.java###test08+++verifyException###2, BigIntegerFormatter_ESTest.java###test08+++format###2, BigIntegerFormatter_ESTest.java###test08+++fail###1, BigIntegerFormatter_ESTest.java###test09+++cast###1, BigIntegerFormatter_ESTest.java###test09+++fail###1, BigIntegerFormatter_ESTest.java###test10+++getInstance###0, BigIntegerFormatter_ESTest.java###test10+++parse###2, BigIntegerFormatter_ESTest.java###test10+++assertEquals###2, BigIntegerFormatter_ESTest.java###test10+++shortValue###0, BigIntegerFormatter_ESTest.java###test11+++getInstance###0, BigIntegerFormatter_ESTest.java###test11+++format###2, BigIntegerFormatter_ESTest.java###test11+++assertEquals###2, BigIntegerFormatter_ESTest.java###test12+++cast###1, BigIntegerFormatter_ESTest.java###test12+++assertSame###2, BigIntegerFormatter_ESTest.java###test13+++newInstance###0, BigIntegerFormatter_ESTest.java###test13+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:33:42 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class BigIntegerFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.BigIntegerFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BigIntegerFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BigIntegerFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport java.math.BigInteger;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/BigIntegerFormatter_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"0\");\n    assertEquals((byte) 0, bigInteger0.byteValue());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"10\");\n    assertEquals((short) 10, bigInteger0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"-1739128425\");\n    assertEquals((byte) (-105), bigInteger0.byteValue());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    BigInteger bigInteger0 = bigIntegerFormatter0.cast((Object) null);\n    assertNull(bigInteger0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    BigInteger bigInteger0 = BigInteger.TEN;\n    BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);\n    assertSame(bigInteger0, bigInteger1);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    byte[] byteArray0 = new byte[1];\n    byteArray0[0] = (byte) (-100);\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);\n    assertSame(bigInteger0, bigInteger1);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        bigIntegerFormatter0.parse(zapposJson0, \"Ta$w=f\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"Ta$w=f\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        bigIntegerFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.format((ZapposJson) null, (BigInteger) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigIntegerFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"-3524910708137984256\");\n    assertEquals((short) (-256), bigInteger0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    byte[] byteArray0 = new byte[8];\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    String string0 = bigIntegerFormatter0.format(zapposJson0, bigInteger0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    byte[] byteArray0 = new byte[8];\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);\n    assertSame(bigInteger1, bigInteger0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ValueFormatter<BigInteger> valueFormatter0 = bigIntegerFormatter0.newInstance();\n    assertNotSame(bigIntegerFormatter0, valueFormatter0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    byte[] byteArray0 = new byte[1];\n    byteArray0[0] = (byte) (-100);\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);\n    assertSame(bigInteger0, bigInteger1);\n}",
            "TestRelevantFocal": "[cast###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:33:42 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.math.BigInteger;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class BigIntegerFormatter_ESTest extends BigIntegerFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String format(ZapposJson zapposJson, BigInteger object) {\n    if (getPattern() != null) {\n        return toJsonValue(zapposJson, new DecimalFormat(getPattern()).format(object));\n    }\n    return object.toString();\n}",
            "all_field_declaration": "",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "ZapposJson,BigInteger",
            "Import_statements": "import java.math.BigInteger;\nimport java.text.DecimalFormat;\nimport com.zappos.json.ZapposJson;\n",
            "public_method_signature": "public BigInteger cast(Object obj);\npublic String format(ZapposJson zapposJson, BigInteger object);\npublic BigInteger parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigInteger> newInstance();",
            "public_field": "",
            "Method_statement": "format(ZapposJson zapposJson, BigInteger object)",
            "Method_name": "format",
            "Class_declaration": "public class BigIntegerFormatter {\n",
            "constructors": "",
            "all_method_signature": "public BigInteger cast(Object obj);\npublic String format(ZapposJson zapposJson, BigInteger object);\npublic BigInteger parse(ZapposJson zapposJson, String string) throws Exception;\npublic ValueFormatter<BigInteger> newInstance();",
            "Class_name": "BigIntegerFormatter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/format/BigIntegerFormatter.java###format",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.math.BigInteger;\n\nimport java.text.DecimalFormat;\n\nimport com.zappos.json.ZapposJson;\n",
            "comment": "",
            "packageName": "com.zappos.json.format",
            "method_signature": "public String format(ZapposJson zapposJson, BigInteger object);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[BigIntegerFormatter_ESTest.java###test00+++getInstance###0, BigIntegerFormatter_ESTest.java###test00+++parse###2, BigIntegerFormatter_ESTest.java###test00+++assertEquals###2, BigIntegerFormatter_ESTest.java###test00+++byteValue###0, BigIntegerFormatter_ESTest.java###test01+++getInstance###0, BigIntegerFormatter_ESTest.java###test01+++parse###2, BigIntegerFormatter_ESTest.java###test01+++assertEquals###2, BigIntegerFormatter_ESTest.java###test01+++shortValue###0, BigIntegerFormatter_ESTest.java###test02+++getInstance###0, BigIntegerFormatter_ESTest.java###test02+++parse###2, BigIntegerFormatter_ESTest.java###test02+++assertEquals###2, BigIntegerFormatter_ESTest.java###test02+++byteValue###0, BigIntegerFormatter_ESTest.java###test03+++cast###1, BigIntegerFormatter_ESTest.java###test03+++assertNull###1, BigIntegerFormatter_ESTest.java###test04+++cast###1, BigIntegerFormatter_ESTest.java###test04+++assertSame###2, BigIntegerFormatter_ESTest.java###test05+++cast###1, BigIntegerFormatter_ESTest.java###test05+++assertSame###2, BigIntegerFormatter_ESTest.java###test06+++getInstance###0, BigIntegerFormatter_ESTest.java###test06+++verifyException###2, BigIntegerFormatter_ESTest.java###test06+++parse###2, BigIntegerFormatter_ESTest.java###test06+++fail###1, BigIntegerFormatter_ESTest.java###test07+++getInstance###0, BigIntegerFormatter_ESTest.java###test07+++parse###2, BigIntegerFormatter_ESTest.java###test07+++fail###1, BigIntegerFormatter_ESTest.java###test08+++verifyException###2, BigIntegerFormatter_ESTest.java###test08+++format###2, BigIntegerFormatter_ESTest.java###test08+++fail###1, BigIntegerFormatter_ESTest.java###test09+++cast###1, BigIntegerFormatter_ESTest.java###test09+++fail###1, BigIntegerFormatter_ESTest.java###test10+++getInstance###0, BigIntegerFormatter_ESTest.java###test10+++parse###2, BigIntegerFormatter_ESTest.java###test10+++assertEquals###2, BigIntegerFormatter_ESTest.java###test10+++shortValue###0, BigIntegerFormatter_ESTest.java###test11+++getInstance###0, BigIntegerFormatter_ESTest.java###test11+++format###2, BigIntegerFormatter_ESTest.java###test11+++assertEquals###2, BigIntegerFormatter_ESTest.java###test12+++cast###1, BigIntegerFormatter_ESTest.java###test12+++assertSame###2, BigIntegerFormatter_ESTest.java###test13+++newInstance###0, BigIntegerFormatter_ESTest.java###test13+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:33:42 GMT 2024\n */\n\npackage com.zappos.json.format;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class BigIntegerFormatter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.format.BigIntegerFormatter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BigIntegerFormatter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BigIntegerFormatter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport java.math.BigInteger;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/format/BigIntegerFormatter_ESTest.java###test11",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"0\");\n    assertEquals((byte) 0, bigInteger0.byteValue());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"10\");\n    assertEquals((short) 10, bigInteger0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"-1739128425\");\n    assertEquals((byte) (-105), bigInteger0.byteValue());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    BigInteger bigInteger0 = bigIntegerFormatter0.cast((Object) null);\n    assertNull(bigInteger0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    BigInteger bigInteger0 = BigInteger.TEN;\n    BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);\n    assertSame(bigInteger0, bigInteger1);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    byte[] byteArray0 = new byte[1];\n    byteArray0[0] = (byte) (-100);\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);\n    assertSame(bigInteger0, bigInteger1);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        bigIntegerFormatter0.parse(zapposJson0, \"Ta$w=f\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        // \n        // For input string: \\\"Ta$w=f\\\"\n        // \n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    try {\n        bigIntegerFormatter0.parse(zapposJson0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.format((ZapposJson) null, (BigInteger) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.format.BigIntegerFormatter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    Object object0 = new Object();\n    // Undeclared exception!\n    try {\n        bigIntegerFormatter0.cast(object0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, \"-3524910708137984256\");\n    assertEquals((short) (-256), bigInteger0.shortValue());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    byte[] byteArray0 = new byte[8];\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    String string0 = bigIntegerFormatter0.format(zapposJson0, bigInteger0);\n    assertEquals(\"0\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    byte[] byteArray0 = new byte[8];\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);\n    assertSame(bigInteger1, bigInteger0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ValueFormatter<BigInteger> valueFormatter0 = bigIntegerFormatter0.newInstance();\n    assertNotSame(bigIntegerFormatter0, valueFormatter0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    byte[] byteArray0 = new byte[8];\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    String string0 = bigIntegerFormatter0.format(zapposJson0, bigInteger0);\n    assertEquals(\"0\", string0);\n}",
            "TestRelevantFocal": "[format###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:33:42 GMT 2024\n */\npackage com.zappos.json.format;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.BigIntegerFormatter;\nimport com.zappos.json.format.ValueFormatter;\nimport java.math.BigInteger;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class BigIntegerFormatter_ESTest extends BigIntegerFormatter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException {\n    writer.write(JsonWriter.CONST_DOUBLE_QUOTE);\n    JsonUtils.escape(zapposJson, value, writer);\n    writer.write(JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "all_field_declaration": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';\nprotected ZapposJson zapposJson;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "public static final char CONST_DOUBLE_QUOTE = '\"';protected ZapposJson zapposJson;",
            "Parameter_type": "ZapposJson,String,Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\nimport com.zappos.json.util.JsonUtils;\n",
            "public_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "public_field": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';",
            "Method_statement": "writeString(ZapposJson zapposJson, String value, Writer writer)",
            "Method_name": "writeString",
            "Class_declaration": "public class JsonWriter {\n",
            "constructors": "public JsonWriter(ZapposJson jacinda) {\n    this.zapposJson = jacinda;\n}",
            "all_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "Class_name": "JsonWriter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriter.java###writeString",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Writer;\n\nimport java.util.Iterator;\n\nimport java.util.Map;\n\nimport javax.xml.bind.DatatypeConverter;\n\nimport com.zappos.json.util.JsonUtils;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriter_ESTest.java###test00+++getInstance###1, JsonWriter_ESTest.java###test00+++writeString###3, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++toString###0, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++size###0, JsonWriter_ESTest.java###test01+++createTempFile###2, JsonWriter_ESTest.java###test01+++writeEnum###3, JsonWriter_ESTest.java###test02+++verifyException###2, JsonWriter_ESTest.java###test02+++writeMap###3, JsonWriter_ESTest.java###test02+++fail###1, JsonWriter_ESTest.java###test03+++getInstance###1, JsonWriter_ESTest.java###test03+++put###2, JsonWriter_ESTest.java###test03+++verifyException###2, JsonWriter_ESTest.java###test03+++writeMap###3, JsonWriter_ESTest.java###test03+++fail###1, JsonWriter_ESTest.java###test04+++verifyException###2, JsonWriter_ESTest.java###test04+++writeMap###3, JsonWriter_ESTest.java###test04+++fail###1, JsonWriter_ESTest.java###test05+++verifyException###2, JsonWriter_ESTest.java###test05+++writeIterable###3, JsonWriter_ESTest.java###test05+++fail###1, JsonWriter_ESTest.java###test06+++getInstance###0, JsonWriter_ESTest.java###test06+++add###1, JsonWriter_ESTest.java###test06+++verifyException###2, JsonWriter_ESTest.java###test06+++writeIterable###3, JsonWriter_ESTest.java###test06+++fail###1, JsonWriter_ESTest.java###test07+++verifyException###2, JsonWriter_ESTest.java###test07+++writeIterable###3, JsonWriter_ESTest.java###test07+++fail###1, JsonWriter_ESTest.java###test08+++createTempFile###2, JsonWriter_ESTest.java###test08+++verifyException###2, JsonWriter_ESTest.java###test08+++writeEnum###3, JsonWriter_ESTest.java###test08+++fail###1, JsonWriter_ESTest.java###test09+++verifyException###2, JsonWriter_ESTest.java###test09+++writeBoolean###3, JsonWriter_ESTest.java###test09+++fail###1, JsonWriter_ESTest.java###test10+++verifyException###2, JsonWriter_ESTest.java###test10+++writeBase64String###3, JsonWriter_ESTest.java###test10+++fail###1, JsonWriter_ESTest.java###test11+++verifyException###2, JsonWriter_ESTest.java###test11+++writeArray###2, JsonWriter_ESTest.java###test11+++fail###1, JsonWriter_ESTest.java###test12+++verifyException###2, JsonWriter_ESTest.java###test12+++writeArray###2, JsonWriter_ESTest.java###test12+++fail###1, JsonWriter_ESTest.java###test13+++verifyException###2, JsonWriter_ESTest.java###test13+++writeArray###2, JsonWriter_ESTest.java###test13+++fail###1, JsonWriter_ESTest.java###test14+++verifyException###2, JsonWriter_ESTest.java###test14+++writeArray###2, JsonWriter_ESTest.java###test14+++fail###1, JsonWriter_ESTest.java###test15+++verifyException###2, JsonWriter_ESTest.java###test15+++writeArray###2, JsonWriter_ESTest.java###test15+++fail###1, JsonWriter_ESTest.java###test16+++verifyException###2, JsonWriter_ESTest.java###test16+++writeArray###2, JsonWriter_ESTest.java###test16+++fail###1, JsonWriter_ESTest.java###test17+++verifyException###2, JsonWriter_ESTest.java###test17+++writeArray###2, JsonWriter_ESTest.java###test17+++fail###1, JsonWriter_ESTest.java###test18+++verifyException###2, JsonWriter_ESTest.java###test18+++writeArray###2, JsonWriter_ESTest.java###test18+++fail###1, JsonWriter_ESTest.java###test19+++verifyException###2, JsonWriter_ESTest.java###test19+++writeArray###2, JsonWriter_ESTest.java###test19+++fail###1, JsonWriter_ESTest.java###test20+++verifyException###2, JsonWriter_ESTest.java###test20+++writeArray###2, JsonWriter_ESTest.java###test20+++fail###1, JsonWriter_ESTest.java###test21+++verifyException###2, JsonWriter_ESTest.java###test21+++writeArray###2, JsonWriter_ESTest.java###test21+++fail###1, JsonWriter_ESTest.java###test22+++verifyException###2, JsonWriter_ESTest.java###test22+++writeArray###2, JsonWriter_ESTest.java###test22+++fail###1, JsonWriter_ESTest.java###test23+++verifyException###2, JsonWriter_ESTest.java###test23+++writeArray###2, JsonWriter_ESTest.java###test23+++fail###1, JsonWriter_ESTest.java###test24+++verifyException###2, JsonWriter_ESTest.java###test24+++writeArray###2, JsonWriter_ESTest.java###test24+++fail###1, JsonWriter_ESTest.java###test25+++verifyException###2, JsonWriter_ESTest.java###test25+++writeArray###3, JsonWriter_ESTest.java###test25+++fail###1, JsonWriter_ESTest.java###test26+++getInstance###1, JsonWriter_ESTest.java###test26+++verifyException###2, JsonWriter_ESTest.java###test26+++writeArray###3, JsonWriter_ESTest.java###test26+++fail###1, JsonWriter_ESTest.java###test27+++verifyException###2, JsonWriter_ESTest.java###test27+++writeArray###3, JsonWriter_ESTest.java###test27+++fail###1, JsonWriter_ESTest.java###test28+++getInstance###1, JsonWriter_ESTest.java###test28+++writeString###3, JsonWriter_ESTest.java###test28+++fail###1, JsonWriter_ESTest.java###test29+++writeNumber###3, JsonWriter_ESTest.java###test30+++writeArray###2, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++size###0, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++toString###0, JsonWriter_ESTest.java###test31+++writeArray###2, JsonWriter_ESTest.java###test31+++assertEquals###2, JsonWriter_ESTest.java###test31+++toString###0, JsonWriter_ESTest.java###test32+++writeArray###2, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++size###0, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++toString###0, JsonWriter_ESTest.java###test33+++writeArray###2, JsonWriter_ESTest.java###test33+++assertEquals###2, JsonWriter_ESTest.java###test33+++toString###0, JsonWriter_ESTest.java###test34+++writeArray###2, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++size###0, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++toString###0, JsonWriter_ESTest.java###test35+++writeArray###2, JsonWriter_ESTest.java###test35+++assertEquals###2, JsonWriter_ESTest.java###test35+++toString###0, JsonWriter_ESTest.java###test36+++writeArray###2, JsonWriter_ESTest.java###test36+++assertEquals###2, JsonWriter_ESTest.java###test36+++toString###0, JsonWriter_ESTest.java###test37+++writeArray###2, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++toString###0, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++size###0, JsonWriter_ESTest.java###test38+++writeArray###2, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++size###0, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++toString###0, JsonWriter_ESTest.java###test39+++writeArray###2, JsonWriter_ESTest.java###test39+++assertEquals###2, JsonWriter_ESTest.java###test39+++toString###0, JsonWriter_ESTest.java###test40+++writeArray###2, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++size###0, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++toString###0, JsonWriter_ESTest.java###test41+++writeArray###2, JsonWriter_ESTest.java###test41+++assertEquals###2, JsonWriter_ESTest.java###test41+++toString###0, JsonWriter_ESTest.java###test42+++writeArray###2, JsonWriter_ESTest.java###test42+++assertEquals###2, JsonWriter_ESTest.java###test42+++toString###0, JsonWriter_ESTest.java###test43+++writeArray###2, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++toString###0, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++size###0, JsonWriter_ESTest.java###test44+++getInstance###0, JsonWriter_ESTest.java###test44+++writeArray###3, JsonWriter_ESTest.java###test44+++assertEquals###2, JsonWriter_ESTest.java###test44+++toString###0, JsonWriter_ESTest.java###test45+++writeArray###3, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++size###0, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++toString###0, JsonWriter_ESTest.java###test46+++getInstance###0, JsonWriter_ESTest.java###test46+++writeMap###3, JsonWriter_ESTest.java###test46+++assertEquals###2, JsonWriter_ESTest.java###test46+++size###0, JsonWriter_ESTest.java###test47+++mock###2, JsonWriter_ESTest.java###test47+++writeIterable###3, JsonWriter_ESTest.java###test47+++assertEquals###2, JsonWriter_ESTest.java###test47+++toString###0, JsonWriter_ESTest.java###test48+++getInstance###1, JsonWriter_ESTest.java###test48+++writeBoolean###3, JsonWriter_ESTest.java###test49+++writeBase64String###3, JsonWriter_ESTest.java###test49+++assertEquals###2, JsonWriter_ESTest.java###test49+++toString###0, JsonWriter_ESTest.java###test50+++getInstance###1, JsonWriter_ESTest.java###test50+++getAvailableZoneIds###0, JsonWriter_ESTest.java###test50+++verifyException###2, JsonWriter_ESTest.java###test50+++writeIterable###3, JsonWriter_ESTest.java###test50+++fail###1, JsonWriter_ESTest.java###test51+++getInstance###1, JsonWriter_ESTest.java###test51+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:01:13 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class JsonWriter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, JsonWriter_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.NoOpValueFormatter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.Writer;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeString(zapposJson0, \"TG$gvGV}05y\", mockPrintWriter0);\n    assertEquals(\"\\\"TG$gvGV}05y\\\"\", charArrayWriter0.toString());\n    assertEquals(13, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap((ZapposJson) null, (Map<?, ?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Cannot find type of Map\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"Cannot find type of Map\");\n    HashMap<Object, JsonConfig.ReaderConfig> hashMap0 = new HashMap<Object, JsonConfig.ReaderConfig>();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    hashMap0.put(mockPrintWriter0, jsonConfig_ReaderConfig0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, mockPrintWriter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable((ZapposJson) null, (Iterable<?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    HashSet<Object> hashSet0 = new HashSet<Object>(1011);\n    hashSet0.add(charArrayWriter0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, hashSet0, charArrayWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(8232);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeIterable(zapposJson0, linkedHashSet0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeEnum(zapposJson0, (Enum<?>) null, mockFileWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBoolean(zapposJson0, (Boolean) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((boolean[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    boolean[] booleanArray0 = new boolean[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(booleanArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((short[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    short[] shortArray0 = new short[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(shortArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((long[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    long[] longArray0 = new long[6];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((int[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int[] intArray0 = new int[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(intArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((float[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    float[] floatArray0 = new float[7];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(floatArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((double[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(doubleArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((char[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    char[] charArray0 = new char[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(charArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, (Object[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) charArrayWriter0;\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) mockPrintWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeString(zapposJson0, (String) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"EH|\", \"EH|\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[6];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0,0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[0];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[3];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[0];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[6];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0,0,0,0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[0];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[0];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[3];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n    assertEquals(7, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[3];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(7, charArrayWriter0.size());\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[0];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[4];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[false,false,false,false]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[0];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[0];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[9];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\"]\", charArrayWriter0.toString());\n    assertEquals(82, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object[] objectArray0 = new Object[0];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[2];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(11, charArrayWriter0.size());\n    assertEquals(\"[null,null]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"'sCQv\");\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonWriter.writeMap(zapposJson0, map0, mockPrintWriter0);\n    assertEquals(28, map0.size());\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);\n    JsonWriter.writeIterable(zapposJson0, treeSet0, stringWriter0);\n    assertEquals(\"[]\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    byte[] byteArray0 = new byte[0];\n    JsonWriter.writeBase64String(zapposJson0, byteArray0, charArrayWriter0);\n    assertEquals(\"\\\"\\\"\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Character @ = new Character((String)@);\\n\");\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    JsonWriter jsonWriter0 = new JsonWriter(zapposJson0);\n    assertEquals('\\\"', JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeString(zapposJson0, \"TG$gvGV}05y\", mockPrintWriter0);\n    assertEquals(\"\\\"TG$gvGV}05y\\\"\", charArrayWriter0.toString());\n    assertEquals(13, charArrayWriter0.size());\n}",
            "TestRelevantFocal": "[writeString###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:01:13 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.time.ZoneId;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException {\n    writeString(zapposJson, value.name(), writer);\n}",
            "all_field_declaration": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';\nprotected ZapposJson zapposJson;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "protected ZapposJson zapposJson;",
            "Parameter_type": "ZapposJson,Enum<?>,Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\n",
            "public_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "public_field": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';",
            "Method_statement": "writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer)",
            "Method_name": "writeEnum",
            "Class_declaration": "public class JsonWriter {\n",
            "constructors": "public JsonWriter(ZapposJson jacinda) {\n    this.zapposJson = jacinda;\n}",
            "all_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "Class_name": "JsonWriter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriter.java###writeEnum",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Writer;\n\nimport java.util.Iterator;\n\nimport java.util.Map;\n\nimport javax.xml.bind.DatatypeConverter;\n\nimport com.zappos.json.util.JsonUtils;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriter_ESTest.java###test00+++getInstance###1, JsonWriter_ESTest.java###test00+++writeString###3, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++toString###0, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++size###0, JsonWriter_ESTest.java###test01+++createTempFile###2, JsonWriter_ESTest.java###test01+++writeEnum###3, JsonWriter_ESTest.java###test02+++verifyException###2, JsonWriter_ESTest.java###test02+++writeMap###3, JsonWriter_ESTest.java###test02+++fail###1, JsonWriter_ESTest.java###test03+++getInstance###1, JsonWriter_ESTest.java###test03+++put###2, JsonWriter_ESTest.java###test03+++verifyException###2, JsonWriter_ESTest.java###test03+++writeMap###3, JsonWriter_ESTest.java###test03+++fail###1, JsonWriter_ESTest.java###test04+++verifyException###2, JsonWriter_ESTest.java###test04+++writeMap###3, JsonWriter_ESTest.java###test04+++fail###1, JsonWriter_ESTest.java###test05+++verifyException###2, JsonWriter_ESTest.java###test05+++writeIterable###3, JsonWriter_ESTest.java###test05+++fail###1, JsonWriter_ESTest.java###test06+++getInstance###0, JsonWriter_ESTest.java###test06+++add###1, JsonWriter_ESTest.java###test06+++verifyException###2, JsonWriter_ESTest.java###test06+++writeIterable###3, JsonWriter_ESTest.java###test06+++fail###1, JsonWriter_ESTest.java###test07+++verifyException###2, JsonWriter_ESTest.java###test07+++writeIterable###3, JsonWriter_ESTest.java###test07+++fail###1, JsonWriter_ESTest.java###test08+++createTempFile###2, JsonWriter_ESTest.java###test08+++verifyException###2, JsonWriter_ESTest.java###test08+++writeEnum###3, JsonWriter_ESTest.java###test08+++fail###1, JsonWriter_ESTest.java###test09+++verifyException###2, JsonWriter_ESTest.java###test09+++writeBoolean###3, JsonWriter_ESTest.java###test09+++fail###1, JsonWriter_ESTest.java###test10+++verifyException###2, JsonWriter_ESTest.java###test10+++writeBase64String###3, JsonWriter_ESTest.java###test10+++fail###1, JsonWriter_ESTest.java###test11+++verifyException###2, JsonWriter_ESTest.java###test11+++writeArray###2, JsonWriter_ESTest.java###test11+++fail###1, JsonWriter_ESTest.java###test12+++verifyException###2, JsonWriter_ESTest.java###test12+++writeArray###2, JsonWriter_ESTest.java###test12+++fail###1, JsonWriter_ESTest.java###test13+++verifyException###2, JsonWriter_ESTest.java###test13+++writeArray###2, JsonWriter_ESTest.java###test13+++fail###1, JsonWriter_ESTest.java###test14+++verifyException###2, JsonWriter_ESTest.java###test14+++writeArray###2, JsonWriter_ESTest.java###test14+++fail###1, JsonWriter_ESTest.java###test15+++verifyException###2, JsonWriter_ESTest.java###test15+++writeArray###2, JsonWriter_ESTest.java###test15+++fail###1, JsonWriter_ESTest.java###test16+++verifyException###2, JsonWriter_ESTest.java###test16+++writeArray###2, JsonWriter_ESTest.java###test16+++fail###1, JsonWriter_ESTest.java###test17+++verifyException###2, JsonWriter_ESTest.java###test17+++writeArray###2, JsonWriter_ESTest.java###test17+++fail###1, JsonWriter_ESTest.java###test18+++verifyException###2, JsonWriter_ESTest.java###test18+++writeArray###2, JsonWriter_ESTest.java###test18+++fail###1, JsonWriter_ESTest.java###test19+++verifyException###2, JsonWriter_ESTest.java###test19+++writeArray###2, JsonWriter_ESTest.java###test19+++fail###1, JsonWriter_ESTest.java###test20+++verifyException###2, JsonWriter_ESTest.java###test20+++writeArray###2, JsonWriter_ESTest.java###test20+++fail###1, JsonWriter_ESTest.java###test21+++verifyException###2, JsonWriter_ESTest.java###test21+++writeArray###2, JsonWriter_ESTest.java###test21+++fail###1, JsonWriter_ESTest.java###test22+++verifyException###2, JsonWriter_ESTest.java###test22+++writeArray###2, JsonWriter_ESTest.java###test22+++fail###1, JsonWriter_ESTest.java###test23+++verifyException###2, JsonWriter_ESTest.java###test23+++writeArray###2, JsonWriter_ESTest.java###test23+++fail###1, JsonWriter_ESTest.java###test24+++verifyException###2, JsonWriter_ESTest.java###test24+++writeArray###2, JsonWriter_ESTest.java###test24+++fail###1, JsonWriter_ESTest.java###test25+++verifyException###2, JsonWriter_ESTest.java###test25+++writeArray###3, JsonWriter_ESTest.java###test25+++fail###1, JsonWriter_ESTest.java###test26+++getInstance###1, JsonWriter_ESTest.java###test26+++verifyException###2, JsonWriter_ESTest.java###test26+++writeArray###3, JsonWriter_ESTest.java###test26+++fail###1, JsonWriter_ESTest.java###test27+++verifyException###2, JsonWriter_ESTest.java###test27+++writeArray###3, JsonWriter_ESTest.java###test27+++fail###1, JsonWriter_ESTest.java###test28+++getInstance###1, JsonWriter_ESTest.java###test28+++writeString###3, JsonWriter_ESTest.java###test28+++fail###1, JsonWriter_ESTest.java###test29+++writeNumber###3, JsonWriter_ESTest.java###test30+++writeArray###2, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++size###0, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++toString###0, JsonWriter_ESTest.java###test31+++writeArray###2, JsonWriter_ESTest.java###test31+++assertEquals###2, JsonWriter_ESTest.java###test31+++toString###0, JsonWriter_ESTest.java###test32+++writeArray###2, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++size###0, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++toString###0, JsonWriter_ESTest.java###test33+++writeArray###2, JsonWriter_ESTest.java###test33+++assertEquals###2, JsonWriter_ESTest.java###test33+++toString###0, JsonWriter_ESTest.java###test34+++writeArray###2, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++size###0, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++toString###0, JsonWriter_ESTest.java###test35+++writeArray###2, JsonWriter_ESTest.java###test35+++assertEquals###2, JsonWriter_ESTest.java###test35+++toString###0, JsonWriter_ESTest.java###test36+++writeArray###2, JsonWriter_ESTest.java###test36+++assertEquals###2, JsonWriter_ESTest.java###test36+++toString###0, JsonWriter_ESTest.java###test37+++writeArray###2, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++toString###0, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++size###0, JsonWriter_ESTest.java###test38+++writeArray###2, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++size###0, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++toString###0, JsonWriter_ESTest.java###test39+++writeArray###2, JsonWriter_ESTest.java###test39+++assertEquals###2, JsonWriter_ESTest.java###test39+++toString###0, JsonWriter_ESTest.java###test40+++writeArray###2, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++size###0, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++toString###0, JsonWriter_ESTest.java###test41+++writeArray###2, JsonWriter_ESTest.java###test41+++assertEquals###2, JsonWriter_ESTest.java###test41+++toString###0, JsonWriter_ESTest.java###test42+++writeArray###2, JsonWriter_ESTest.java###test42+++assertEquals###2, JsonWriter_ESTest.java###test42+++toString###0, JsonWriter_ESTest.java###test43+++writeArray###2, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++toString###0, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++size###0, JsonWriter_ESTest.java###test44+++getInstance###0, JsonWriter_ESTest.java###test44+++writeArray###3, JsonWriter_ESTest.java###test44+++assertEquals###2, JsonWriter_ESTest.java###test44+++toString###0, JsonWriter_ESTest.java###test45+++writeArray###3, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++size###0, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++toString###0, JsonWriter_ESTest.java###test46+++getInstance###0, JsonWriter_ESTest.java###test46+++writeMap###3, JsonWriter_ESTest.java###test46+++assertEquals###2, JsonWriter_ESTest.java###test46+++size###0, JsonWriter_ESTest.java###test47+++mock###2, JsonWriter_ESTest.java###test47+++writeIterable###3, JsonWriter_ESTest.java###test47+++assertEquals###2, JsonWriter_ESTest.java###test47+++toString###0, JsonWriter_ESTest.java###test48+++getInstance###1, JsonWriter_ESTest.java###test48+++writeBoolean###3, JsonWriter_ESTest.java###test49+++writeBase64String###3, JsonWriter_ESTest.java###test49+++assertEquals###2, JsonWriter_ESTest.java###test49+++toString###0, JsonWriter_ESTest.java###test50+++getInstance###1, JsonWriter_ESTest.java###test50+++getAvailableZoneIds###0, JsonWriter_ESTest.java###test50+++verifyException###2, JsonWriter_ESTest.java###test50+++writeIterable###3, JsonWriter_ESTest.java###test50+++fail###1, JsonWriter_ESTest.java###test51+++getInstance###1, JsonWriter_ESTest.java###test51+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:01:13 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class JsonWriter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, JsonWriter_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.NoOpValueFormatter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.File;\nimport java.io.Writer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeString(zapposJson0, \"TG$gvGV}05y\", mockPrintWriter0);\n    assertEquals(\"\\\"TG$gvGV}05y\\\"\", charArrayWriter0.toString());\n    assertEquals(13, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap((ZapposJson) null, (Map<?, ?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Cannot find type of Map\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"Cannot find type of Map\");\n    HashMap<Object, JsonConfig.ReaderConfig> hashMap0 = new HashMap<Object, JsonConfig.ReaderConfig>();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    hashMap0.put(mockPrintWriter0, jsonConfig_ReaderConfig0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, mockPrintWriter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable((ZapposJson) null, (Iterable<?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    HashSet<Object> hashSet0 = new HashSet<Object>(1011);\n    hashSet0.add(charArrayWriter0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, hashSet0, charArrayWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(8232);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeIterable(zapposJson0, linkedHashSet0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeEnum(zapposJson0, (Enum<?>) null, mockFileWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBoolean(zapposJson0, (Boolean) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((boolean[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    boolean[] booleanArray0 = new boolean[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(booleanArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((short[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    short[] shortArray0 = new short[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(shortArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((long[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    long[] longArray0 = new long[6];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((int[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int[] intArray0 = new int[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(intArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((float[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    float[] floatArray0 = new float[7];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(floatArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((double[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(doubleArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((char[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    char[] charArray0 = new char[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(charArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, (Object[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) charArrayWriter0;\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) mockPrintWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeString(zapposJson0, (String) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"EH|\", \"EH|\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[6];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0,0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[0];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[3];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[0];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[6];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0,0,0,0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[0];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[0];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[3];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n    assertEquals(7, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[3];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(7, charArrayWriter0.size());\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[0];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[4];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[false,false,false,false]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[0];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[0];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[9];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\"]\", charArrayWriter0.toString());\n    assertEquals(82, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object[] objectArray0 = new Object[0];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[2];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(11, charArrayWriter0.size());\n    assertEquals(\"[null,null]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"'sCQv\");\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonWriter.writeMap(zapposJson0, map0, mockPrintWriter0);\n    assertEquals(28, map0.size());\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);\n    JsonWriter.writeIterable(zapposJson0, treeSet0, stringWriter0);\n    assertEquals(\"[]\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    byte[] byteArray0 = new byte[0];\n    JsonWriter.writeBase64String(zapposJson0, byteArray0, charArrayWriter0);\n    assertEquals(\"\\\"\\\"\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Character @ = new Character((String)@);\\n\");\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    JsonWriter jsonWriter0 = new JsonWriter(zapposJson0);\n    assertEquals('\\\"', JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);\n}",
            "TestRelevantFocal": "[writeEnum###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:01:13 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.time.ZoneId;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException {\n    writer.append(JsonWriter.CONST_OPEN_OBJECT);\n    boolean second = false;\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (second) {\n            writer.append(JsonWriter.CONST_COMMA);\n        } else {\n            second = true;\n        }\n        JsonWriter.writeString(zapposJson, (String) entry.getKey(), writer);\n        writer.append(JsonWriter.CONST_COLON);\n        zapposJson.toJson(entry.getValue(), writer);\n    }\n    writer.append(JsonWriter.CONST_CLOSE_OBJECT);\n}",
            "all_field_declaration": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';\nprotected ZapposJson zapposJson;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "4",
            "Filed": "public static final char CONST_COMMA = ',';public static final char CONST_COLON = ':';public static final char CONST_OPEN_OBJECT = '{';public static final char CONST_CLOSE_OBJECT = '}';protected ZapposJson zapposJson;",
            "Parameter_type": "ZapposJson,Map<?, ?>,Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\nimport java.util.Map;\n",
            "public_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "public_field": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';",
            "Method_statement": "writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer)",
            "Method_name": "writeMap",
            "Class_declaration": "public class JsonWriter {\n",
            "constructors": "public JsonWriter(ZapposJson jacinda) {\n    this.zapposJson = jacinda;\n}",
            "all_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "Class_name": "JsonWriter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriter.java###writeMap",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Writer;\n\nimport java.util.Iterator;\n\nimport java.util.Map;\n\nimport javax.xml.bind.DatatypeConverter;\n\nimport com.zappos.json.util.JsonUtils;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriter_ESTest.java###test00+++getInstance###1, JsonWriter_ESTest.java###test00+++writeString###3, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++toString###0, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++size###0, JsonWriter_ESTest.java###test01+++createTempFile###2, JsonWriter_ESTest.java###test01+++writeEnum###3, JsonWriter_ESTest.java###test02+++verifyException###2, JsonWriter_ESTest.java###test02+++writeMap###3, JsonWriter_ESTest.java###test02+++fail###1, JsonWriter_ESTest.java###test03+++getInstance###1, JsonWriter_ESTest.java###test03+++put###2, JsonWriter_ESTest.java###test03+++verifyException###2, JsonWriter_ESTest.java###test03+++writeMap###3, JsonWriter_ESTest.java###test03+++fail###1, JsonWriter_ESTest.java###test04+++verifyException###2, JsonWriter_ESTest.java###test04+++writeMap###3, JsonWriter_ESTest.java###test04+++fail###1, JsonWriter_ESTest.java###test05+++verifyException###2, JsonWriter_ESTest.java###test05+++writeIterable###3, JsonWriter_ESTest.java###test05+++fail###1, JsonWriter_ESTest.java###test06+++getInstance###0, JsonWriter_ESTest.java###test06+++add###1, JsonWriter_ESTest.java###test06+++verifyException###2, JsonWriter_ESTest.java###test06+++writeIterable###3, JsonWriter_ESTest.java###test06+++fail###1, JsonWriter_ESTest.java###test07+++verifyException###2, JsonWriter_ESTest.java###test07+++writeIterable###3, JsonWriter_ESTest.java###test07+++fail###1, JsonWriter_ESTest.java###test08+++createTempFile###2, JsonWriter_ESTest.java###test08+++verifyException###2, JsonWriter_ESTest.java###test08+++writeEnum###3, JsonWriter_ESTest.java###test08+++fail###1, JsonWriter_ESTest.java###test09+++verifyException###2, JsonWriter_ESTest.java###test09+++writeBoolean###3, JsonWriter_ESTest.java###test09+++fail###1, JsonWriter_ESTest.java###test10+++verifyException###2, JsonWriter_ESTest.java###test10+++writeBase64String###3, JsonWriter_ESTest.java###test10+++fail###1, JsonWriter_ESTest.java###test11+++verifyException###2, JsonWriter_ESTest.java###test11+++writeArray###2, JsonWriter_ESTest.java###test11+++fail###1, JsonWriter_ESTest.java###test12+++verifyException###2, JsonWriter_ESTest.java###test12+++writeArray###2, JsonWriter_ESTest.java###test12+++fail###1, JsonWriter_ESTest.java###test13+++verifyException###2, JsonWriter_ESTest.java###test13+++writeArray###2, JsonWriter_ESTest.java###test13+++fail###1, JsonWriter_ESTest.java###test14+++verifyException###2, JsonWriter_ESTest.java###test14+++writeArray###2, JsonWriter_ESTest.java###test14+++fail###1, JsonWriter_ESTest.java###test15+++verifyException###2, JsonWriter_ESTest.java###test15+++writeArray###2, JsonWriter_ESTest.java###test15+++fail###1, JsonWriter_ESTest.java###test16+++verifyException###2, JsonWriter_ESTest.java###test16+++writeArray###2, JsonWriter_ESTest.java###test16+++fail###1, JsonWriter_ESTest.java###test17+++verifyException###2, JsonWriter_ESTest.java###test17+++writeArray###2, JsonWriter_ESTest.java###test17+++fail###1, JsonWriter_ESTest.java###test18+++verifyException###2, JsonWriter_ESTest.java###test18+++writeArray###2, JsonWriter_ESTest.java###test18+++fail###1, JsonWriter_ESTest.java###test19+++verifyException###2, JsonWriter_ESTest.java###test19+++writeArray###2, JsonWriter_ESTest.java###test19+++fail###1, JsonWriter_ESTest.java###test20+++verifyException###2, JsonWriter_ESTest.java###test20+++writeArray###2, JsonWriter_ESTest.java###test20+++fail###1, JsonWriter_ESTest.java###test21+++verifyException###2, JsonWriter_ESTest.java###test21+++writeArray###2, JsonWriter_ESTest.java###test21+++fail###1, JsonWriter_ESTest.java###test22+++verifyException###2, JsonWriter_ESTest.java###test22+++writeArray###2, JsonWriter_ESTest.java###test22+++fail###1, JsonWriter_ESTest.java###test23+++verifyException###2, JsonWriter_ESTest.java###test23+++writeArray###2, JsonWriter_ESTest.java###test23+++fail###1, JsonWriter_ESTest.java###test24+++verifyException###2, JsonWriter_ESTest.java###test24+++writeArray###2, JsonWriter_ESTest.java###test24+++fail###1, JsonWriter_ESTest.java###test25+++verifyException###2, JsonWriter_ESTest.java###test25+++writeArray###3, JsonWriter_ESTest.java###test25+++fail###1, JsonWriter_ESTest.java###test26+++getInstance###1, JsonWriter_ESTest.java###test26+++verifyException###2, JsonWriter_ESTest.java###test26+++writeArray###3, JsonWriter_ESTest.java###test26+++fail###1, JsonWriter_ESTest.java###test27+++verifyException###2, JsonWriter_ESTest.java###test27+++writeArray###3, JsonWriter_ESTest.java###test27+++fail###1, JsonWriter_ESTest.java###test28+++getInstance###1, JsonWriter_ESTest.java###test28+++writeString###3, JsonWriter_ESTest.java###test28+++fail###1, JsonWriter_ESTest.java###test29+++writeNumber###3, JsonWriter_ESTest.java###test30+++writeArray###2, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++size###0, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++toString###0, JsonWriter_ESTest.java###test31+++writeArray###2, JsonWriter_ESTest.java###test31+++assertEquals###2, JsonWriter_ESTest.java###test31+++toString###0, JsonWriter_ESTest.java###test32+++writeArray###2, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++size###0, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++toString###0, JsonWriter_ESTest.java###test33+++writeArray###2, JsonWriter_ESTest.java###test33+++assertEquals###2, JsonWriter_ESTest.java###test33+++toString###0, JsonWriter_ESTest.java###test34+++writeArray###2, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++size###0, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++toString###0, JsonWriter_ESTest.java###test35+++writeArray###2, JsonWriter_ESTest.java###test35+++assertEquals###2, JsonWriter_ESTest.java###test35+++toString###0, JsonWriter_ESTest.java###test36+++writeArray###2, JsonWriter_ESTest.java###test36+++assertEquals###2, JsonWriter_ESTest.java###test36+++toString###0, JsonWriter_ESTest.java###test37+++writeArray###2, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++toString###0, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++size###0, JsonWriter_ESTest.java###test38+++writeArray###2, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++size###0, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++toString###0, JsonWriter_ESTest.java###test39+++writeArray###2, JsonWriter_ESTest.java###test39+++assertEquals###2, JsonWriter_ESTest.java###test39+++toString###0, JsonWriter_ESTest.java###test40+++writeArray###2, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++size###0, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++toString###0, JsonWriter_ESTest.java###test41+++writeArray###2, JsonWriter_ESTest.java###test41+++assertEquals###2, JsonWriter_ESTest.java###test41+++toString###0, JsonWriter_ESTest.java###test42+++writeArray###2, JsonWriter_ESTest.java###test42+++assertEquals###2, JsonWriter_ESTest.java###test42+++toString###0, JsonWriter_ESTest.java###test43+++writeArray###2, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++toString###0, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++size###0, JsonWriter_ESTest.java###test44+++getInstance###0, JsonWriter_ESTest.java###test44+++writeArray###3, JsonWriter_ESTest.java###test44+++assertEquals###2, JsonWriter_ESTest.java###test44+++toString###0, JsonWriter_ESTest.java###test45+++writeArray###3, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++size###0, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++toString###0, JsonWriter_ESTest.java###test46+++getInstance###0, JsonWriter_ESTest.java###test46+++writeMap###3, JsonWriter_ESTest.java###test46+++assertEquals###2, JsonWriter_ESTest.java###test46+++size###0, JsonWriter_ESTest.java###test47+++mock###2, JsonWriter_ESTest.java###test47+++writeIterable###3, JsonWriter_ESTest.java###test47+++assertEquals###2, JsonWriter_ESTest.java###test47+++toString###0, JsonWriter_ESTest.java###test48+++getInstance###1, JsonWriter_ESTest.java###test48+++writeBoolean###3, JsonWriter_ESTest.java###test49+++writeBase64String###3, JsonWriter_ESTest.java###test49+++assertEquals###2, JsonWriter_ESTest.java###test49+++toString###0, JsonWriter_ESTest.java###test50+++getInstance###1, JsonWriter_ESTest.java###test50+++getAvailableZoneIds###0, JsonWriter_ESTest.java###test50+++verifyException###2, JsonWriter_ESTest.java###test50+++writeIterable###3, JsonWriter_ESTest.java###test50+++fail###1, JsonWriter_ESTest.java###test51+++getInstance###1, JsonWriter_ESTest.java###test51+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:01:13 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class JsonWriter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, JsonWriter_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.NoOpValueFormatter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeString(zapposJson0, \"TG$gvGV}05y\", mockPrintWriter0);\n    assertEquals(\"\\\"TG$gvGV}05y\\\"\", charArrayWriter0.toString());\n    assertEquals(13, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap((ZapposJson) null, (Map<?, ?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Cannot find type of Map\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"Cannot find type of Map\");\n    HashMap<Object, JsonConfig.ReaderConfig> hashMap0 = new HashMap<Object, JsonConfig.ReaderConfig>();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    hashMap0.put(mockPrintWriter0, jsonConfig_ReaderConfig0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, mockPrintWriter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable((ZapposJson) null, (Iterable<?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    HashSet<Object> hashSet0 = new HashSet<Object>(1011);\n    hashSet0.add(charArrayWriter0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, hashSet0, charArrayWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(8232);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeIterable(zapposJson0, linkedHashSet0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeEnum(zapposJson0, (Enum<?>) null, mockFileWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBoolean(zapposJson0, (Boolean) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((boolean[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    boolean[] booleanArray0 = new boolean[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(booleanArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((short[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    short[] shortArray0 = new short[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(shortArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((long[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    long[] longArray0 = new long[6];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((int[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int[] intArray0 = new int[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(intArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((float[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    float[] floatArray0 = new float[7];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(floatArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((double[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(doubleArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((char[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    char[] charArray0 = new char[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(charArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, (Object[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) charArrayWriter0;\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) mockPrintWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeString(zapposJson0, (String) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"EH|\", \"EH|\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[6];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0,0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[0];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[3];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[0];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[6];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0,0,0,0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[0];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[0];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[3];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n    assertEquals(7, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[3];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(7, charArrayWriter0.size());\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[0];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[4];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[false,false,false,false]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[0];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[0];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[9];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\"]\", charArrayWriter0.toString());\n    assertEquals(82, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object[] objectArray0 = new Object[0];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[2];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(11, charArrayWriter0.size());\n    assertEquals(\"[null,null]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"'sCQv\");\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonWriter.writeMap(zapposJson0, map0, mockPrintWriter0);\n    assertEquals(28, map0.size());\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);\n    JsonWriter.writeIterable(zapposJson0, treeSet0, stringWriter0);\n    assertEquals(\"[]\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    byte[] byteArray0 = new byte[0];\n    JsonWriter.writeBase64String(zapposJson0, byteArray0, charArrayWriter0);\n    assertEquals(\"\\\"\\\"\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Character @ = new Character((String)@);\\n\");\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    JsonWriter jsonWriter0 = new JsonWriter(zapposJson0);\n    assertEquals('\\\"', JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}",
            "TestRelevantFocal": "[writeMap###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:01:13 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.time.ZoneId;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException {\n    writer.append(JsonWriter.CONST_OPEN_ARRAY);\n    Iterator<?> iterator = iterable.iterator();\n    if (iterator.hasNext()) {\n        zapposJson.toJson(iterator.next(), writer);\n    }\n    while (iterator.hasNext()) {\n        writer.append(JsonWriter.CONST_COMMA);\n        zapposJson.toJson(iterator.next(), writer);\n    }\n    writer.append(JsonWriter.CONST_CLOSE_ARRAY);\n}",
            "all_field_declaration": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';\nprotected ZapposJson zapposJson;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "5",
            "Filed": "public static final char CONST_COMMA = ',';public static final char CONST_OPEN_ARRAY = '[';public static final char CONST_CLOSE_ARRAY = ']';protected ZapposJson zapposJson;",
            "Parameter_type": "ZapposJson,Iterable<?>,Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\nimport java.util.Iterator;\n",
            "public_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "public_field": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';",
            "Method_statement": "writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer)",
            "Method_name": "writeIterable",
            "Class_declaration": "public class JsonWriter {\n",
            "constructors": "public JsonWriter(ZapposJson jacinda) {\n    this.zapposJson = jacinda;\n}",
            "all_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "Class_name": "JsonWriter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriter.java###writeIterable",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Writer;\n\nimport java.util.Iterator;\n\nimport java.util.Map;\n\nimport javax.xml.bind.DatatypeConverter;\n\nimport com.zappos.json.util.JsonUtils;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriter_ESTest.java###test00+++getInstance###1, JsonWriter_ESTest.java###test00+++writeString###3, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++toString###0, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++size###0, JsonWriter_ESTest.java###test01+++createTempFile###2, JsonWriter_ESTest.java###test01+++writeEnum###3, JsonWriter_ESTest.java###test02+++verifyException###2, JsonWriter_ESTest.java###test02+++writeMap###3, JsonWriter_ESTest.java###test02+++fail###1, JsonWriter_ESTest.java###test03+++getInstance###1, JsonWriter_ESTest.java###test03+++put###2, JsonWriter_ESTest.java###test03+++verifyException###2, JsonWriter_ESTest.java###test03+++writeMap###3, JsonWriter_ESTest.java###test03+++fail###1, JsonWriter_ESTest.java###test04+++verifyException###2, JsonWriter_ESTest.java###test04+++writeMap###3, JsonWriter_ESTest.java###test04+++fail###1, JsonWriter_ESTest.java###test05+++verifyException###2, JsonWriter_ESTest.java###test05+++writeIterable###3, JsonWriter_ESTest.java###test05+++fail###1, JsonWriter_ESTest.java###test06+++getInstance###0, JsonWriter_ESTest.java###test06+++add###1, JsonWriter_ESTest.java###test06+++verifyException###2, JsonWriter_ESTest.java###test06+++writeIterable###3, JsonWriter_ESTest.java###test06+++fail###1, JsonWriter_ESTest.java###test07+++verifyException###2, JsonWriter_ESTest.java###test07+++writeIterable###3, JsonWriter_ESTest.java###test07+++fail###1, JsonWriter_ESTest.java###test08+++createTempFile###2, JsonWriter_ESTest.java###test08+++verifyException###2, JsonWriter_ESTest.java###test08+++writeEnum###3, JsonWriter_ESTest.java###test08+++fail###1, JsonWriter_ESTest.java###test09+++verifyException###2, JsonWriter_ESTest.java###test09+++writeBoolean###3, JsonWriter_ESTest.java###test09+++fail###1, JsonWriter_ESTest.java###test10+++verifyException###2, JsonWriter_ESTest.java###test10+++writeBase64String###3, JsonWriter_ESTest.java###test10+++fail###1, JsonWriter_ESTest.java###test11+++verifyException###2, JsonWriter_ESTest.java###test11+++writeArray###2, JsonWriter_ESTest.java###test11+++fail###1, JsonWriter_ESTest.java###test12+++verifyException###2, JsonWriter_ESTest.java###test12+++writeArray###2, JsonWriter_ESTest.java###test12+++fail###1, JsonWriter_ESTest.java###test13+++verifyException###2, JsonWriter_ESTest.java###test13+++writeArray###2, JsonWriter_ESTest.java###test13+++fail###1, JsonWriter_ESTest.java###test14+++verifyException###2, JsonWriter_ESTest.java###test14+++writeArray###2, JsonWriter_ESTest.java###test14+++fail###1, JsonWriter_ESTest.java###test15+++verifyException###2, JsonWriter_ESTest.java###test15+++writeArray###2, JsonWriter_ESTest.java###test15+++fail###1, JsonWriter_ESTest.java###test16+++verifyException###2, JsonWriter_ESTest.java###test16+++writeArray###2, JsonWriter_ESTest.java###test16+++fail###1, JsonWriter_ESTest.java###test17+++verifyException###2, JsonWriter_ESTest.java###test17+++writeArray###2, JsonWriter_ESTest.java###test17+++fail###1, JsonWriter_ESTest.java###test18+++verifyException###2, JsonWriter_ESTest.java###test18+++writeArray###2, JsonWriter_ESTest.java###test18+++fail###1, JsonWriter_ESTest.java###test19+++verifyException###2, JsonWriter_ESTest.java###test19+++writeArray###2, JsonWriter_ESTest.java###test19+++fail###1, JsonWriter_ESTest.java###test20+++verifyException###2, JsonWriter_ESTest.java###test20+++writeArray###2, JsonWriter_ESTest.java###test20+++fail###1, JsonWriter_ESTest.java###test21+++verifyException###2, JsonWriter_ESTest.java###test21+++writeArray###2, JsonWriter_ESTest.java###test21+++fail###1, JsonWriter_ESTest.java###test22+++verifyException###2, JsonWriter_ESTest.java###test22+++writeArray###2, JsonWriter_ESTest.java###test22+++fail###1, JsonWriter_ESTest.java###test23+++verifyException###2, JsonWriter_ESTest.java###test23+++writeArray###2, JsonWriter_ESTest.java###test23+++fail###1, JsonWriter_ESTest.java###test24+++verifyException###2, JsonWriter_ESTest.java###test24+++writeArray###2, JsonWriter_ESTest.java###test24+++fail###1, JsonWriter_ESTest.java###test25+++verifyException###2, JsonWriter_ESTest.java###test25+++writeArray###3, JsonWriter_ESTest.java###test25+++fail###1, JsonWriter_ESTest.java###test26+++getInstance###1, JsonWriter_ESTest.java###test26+++verifyException###2, JsonWriter_ESTest.java###test26+++writeArray###3, JsonWriter_ESTest.java###test26+++fail###1, JsonWriter_ESTest.java###test27+++verifyException###2, JsonWriter_ESTest.java###test27+++writeArray###3, JsonWriter_ESTest.java###test27+++fail###1, JsonWriter_ESTest.java###test28+++getInstance###1, JsonWriter_ESTest.java###test28+++writeString###3, JsonWriter_ESTest.java###test28+++fail###1, JsonWriter_ESTest.java###test29+++writeNumber###3, JsonWriter_ESTest.java###test30+++writeArray###2, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++size###0, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++toString###0, JsonWriter_ESTest.java###test31+++writeArray###2, JsonWriter_ESTest.java###test31+++assertEquals###2, JsonWriter_ESTest.java###test31+++toString###0, JsonWriter_ESTest.java###test32+++writeArray###2, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++size###0, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++toString###0, JsonWriter_ESTest.java###test33+++writeArray###2, JsonWriter_ESTest.java###test33+++assertEquals###2, JsonWriter_ESTest.java###test33+++toString###0, JsonWriter_ESTest.java###test34+++writeArray###2, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++size###0, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++toString###0, JsonWriter_ESTest.java###test35+++writeArray###2, JsonWriter_ESTest.java###test35+++assertEquals###2, JsonWriter_ESTest.java###test35+++toString###0, JsonWriter_ESTest.java###test36+++writeArray###2, JsonWriter_ESTest.java###test36+++assertEquals###2, JsonWriter_ESTest.java###test36+++toString###0, JsonWriter_ESTest.java###test37+++writeArray###2, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++toString###0, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++size###0, JsonWriter_ESTest.java###test38+++writeArray###2, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++size###0, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++toString###0, JsonWriter_ESTest.java###test39+++writeArray###2, JsonWriter_ESTest.java###test39+++assertEquals###2, JsonWriter_ESTest.java###test39+++toString###0, JsonWriter_ESTest.java###test40+++writeArray###2, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++size###0, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++toString###0, JsonWriter_ESTest.java###test41+++writeArray###2, JsonWriter_ESTest.java###test41+++assertEquals###2, JsonWriter_ESTest.java###test41+++toString###0, JsonWriter_ESTest.java###test42+++writeArray###2, JsonWriter_ESTest.java###test42+++assertEquals###2, JsonWriter_ESTest.java###test42+++toString###0, JsonWriter_ESTest.java###test43+++writeArray###2, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++toString###0, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++size###0, JsonWriter_ESTest.java###test44+++getInstance###0, JsonWriter_ESTest.java###test44+++writeArray###3, JsonWriter_ESTest.java###test44+++assertEquals###2, JsonWriter_ESTest.java###test44+++toString###0, JsonWriter_ESTest.java###test45+++writeArray###3, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++size###0, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++toString###0, JsonWriter_ESTest.java###test46+++getInstance###0, JsonWriter_ESTest.java###test46+++writeMap###3, JsonWriter_ESTest.java###test46+++assertEquals###2, JsonWriter_ESTest.java###test46+++size###0, JsonWriter_ESTest.java###test47+++mock###2, JsonWriter_ESTest.java###test47+++writeIterable###3, JsonWriter_ESTest.java###test47+++assertEquals###2, JsonWriter_ESTest.java###test47+++toString###0, JsonWriter_ESTest.java###test48+++getInstance###1, JsonWriter_ESTest.java###test48+++writeBoolean###3, JsonWriter_ESTest.java###test49+++writeBase64String###3, JsonWriter_ESTest.java###test49+++assertEquals###2, JsonWriter_ESTest.java###test49+++toString###0, JsonWriter_ESTest.java###test50+++getInstance###1, JsonWriter_ESTest.java###test50+++getAvailableZoneIds###0, JsonWriter_ESTest.java###test50+++verifyException###2, JsonWriter_ESTest.java###test50+++writeIterable###3, JsonWriter_ESTest.java###test50+++fail###1, JsonWriter_ESTest.java###test51+++getInstance###1, JsonWriter_ESTest.java###test51+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:01:13 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class JsonWriter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, JsonWriter_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.NoOpValueFormatter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.Writer;\nimport java.time.ZoneId;\nimport java.util.Set;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java###test50",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeString(zapposJson0, \"TG$gvGV}05y\", mockPrintWriter0);\n    assertEquals(\"\\\"TG$gvGV}05y\\\"\", charArrayWriter0.toString());\n    assertEquals(13, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap((ZapposJson) null, (Map<?, ?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Cannot find type of Map\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"Cannot find type of Map\");\n    HashMap<Object, JsonConfig.ReaderConfig> hashMap0 = new HashMap<Object, JsonConfig.ReaderConfig>();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    hashMap0.put(mockPrintWriter0, jsonConfig_ReaderConfig0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, mockPrintWriter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable((ZapposJson) null, (Iterable<?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    HashSet<Object> hashSet0 = new HashSet<Object>(1011);\n    hashSet0.add(charArrayWriter0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, hashSet0, charArrayWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(8232);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeIterable(zapposJson0, linkedHashSet0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeEnum(zapposJson0, (Enum<?>) null, mockFileWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBoolean(zapposJson0, (Boolean) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((boolean[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    boolean[] booleanArray0 = new boolean[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(booleanArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((short[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    short[] shortArray0 = new short[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(shortArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((long[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    long[] longArray0 = new long[6];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((int[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int[] intArray0 = new int[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(intArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((float[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    float[] floatArray0 = new float[7];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(floatArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((double[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(doubleArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((char[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    char[] charArray0 = new char[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(charArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, (Object[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) charArrayWriter0;\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) mockPrintWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeString(zapposJson0, (String) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"EH|\", \"EH|\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[6];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0,0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[0];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[3];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[0];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[6];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0,0,0,0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[0];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[0];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[3];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n    assertEquals(7, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[3];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(7, charArrayWriter0.size());\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[0];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[4];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[false,false,false,false]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[0];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[0];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[9];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\"]\", charArrayWriter0.toString());\n    assertEquals(82, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object[] objectArray0 = new Object[0];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[2];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(11, charArrayWriter0.size());\n    assertEquals(\"[null,null]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"'sCQv\");\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonWriter.writeMap(zapposJson0, map0, mockPrintWriter0);\n    assertEquals(28, map0.size());\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);\n    JsonWriter.writeIterable(zapposJson0, treeSet0, stringWriter0);\n    assertEquals(\"[]\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    byte[] byteArray0 = new byte[0];\n    JsonWriter.writeBase64String(zapposJson0, byteArray0, charArrayWriter0);\n    assertEquals(\"\\\"\\\"\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Character @ = new Character((String)@);\\n\");\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    JsonWriter jsonWriter0 = new JsonWriter(zapposJson0);\n    assertEquals('\\\"', JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Character @ = new Character((String)@);\\n\");\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}",
            "TestRelevantFocal": "[writeIterable###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:01:13 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.time.ZoneId;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException {\n    writer.append(value.toString());\n}",
            "all_field_declaration": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';\nprotected ZapposJson zapposJson;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "protected ZapposJson zapposJson;",
            "Parameter_type": "ZapposJson,Boolean,Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\n",
            "public_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "public_field": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';",
            "Method_statement": "writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer)",
            "Method_name": "writeBoolean",
            "Class_declaration": "public class JsonWriter {\n",
            "constructors": "public JsonWriter(ZapposJson jacinda) {\n    this.zapposJson = jacinda;\n}",
            "all_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "Class_name": "JsonWriter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriter.java###writeBoolean",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Writer;\n\nimport java.util.Iterator;\n\nimport java.util.Map;\n\nimport javax.xml.bind.DatatypeConverter;\n\nimport com.zappos.json.util.JsonUtils;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriter_ESTest.java###test00+++getInstance###1, JsonWriter_ESTest.java###test00+++writeString###3, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++toString###0, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++size###0, JsonWriter_ESTest.java###test01+++createTempFile###2, JsonWriter_ESTest.java###test01+++writeEnum###3, JsonWriter_ESTest.java###test02+++verifyException###2, JsonWriter_ESTest.java###test02+++writeMap###3, JsonWriter_ESTest.java###test02+++fail###1, JsonWriter_ESTest.java###test03+++getInstance###1, JsonWriter_ESTest.java###test03+++put###2, JsonWriter_ESTest.java###test03+++verifyException###2, JsonWriter_ESTest.java###test03+++writeMap###3, JsonWriter_ESTest.java###test03+++fail###1, JsonWriter_ESTest.java###test04+++verifyException###2, JsonWriter_ESTest.java###test04+++writeMap###3, JsonWriter_ESTest.java###test04+++fail###1, JsonWriter_ESTest.java###test05+++verifyException###2, JsonWriter_ESTest.java###test05+++writeIterable###3, JsonWriter_ESTest.java###test05+++fail###1, JsonWriter_ESTest.java###test06+++getInstance###0, JsonWriter_ESTest.java###test06+++add###1, JsonWriter_ESTest.java###test06+++verifyException###2, JsonWriter_ESTest.java###test06+++writeIterable###3, JsonWriter_ESTest.java###test06+++fail###1, JsonWriter_ESTest.java###test07+++verifyException###2, JsonWriter_ESTest.java###test07+++writeIterable###3, JsonWriter_ESTest.java###test07+++fail###1, JsonWriter_ESTest.java###test08+++createTempFile###2, JsonWriter_ESTest.java###test08+++verifyException###2, JsonWriter_ESTest.java###test08+++writeEnum###3, JsonWriter_ESTest.java###test08+++fail###1, JsonWriter_ESTest.java###test09+++verifyException###2, JsonWriter_ESTest.java###test09+++writeBoolean###3, JsonWriter_ESTest.java###test09+++fail###1, JsonWriter_ESTest.java###test10+++verifyException###2, JsonWriter_ESTest.java###test10+++writeBase64String###3, JsonWriter_ESTest.java###test10+++fail###1, JsonWriter_ESTest.java###test11+++verifyException###2, JsonWriter_ESTest.java###test11+++writeArray###2, JsonWriter_ESTest.java###test11+++fail###1, JsonWriter_ESTest.java###test12+++verifyException###2, JsonWriter_ESTest.java###test12+++writeArray###2, JsonWriter_ESTest.java###test12+++fail###1, JsonWriter_ESTest.java###test13+++verifyException###2, JsonWriter_ESTest.java###test13+++writeArray###2, JsonWriter_ESTest.java###test13+++fail###1, JsonWriter_ESTest.java###test14+++verifyException###2, JsonWriter_ESTest.java###test14+++writeArray###2, JsonWriter_ESTest.java###test14+++fail###1, JsonWriter_ESTest.java###test15+++verifyException###2, JsonWriter_ESTest.java###test15+++writeArray###2, JsonWriter_ESTest.java###test15+++fail###1, JsonWriter_ESTest.java###test16+++verifyException###2, JsonWriter_ESTest.java###test16+++writeArray###2, JsonWriter_ESTest.java###test16+++fail###1, JsonWriter_ESTest.java###test17+++verifyException###2, JsonWriter_ESTest.java###test17+++writeArray###2, JsonWriter_ESTest.java###test17+++fail###1, JsonWriter_ESTest.java###test18+++verifyException###2, JsonWriter_ESTest.java###test18+++writeArray###2, JsonWriter_ESTest.java###test18+++fail###1, JsonWriter_ESTest.java###test19+++verifyException###2, JsonWriter_ESTest.java###test19+++writeArray###2, JsonWriter_ESTest.java###test19+++fail###1, JsonWriter_ESTest.java###test20+++verifyException###2, JsonWriter_ESTest.java###test20+++writeArray###2, JsonWriter_ESTest.java###test20+++fail###1, JsonWriter_ESTest.java###test21+++verifyException###2, JsonWriter_ESTest.java###test21+++writeArray###2, JsonWriter_ESTest.java###test21+++fail###1, JsonWriter_ESTest.java###test22+++verifyException###2, JsonWriter_ESTest.java###test22+++writeArray###2, JsonWriter_ESTest.java###test22+++fail###1, JsonWriter_ESTest.java###test23+++verifyException###2, JsonWriter_ESTest.java###test23+++writeArray###2, JsonWriter_ESTest.java###test23+++fail###1, JsonWriter_ESTest.java###test24+++verifyException###2, JsonWriter_ESTest.java###test24+++writeArray###2, JsonWriter_ESTest.java###test24+++fail###1, JsonWriter_ESTest.java###test25+++verifyException###2, JsonWriter_ESTest.java###test25+++writeArray###3, JsonWriter_ESTest.java###test25+++fail###1, JsonWriter_ESTest.java###test26+++getInstance###1, JsonWriter_ESTest.java###test26+++verifyException###2, JsonWriter_ESTest.java###test26+++writeArray###3, JsonWriter_ESTest.java###test26+++fail###1, JsonWriter_ESTest.java###test27+++verifyException###2, JsonWriter_ESTest.java###test27+++writeArray###3, JsonWriter_ESTest.java###test27+++fail###1, JsonWriter_ESTest.java###test28+++getInstance###1, JsonWriter_ESTest.java###test28+++writeString###3, JsonWriter_ESTest.java###test28+++fail###1, JsonWriter_ESTest.java###test29+++writeNumber###3, JsonWriter_ESTest.java###test30+++writeArray###2, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++size###0, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++toString###0, JsonWriter_ESTest.java###test31+++writeArray###2, JsonWriter_ESTest.java###test31+++assertEquals###2, JsonWriter_ESTest.java###test31+++toString###0, JsonWriter_ESTest.java###test32+++writeArray###2, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++size###0, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++toString###0, JsonWriter_ESTest.java###test33+++writeArray###2, JsonWriter_ESTest.java###test33+++assertEquals###2, JsonWriter_ESTest.java###test33+++toString###0, JsonWriter_ESTest.java###test34+++writeArray###2, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++size###0, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++toString###0, JsonWriter_ESTest.java###test35+++writeArray###2, JsonWriter_ESTest.java###test35+++assertEquals###2, JsonWriter_ESTest.java###test35+++toString###0, JsonWriter_ESTest.java###test36+++writeArray###2, JsonWriter_ESTest.java###test36+++assertEquals###2, JsonWriter_ESTest.java###test36+++toString###0, JsonWriter_ESTest.java###test37+++writeArray###2, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++toString###0, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++size###0, JsonWriter_ESTest.java###test38+++writeArray###2, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++size###0, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++toString###0, JsonWriter_ESTest.java###test39+++writeArray###2, JsonWriter_ESTest.java###test39+++assertEquals###2, JsonWriter_ESTest.java###test39+++toString###0, JsonWriter_ESTest.java###test40+++writeArray###2, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++size###0, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++toString###0, JsonWriter_ESTest.java###test41+++writeArray###2, JsonWriter_ESTest.java###test41+++assertEquals###2, JsonWriter_ESTest.java###test41+++toString###0, JsonWriter_ESTest.java###test42+++writeArray###2, JsonWriter_ESTest.java###test42+++assertEquals###2, JsonWriter_ESTest.java###test42+++toString###0, JsonWriter_ESTest.java###test43+++writeArray###2, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++toString###0, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++size###0, JsonWriter_ESTest.java###test44+++getInstance###0, JsonWriter_ESTest.java###test44+++writeArray###3, JsonWriter_ESTest.java###test44+++assertEquals###2, JsonWriter_ESTest.java###test44+++toString###0, JsonWriter_ESTest.java###test45+++writeArray###3, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++size###0, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++toString###0, JsonWriter_ESTest.java###test46+++getInstance###0, JsonWriter_ESTest.java###test46+++writeMap###3, JsonWriter_ESTest.java###test46+++assertEquals###2, JsonWriter_ESTest.java###test46+++size###0, JsonWriter_ESTest.java###test47+++mock###2, JsonWriter_ESTest.java###test47+++writeIterable###3, JsonWriter_ESTest.java###test47+++assertEquals###2, JsonWriter_ESTest.java###test47+++toString###0, JsonWriter_ESTest.java###test48+++getInstance###1, JsonWriter_ESTest.java###test48+++writeBoolean###3, JsonWriter_ESTest.java###test49+++writeBase64String###3, JsonWriter_ESTest.java###test49+++assertEquals###2, JsonWriter_ESTest.java###test49+++toString###0, JsonWriter_ESTest.java###test50+++getInstance###1, JsonWriter_ESTest.java###test50+++getAvailableZoneIds###0, JsonWriter_ESTest.java###test50+++verifyException###2, JsonWriter_ESTest.java###test50+++writeIterable###3, JsonWriter_ESTest.java###test50+++fail###1, JsonWriter_ESTest.java###test51+++getInstance###1, JsonWriter_ESTest.java###test51+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:01:13 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class JsonWriter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, JsonWriter_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.NoOpValueFormatter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.Writer;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java###test48",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeString(zapposJson0, \"TG$gvGV}05y\", mockPrintWriter0);\n    assertEquals(\"\\\"TG$gvGV}05y\\\"\", charArrayWriter0.toString());\n    assertEquals(13, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap((ZapposJson) null, (Map<?, ?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Cannot find type of Map\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"Cannot find type of Map\");\n    HashMap<Object, JsonConfig.ReaderConfig> hashMap0 = new HashMap<Object, JsonConfig.ReaderConfig>();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    hashMap0.put(mockPrintWriter0, jsonConfig_ReaderConfig0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, mockPrintWriter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable((ZapposJson) null, (Iterable<?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    HashSet<Object> hashSet0 = new HashSet<Object>(1011);\n    hashSet0.add(charArrayWriter0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, hashSet0, charArrayWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(8232);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeIterable(zapposJson0, linkedHashSet0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeEnum(zapposJson0, (Enum<?>) null, mockFileWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBoolean(zapposJson0, (Boolean) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((boolean[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    boolean[] booleanArray0 = new boolean[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(booleanArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((short[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    short[] shortArray0 = new short[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(shortArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((long[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    long[] longArray0 = new long[6];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((int[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int[] intArray0 = new int[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(intArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((float[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    float[] floatArray0 = new float[7];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(floatArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((double[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(doubleArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((char[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    char[] charArray0 = new char[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(charArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, (Object[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) charArrayWriter0;\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) mockPrintWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeString(zapposJson0, (String) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"EH|\", \"EH|\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[6];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0,0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[0];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[3];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[0];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[6];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0,0,0,0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[0];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[0];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[3];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n    assertEquals(7, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[3];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(7, charArrayWriter0.size());\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[0];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[4];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[false,false,false,false]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[0];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[0];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[9];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\"]\", charArrayWriter0.toString());\n    assertEquals(82, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object[] objectArray0 = new Object[0];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[2];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(11, charArrayWriter0.size());\n    assertEquals(\"[null,null]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"'sCQv\");\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonWriter.writeMap(zapposJson0, map0, mockPrintWriter0);\n    assertEquals(28, map0.size());\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);\n    JsonWriter.writeIterable(zapposJson0, treeSet0, stringWriter0);\n    assertEquals(\"[]\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    byte[] byteArray0 = new byte[0];\n    JsonWriter.writeBase64String(zapposJson0, byteArray0, charArrayWriter0);\n    assertEquals(\"\\\"\\\"\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Character @ = new Character((String)@);\\n\");\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    JsonWriter jsonWriter0 = new JsonWriter(zapposJson0);\n    assertEquals('\\\"', JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);\n}",
            "TestRelevantFocal": "[writeBoolean###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:01:13 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.time.ZoneId;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException {\n    writer.write(JsonWriter.CONST_DOUBLE_QUOTE);\n    writer.write(DatatypeConverter.printBase64Binary(value));\n    writer.write(JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "all_field_declaration": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';\nprotected ZapposJson zapposJson;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "3",
            "Filed": "public static final char CONST_DOUBLE_QUOTE = '\"';protected ZapposJson zapposJson;",
            "Parameter_type": "ZapposJson,byte[],Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\nimport javax.xml.bind.DatatypeConverter;\n",
            "public_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "public_field": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';",
            "Method_statement": "writeBase64String(ZapposJson zapposJson, byte() value, Writer writer)",
            "Method_name": "writeBase64String",
            "Class_declaration": "public class JsonWriter {\n",
            "constructors": "public JsonWriter(ZapposJson jacinda) {\n    this.zapposJson = jacinda;\n}",
            "all_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "Class_name": "JsonWriter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriter.java###writeBase64String",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Writer;\n\nimport java.util.Iterator;\n\nimport java.util.Map;\n\nimport javax.xml.bind.DatatypeConverter;\n\nimport com.zappos.json.util.JsonUtils;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriter_ESTest.java###test00+++getInstance###1, JsonWriter_ESTest.java###test00+++writeString###3, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++toString###0, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++size###0, JsonWriter_ESTest.java###test01+++createTempFile###2, JsonWriter_ESTest.java###test01+++writeEnum###3, JsonWriter_ESTest.java###test02+++verifyException###2, JsonWriter_ESTest.java###test02+++writeMap###3, JsonWriter_ESTest.java###test02+++fail###1, JsonWriter_ESTest.java###test03+++getInstance###1, JsonWriter_ESTest.java###test03+++put###2, JsonWriter_ESTest.java###test03+++verifyException###2, JsonWriter_ESTest.java###test03+++writeMap###3, JsonWriter_ESTest.java###test03+++fail###1, JsonWriter_ESTest.java###test04+++verifyException###2, JsonWriter_ESTest.java###test04+++writeMap###3, JsonWriter_ESTest.java###test04+++fail###1, JsonWriter_ESTest.java###test05+++verifyException###2, JsonWriter_ESTest.java###test05+++writeIterable###3, JsonWriter_ESTest.java###test05+++fail###1, JsonWriter_ESTest.java###test06+++getInstance###0, JsonWriter_ESTest.java###test06+++add###1, JsonWriter_ESTest.java###test06+++verifyException###2, JsonWriter_ESTest.java###test06+++writeIterable###3, JsonWriter_ESTest.java###test06+++fail###1, JsonWriter_ESTest.java###test07+++verifyException###2, JsonWriter_ESTest.java###test07+++writeIterable###3, JsonWriter_ESTest.java###test07+++fail###1, JsonWriter_ESTest.java###test08+++createTempFile###2, JsonWriter_ESTest.java###test08+++verifyException###2, JsonWriter_ESTest.java###test08+++writeEnum###3, JsonWriter_ESTest.java###test08+++fail###1, JsonWriter_ESTest.java###test09+++verifyException###2, JsonWriter_ESTest.java###test09+++writeBoolean###3, JsonWriter_ESTest.java###test09+++fail###1, JsonWriter_ESTest.java###test10+++verifyException###2, JsonWriter_ESTest.java###test10+++writeBase64String###3, JsonWriter_ESTest.java###test10+++fail###1, JsonWriter_ESTest.java###test11+++verifyException###2, JsonWriter_ESTest.java###test11+++writeArray###2, JsonWriter_ESTest.java###test11+++fail###1, JsonWriter_ESTest.java###test12+++verifyException###2, JsonWriter_ESTest.java###test12+++writeArray###2, JsonWriter_ESTest.java###test12+++fail###1, JsonWriter_ESTest.java###test13+++verifyException###2, JsonWriter_ESTest.java###test13+++writeArray###2, JsonWriter_ESTest.java###test13+++fail###1, JsonWriter_ESTest.java###test14+++verifyException###2, JsonWriter_ESTest.java###test14+++writeArray###2, JsonWriter_ESTest.java###test14+++fail###1, JsonWriter_ESTest.java###test15+++verifyException###2, JsonWriter_ESTest.java###test15+++writeArray###2, JsonWriter_ESTest.java###test15+++fail###1, JsonWriter_ESTest.java###test16+++verifyException###2, JsonWriter_ESTest.java###test16+++writeArray###2, JsonWriter_ESTest.java###test16+++fail###1, JsonWriter_ESTest.java###test17+++verifyException###2, JsonWriter_ESTest.java###test17+++writeArray###2, JsonWriter_ESTest.java###test17+++fail###1, JsonWriter_ESTest.java###test18+++verifyException###2, JsonWriter_ESTest.java###test18+++writeArray###2, JsonWriter_ESTest.java###test18+++fail###1, JsonWriter_ESTest.java###test19+++verifyException###2, JsonWriter_ESTest.java###test19+++writeArray###2, JsonWriter_ESTest.java###test19+++fail###1, JsonWriter_ESTest.java###test20+++verifyException###2, JsonWriter_ESTest.java###test20+++writeArray###2, JsonWriter_ESTest.java###test20+++fail###1, JsonWriter_ESTest.java###test21+++verifyException###2, JsonWriter_ESTest.java###test21+++writeArray###2, JsonWriter_ESTest.java###test21+++fail###1, JsonWriter_ESTest.java###test22+++verifyException###2, JsonWriter_ESTest.java###test22+++writeArray###2, JsonWriter_ESTest.java###test22+++fail###1, JsonWriter_ESTest.java###test23+++verifyException###2, JsonWriter_ESTest.java###test23+++writeArray###2, JsonWriter_ESTest.java###test23+++fail###1, JsonWriter_ESTest.java###test24+++verifyException###2, JsonWriter_ESTest.java###test24+++writeArray###2, JsonWriter_ESTest.java###test24+++fail###1, JsonWriter_ESTest.java###test25+++verifyException###2, JsonWriter_ESTest.java###test25+++writeArray###3, JsonWriter_ESTest.java###test25+++fail###1, JsonWriter_ESTest.java###test26+++getInstance###1, JsonWriter_ESTest.java###test26+++verifyException###2, JsonWriter_ESTest.java###test26+++writeArray###3, JsonWriter_ESTest.java###test26+++fail###1, JsonWriter_ESTest.java###test27+++verifyException###2, JsonWriter_ESTest.java###test27+++writeArray###3, JsonWriter_ESTest.java###test27+++fail###1, JsonWriter_ESTest.java###test28+++getInstance###1, JsonWriter_ESTest.java###test28+++writeString###3, JsonWriter_ESTest.java###test28+++fail###1, JsonWriter_ESTest.java###test29+++writeNumber###3, JsonWriter_ESTest.java###test30+++writeArray###2, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++size###0, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++toString###0, JsonWriter_ESTest.java###test31+++writeArray###2, JsonWriter_ESTest.java###test31+++assertEquals###2, JsonWriter_ESTest.java###test31+++toString###0, JsonWriter_ESTest.java###test32+++writeArray###2, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++size###0, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++toString###0, JsonWriter_ESTest.java###test33+++writeArray###2, JsonWriter_ESTest.java###test33+++assertEquals###2, JsonWriter_ESTest.java###test33+++toString###0, JsonWriter_ESTest.java###test34+++writeArray###2, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++size###0, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++toString###0, JsonWriter_ESTest.java###test35+++writeArray###2, JsonWriter_ESTest.java###test35+++assertEquals###2, JsonWriter_ESTest.java###test35+++toString###0, JsonWriter_ESTest.java###test36+++writeArray###2, JsonWriter_ESTest.java###test36+++assertEquals###2, JsonWriter_ESTest.java###test36+++toString###0, JsonWriter_ESTest.java###test37+++writeArray###2, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++toString###0, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++size###0, JsonWriter_ESTest.java###test38+++writeArray###2, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++size###0, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++toString###0, JsonWriter_ESTest.java###test39+++writeArray###2, JsonWriter_ESTest.java###test39+++assertEquals###2, JsonWriter_ESTest.java###test39+++toString###0, JsonWriter_ESTest.java###test40+++writeArray###2, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++size###0, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++toString###0, JsonWriter_ESTest.java###test41+++writeArray###2, JsonWriter_ESTest.java###test41+++assertEquals###2, JsonWriter_ESTest.java###test41+++toString###0, JsonWriter_ESTest.java###test42+++writeArray###2, JsonWriter_ESTest.java###test42+++assertEquals###2, JsonWriter_ESTest.java###test42+++toString###0, JsonWriter_ESTest.java###test43+++writeArray###2, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++toString###0, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++size###0, JsonWriter_ESTest.java###test44+++getInstance###0, JsonWriter_ESTest.java###test44+++writeArray###3, JsonWriter_ESTest.java###test44+++assertEquals###2, JsonWriter_ESTest.java###test44+++toString###0, JsonWriter_ESTest.java###test45+++writeArray###3, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++size###0, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++toString###0, JsonWriter_ESTest.java###test46+++getInstance###0, JsonWriter_ESTest.java###test46+++writeMap###3, JsonWriter_ESTest.java###test46+++assertEquals###2, JsonWriter_ESTest.java###test46+++size###0, JsonWriter_ESTest.java###test47+++mock###2, JsonWriter_ESTest.java###test47+++writeIterable###3, JsonWriter_ESTest.java###test47+++assertEquals###2, JsonWriter_ESTest.java###test47+++toString###0, JsonWriter_ESTest.java###test48+++getInstance###1, JsonWriter_ESTest.java###test48+++writeBoolean###3, JsonWriter_ESTest.java###test49+++writeBase64String###3, JsonWriter_ESTest.java###test49+++assertEquals###2, JsonWriter_ESTest.java###test49+++toString###0, JsonWriter_ESTest.java###test50+++getInstance###1, JsonWriter_ESTest.java###test50+++getAvailableZoneIds###0, JsonWriter_ESTest.java###test50+++verifyException###2, JsonWriter_ESTest.java###test50+++writeIterable###3, JsonWriter_ESTest.java###test50+++fail###1, JsonWriter_ESTest.java###test51+++getInstance###1, JsonWriter_ESTest.java###test51+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:01:13 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class JsonWriter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, JsonWriter_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.NoOpValueFormatter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.Writer;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java###test10",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeString(zapposJson0, \"TG$gvGV}05y\", mockPrintWriter0);\n    assertEquals(\"\\\"TG$gvGV}05y\\\"\", charArrayWriter0.toString());\n    assertEquals(13, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap((ZapposJson) null, (Map<?, ?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Cannot find type of Map\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"Cannot find type of Map\");\n    HashMap<Object, JsonConfig.ReaderConfig> hashMap0 = new HashMap<Object, JsonConfig.ReaderConfig>();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    hashMap0.put(mockPrintWriter0, jsonConfig_ReaderConfig0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, mockPrintWriter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable((ZapposJson) null, (Iterable<?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    HashSet<Object> hashSet0 = new HashSet<Object>(1011);\n    hashSet0.add(charArrayWriter0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, hashSet0, charArrayWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(8232);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeIterable(zapposJson0, linkedHashSet0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeEnum(zapposJson0, (Enum<?>) null, mockFileWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBoolean(zapposJson0, (Boolean) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((boolean[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    boolean[] booleanArray0 = new boolean[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(booleanArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((short[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    short[] shortArray0 = new short[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(shortArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((long[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    long[] longArray0 = new long[6];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((int[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int[] intArray0 = new int[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(intArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((float[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    float[] floatArray0 = new float[7];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(floatArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((double[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(doubleArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((char[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    char[] charArray0 = new char[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(charArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, (Object[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) charArrayWriter0;\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) mockPrintWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeString(zapposJson0, (String) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"EH|\", \"EH|\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[6];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0,0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[0];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[3];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[0];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[6];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0,0,0,0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[0];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[0];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[3];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n    assertEquals(7, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[3];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(7, charArrayWriter0.size());\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[0];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[4];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[false,false,false,false]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[0];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[0];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[9];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\"]\", charArrayWriter0.toString());\n    assertEquals(82, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object[] objectArray0 = new Object[0];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[2];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(11, charArrayWriter0.size());\n    assertEquals(\"[null,null]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"'sCQv\");\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonWriter.writeMap(zapposJson0, map0, mockPrintWriter0);\n    assertEquals(28, map0.size());\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);\n    JsonWriter.writeIterable(zapposJson0, treeSet0, stringWriter0);\n    assertEquals(\"[]\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    byte[] byteArray0 = new byte[0];\n    JsonWriter.writeBase64String(zapposJson0, byteArray0, charArrayWriter0);\n    assertEquals(\"\\\"\\\"\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Character @ = new Character((String)@);\\n\");\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    JsonWriter jsonWriter0 = new JsonWriter(zapposJson0);\n    assertEquals('\\\"', JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}",
            "TestRelevantFocal": "[writeBase64String###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:01:13 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.time.ZoneId;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void writeArray(double[] values, Writer writer) throws IOException {\n    writer.append(JsonWriter.CONST_OPEN_ARRAY);\n    int j = values.length - 1;\n    for (int i = 0; i < j; i++) {\n        writer.append(String.valueOf(values[i]));\n        writer.append(JsonWriter.CONST_COMMA);\n    }\n    if (j > -1) {\n        writer.append(String.valueOf(values[j]));\n    }\n    writer.append(JsonWriter.CONST_CLOSE_ARRAY);\n}",
            "all_field_declaration": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';\nprotected ZapposJson zapposJson;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "5",
            "Filed": "public static final char CONST_COMMA = ',';public static final char CONST_OPEN_ARRAY = '[';public static final char CONST_CLOSE_ARRAY = ']';",
            "Parameter_type": "double[],Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\n",
            "public_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "public_field": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';",
            "Method_statement": "writeArray(double() values, Writer writer)",
            "Method_name": "writeArray",
            "Class_declaration": "public class JsonWriter {\n",
            "constructors": "public JsonWriter(ZapposJson jacinda) {\n    this.zapposJson = jacinda;\n}",
            "all_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "Class_name": "JsonWriter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriter.java###writeArray",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Writer;\n\nimport java.util.Iterator;\n\nimport java.util.Map;\n\nimport javax.xml.bind.DatatypeConverter;\n\nimport com.zappos.json.util.JsonUtils;\n",
            "comment": "\r\n   * \r\n   * @param values the array of double\r\n   * @param writer the writer object\r\n   * @throws IOException the exception that might throw when I/O operation performs\r\n   ",
            "packageName": "com.zappos.json",
            "method_signature": "public static void writeArray(double[] values, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriter_ESTest.java###test00+++getInstance###1, JsonWriter_ESTest.java###test00+++writeString###3, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++toString###0, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++size###0, JsonWriter_ESTest.java###test01+++createTempFile###2, JsonWriter_ESTest.java###test01+++writeEnum###3, JsonWriter_ESTest.java###test02+++verifyException###2, JsonWriter_ESTest.java###test02+++writeMap###3, JsonWriter_ESTest.java###test02+++fail###1, JsonWriter_ESTest.java###test03+++getInstance###1, JsonWriter_ESTest.java###test03+++put###2, JsonWriter_ESTest.java###test03+++verifyException###2, JsonWriter_ESTest.java###test03+++writeMap###3, JsonWriter_ESTest.java###test03+++fail###1, JsonWriter_ESTest.java###test04+++verifyException###2, JsonWriter_ESTest.java###test04+++writeMap###3, JsonWriter_ESTest.java###test04+++fail###1, JsonWriter_ESTest.java###test05+++verifyException###2, JsonWriter_ESTest.java###test05+++writeIterable###3, JsonWriter_ESTest.java###test05+++fail###1, JsonWriter_ESTest.java###test06+++getInstance###0, JsonWriter_ESTest.java###test06+++add###1, JsonWriter_ESTest.java###test06+++verifyException###2, JsonWriter_ESTest.java###test06+++writeIterable###3, JsonWriter_ESTest.java###test06+++fail###1, JsonWriter_ESTest.java###test07+++verifyException###2, JsonWriter_ESTest.java###test07+++writeIterable###3, JsonWriter_ESTest.java###test07+++fail###1, JsonWriter_ESTest.java###test08+++createTempFile###2, JsonWriter_ESTest.java###test08+++verifyException###2, JsonWriter_ESTest.java###test08+++writeEnum###3, JsonWriter_ESTest.java###test08+++fail###1, JsonWriter_ESTest.java###test09+++verifyException###2, JsonWriter_ESTest.java###test09+++writeBoolean###3, JsonWriter_ESTest.java###test09+++fail###1, JsonWriter_ESTest.java###test10+++verifyException###2, JsonWriter_ESTest.java###test10+++writeBase64String###3, JsonWriter_ESTest.java###test10+++fail###1, JsonWriter_ESTest.java###test11+++verifyException###2, JsonWriter_ESTest.java###test11+++writeArray###2, JsonWriter_ESTest.java###test11+++fail###1, JsonWriter_ESTest.java###test12+++verifyException###2, JsonWriter_ESTest.java###test12+++writeArray###2, JsonWriter_ESTest.java###test12+++fail###1, JsonWriter_ESTest.java###test13+++verifyException###2, JsonWriter_ESTest.java###test13+++writeArray###2, JsonWriter_ESTest.java###test13+++fail###1, JsonWriter_ESTest.java###test14+++verifyException###2, JsonWriter_ESTest.java###test14+++writeArray###2, JsonWriter_ESTest.java###test14+++fail###1, JsonWriter_ESTest.java###test15+++verifyException###2, JsonWriter_ESTest.java###test15+++writeArray###2, JsonWriter_ESTest.java###test15+++fail###1, JsonWriter_ESTest.java###test16+++verifyException###2, JsonWriter_ESTest.java###test16+++writeArray###2, JsonWriter_ESTest.java###test16+++fail###1, JsonWriter_ESTest.java###test17+++verifyException###2, JsonWriter_ESTest.java###test17+++writeArray###2, JsonWriter_ESTest.java###test17+++fail###1, JsonWriter_ESTest.java###test18+++verifyException###2, JsonWriter_ESTest.java###test18+++writeArray###2, JsonWriter_ESTest.java###test18+++fail###1, JsonWriter_ESTest.java###test19+++verifyException###2, JsonWriter_ESTest.java###test19+++writeArray###2, JsonWriter_ESTest.java###test19+++fail###1, JsonWriter_ESTest.java###test20+++verifyException###2, JsonWriter_ESTest.java###test20+++writeArray###2, JsonWriter_ESTest.java###test20+++fail###1, JsonWriter_ESTest.java###test21+++verifyException###2, JsonWriter_ESTest.java###test21+++writeArray###2, JsonWriter_ESTest.java###test21+++fail###1, JsonWriter_ESTest.java###test22+++verifyException###2, JsonWriter_ESTest.java###test22+++writeArray###2, JsonWriter_ESTest.java###test22+++fail###1, JsonWriter_ESTest.java###test23+++verifyException###2, JsonWriter_ESTest.java###test23+++writeArray###2, JsonWriter_ESTest.java###test23+++fail###1, JsonWriter_ESTest.java###test24+++verifyException###2, JsonWriter_ESTest.java###test24+++writeArray###2, JsonWriter_ESTest.java###test24+++fail###1, JsonWriter_ESTest.java###test25+++verifyException###2, JsonWriter_ESTest.java###test25+++writeArray###3, JsonWriter_ESTest.java###test25+++fail###1, JsonWriter_ESTest.java###test26+++getInstance###1, JsonWriter_ESTest.java###test26+++verifyException###2, JsonWriter_ESTest.java###test26+++writeArray###3, JsonWriter_ESTest.java###test26+++fail###1, JsonWriter_ESTest.java###test27+++verifyException###2, JsonWriter_ESTest.java###test27+++writeArray###3, JsonWriter_ESTest.java###test27+++fail###1, JsonWriter_ESTest.java###test28+++getInstance###1, JsonWriter_ESTest.java###test28+++writeString###3, JsonWriter_ESTest.java###test28+++fail###1, JsonWriter_ESTest.java###test29+++writeNumber###3, JsonWriter_ESTest.java###test30+++writeArray###2, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++size###0, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++toString###0, JsonWriter_ESTest.java###test31+++writeArray###2, JsonWriter_ESTest.java###test31+++assertEquals###2, JsonWriter_ESTest.java###test31+++toString###0, JsonWriter_ESTest.java###test32+++writeArray###2, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++size###0, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++toString###0, JsonWriter_ESTest.java###test33+++writeArray###2, JsonWriter_ESTest.java###test33+++assertEquals###2, JsonWriter_ESTest.java###test33+++toString###0, JsonWriter_ESTest.java###test34+++writeArray###2, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++size###0, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++toString###0, JsonWriter_ESTest.java###test35+++writeArray###2, JsonWriter_ESTest.java###test35+++assertEquals###2, JsonWriter_ESTest.java###test35+++toString###0, JsonWriter_ESTest.java###test36+++writeArray###2, JsonWriter_ESTest.java###test36+++assertEquals###2, JsonWriter_ESTest.java###test36+++toString###0, JsonWriter_ESTest.java###test37+++writeArray###2, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++toString###0, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++size###0, JsonWriter_ESTest.java###test38+++writeArray###2, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++size###0, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++toString###0, JsonWriter_ESTest.java###test39+++writeArray###2, JsonWriter_ESTest.java###test39+++assertEquals###2, JsonWriter_ESTest.java###test39+++toString###0, JsonWriter_ESTest.java###test40+++writeArray###2, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++size###0, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++toString###0, JsonWriter_ESTest.java###test41+++writeArray###2, JsonWriter_ESTest.java###test41+++assertEquals###2, JsonWriter_ESTest.java###test41+++toString###0, JsonWriter_ESTest.java###test42+++writeArray###2, JsonWriter_ESTest.java###test42+++assertEquals###2, JsonWriter_ESTest.java###test42+++toString###0, JsonWriter_ESTest.java###test43+++writeArray###2, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++toString###0, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++size###0, JsonWriter_ESTest.java###test44+++getInstance###0, JsonWriter_ESTest.java###test44+++writeArray###3, JsonWriter_ESTest.java###test44+++assertEquals###2, JsonWriter_ESTest.java###test44+++toString###0, JsonWriter_ESTest.java###test45+++writeArray###3, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++size###0, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++toString###0, JsonWriter_ESTest.java###test46+++getInstance###0, JsonWriter_ESTest.java###test46+++writeMap###3, JsonWriter_ESTest.java###test46+++assertEquals###2, JsonWriter_ESTest.java###test46+++size###0, JsonWriter_ESTest.java###test47+++mock###2, JsonWriter_ESTest.java###test47+++writeIterable###3, JsonWriter_ESTest.java###test47+++assertEquals###2, JsonWriter_ESTest.java###test47+++toString###0, JsonWriter_ESTest.java###test48+++getInstance###1, JsonWriter_ESTest.java###test48+++writeBoolean###3, JsonWriter_ESTest.java###test49+++writeBase64String###3, JsonWriter_ESTest.java###test49+++assertEquals###2, JsonWriter_ESTest.java###test49+++toString###0, JsonWriter_ESTest.java###test50+++getInstance###1, JsonWriter_ESTest.java###test50+++getAvailableZoneIds###0, JsonWriter_ESTest.java###test50+++verifyException###2, JsonWriter_ESTest.java###test50+++writeIterable###3, JsonWriter_ESTest.java###test50+++fail###1, JsonWriter_ESTest.java###test51+++getInstance###1, JsonWriter_ESTest.java###test51+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:01:13 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class JsonWriter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, JsonWriter_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.NoOpValueFormatter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonWriter;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.Writer;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java###test16",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeString(zapposJson0, \"TG$gvGV}05y\", mockPrintWriter0);\n    assertEquals(\"\\\"TG$gvGV}05y\\\"\", charArrayWriter0.toString());\n    assertEquals(13, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap((ZapposJson) null, (Map<?, ?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Cannot find type of Map\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"Cannot find type of Map\");\n    HashMap<Object, JsonConfig.ReaderConfig> hashMap0 = new HashMap<Object, JsonConfig.ReaderConfig>();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    hashMap0.put(mockPrintWriter0, jsonConfig_ReaderConfig0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, mockPrintWriter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable((ZapposJson) null, (Iterable<?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    HashSet<Object> hashSet0 = new HashSet<Object>(1011);\n    hashSet0.add(charArrayWriter0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, hashSet0, charArrayWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(8232);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeIterable(zapposJson0, linkedHashSet0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeEnum(zapposJson0, (Enum<?>) null, mockFileWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBoolean(zapposJson0, (Boolean) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((boolean[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    boolean[] booleanArray0 = new boolean[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(booleanArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((short[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    short[] shortArray0 = new short[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(shortArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((long[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    long[] longArray0 = new long[6];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((int[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int[] intArray0 = new int[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(intArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((float[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    float[] floatArray0 = new float[7];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(floatArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((double[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(doubleArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((char[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    char[] charArray0 = new char[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(charArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, (Object[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) charArrayWriter0;\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) mockPrintWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeString(zapposJson0, (String) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"EH|\", \"EH|\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[6];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0,0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[0];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[3];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[0];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[6];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0,0,0,0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[0];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[0];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[3];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n    assertEquals(7, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[3];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(7, charArrayWriter0.size());\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[0];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[4];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[false,false,false,false]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[0];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[0];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[9];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\"]\", charArrayWriter0.toString());\n    assertEquals(82, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object[] objectArray0 = new Object[0];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[2];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(11, charArrayWriter0.size());\n    assertEquals(\"[null,null]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"'sCQv\");\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonWriter.writeMap(zapposJson0, map0, mockPrintWriter0);\n    assertEquals(28, map0.size());\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);\n    JsonWriter.writeIterable(zapposJson0, treeSet0, stringWriter0);\n    assertEquals(\"[]\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    byte[] byteArray0 = new byte[0];\n    JsonWriter.writeBase64String(zapposJson0, byteArray0, charArrayWriter0);\n    assertEquals(\"\\\"\\\"\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Character @ = new Character((String)@);\\n\");\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    JsonWriter jsonWriter0 = new JsonWriter(zapposJson0);\n    assertEquals('\\\"', JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    long[] longArray0 = new long[6];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}",
            "TestRelevantFocal": "[writeArray###2, writeArray###2, writeArray###2, writeArray###2, writeArray###2, writeArray###2, writeArray###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:01:13 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.time.ZoneId;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException {\n    writer.append(JsonWriter.CONST_OPEN_ARRAY);\n    int j = values.length - 1;\n    for (int i = 0; i < j; i++) {\n        zapposJson.toJson(values[i], writer);\n        writer.append(JsonWriter.CONST_COMMA);\n    }\n    if (j > -1) {\n        zapposJson.toJson(values[j], writer);\n    }\n    writer.append(JsonWriter.CONST_CLOSE_ARRAY);\n}",
            "all_field_declaration": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';\nprotected ZapposJson zapposJson;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "5",
            "Filed": "public static final char CONST_COMMA = ',';public static final char CONST_OPEN_ARRAY = '[';public static final char CONST_CLOSE_ARRAY = ']';protected ZapposJson zapposJson;",
            "Parameter_type": "ZapposJson,Object[],Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\n",
            "public_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "public_field": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';",
            "Method_statement": "writeArray(ZapposJson zapposJson, Object() values, Writer writer)",
            "Method_name": "writeArray",
            "Class_declaration": "public class JsonWriter {\n",
            "constructors": "public JsonWriter(ZapposJson jacinda) {\n    this.zapposJson = jacinda;\n}",
            "all_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "Class_name": "JsonWriter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriter.java###writeArray",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Writer;\n\nimport java.util.Iterator;\n\nimport java.util.Map;\n\nimport javax.xml.bind.DatatypeConverter;\n\nimport com.zappos.json.util.JsonUtils;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriter_ESTest.java###test00+++getInstance###1, JsonWriter_ESTest.java###test00+++writeString###3, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++toString###0, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++size###0, JsonWriter_ESTest.java###test01+++createTempFile###2, JsonWriter_ESTest.java###test01+++writeEnum###3, JsonWriter_ESTest.java###test02+++verifyException###2, JsonWriter_ESTest.java###test02+++writeMap###3, JsonWriter_ESTest.java###test02+++fail###1, JsonWriter_ESTest.java###test03+++getInstance###1, JsonWriter_ESTest.java###test03+++put###2, JsonWriter_ESTest.java###test03+++verifyException###2, JsonWriter_ESTest.java###test03+++writeMap###3, JsonWriter_ESTest.java###test03+++fail###1, JsonWriter_ESTest.java###test04+++verifyException###2, JsonWriter_ESTest.java###test04+++writeMap###3, JsonWriter_ESTest.java###test04+++fail###1, JsonWriter_ESTest.java###test05+++verifyException###2, JsonWriter_ESTest.java###test05+++writeIterable###3, JsonWriter_ESTest.java###test05+++fail###1, JsonWriter_ESTest.java###test06+++getInstance###0, JsonWriter_ESTest.java###test06+++add###1, JsonWriter_ESTest.java###test06+++verifyException###2, JsonWriter_ESTest.java###test06+++writeIterable###3, JsonWriter_ESTest.java###test06+++fail###1, JsonWriter_ESTest.java###test07+++verifyException###2, JsonWriter_ESTest.java###test07+++writeIterable###3, JsonWriter_ESTest.java###test07+++fail###1, JsonWriter_ESTest.java###test08+++createTempFile###2, JsonWriter_ESTest.java###test08+++verifyException###2, JsonWriter_ESTest.java###test08+++writeEnum###3, JsonWriter_ESTest.java###test08+++fail###1, JsonWriter_ESTest.java###test09+++verifyException###2, JsonWriter_ESTest.java###test09+++writeBoolean###3, JsonWriter_ESTest.java###test09+++fail###1, JsonWriter_ESTest.java###test10+++verifyException###2, JsonWriter_ESTest.java###test10+++writeBase64String###3, JsonWriter_ESTest.java###test10+++fail###1, JsonWriter_ESTest.java###test11+++verifyException###2, JsonWriter_ESTest.java###test11+++writeArray###2, JsonWriter_ESTest.java###test11+++fail###1, JsonWriter_ESTest.java###test12+++verifyException###2, JsonWriter_ESTest.java###test12+++writeArray###2, JsonWriter_ESTest.java###test12+++fail###1, JsonWriter_ESTest.java###test13+++verifyException###2, JsonWriter_ESTest.java###test13+++writeArray###2, JsonWriter_ESTest.java###test13+++fail###1, JsonWriter_ESTest.java###test14+++verifyException###2, JsonWriter_ESTest.java###test14+++writeArray###2, JsonWriter_ESTest.java###test14+++fail###1, JsonWriter_ESTest.java###test15+++verifyException###2, JsonWriter_ESTest.java###test15+++writeArray###2, JsonWriter_ESTest.java###test15+++fail###1, JsonWriter_ESTest.java###test16+++verifyException###2, JsonWriter_ESTest.java###test16+++writeArray###2, JsonWriter_ESTest.java###test16+++fail###1, JsonWriter_ESTest.java###test17+++verifyException###2, JsonWriter_ESTest.java###test17+++writeArray###2, JsonWriter_ESTest.java###test17+++fail###1, JsonWriter_ESTest.java###test18+++verifyException###2, JsonWriter_ESTest.java###test18+++writeArray###2, JsonWriter_ESTest.java###test18+++fail###1, JsonWriter_ESTest.java###test19+++verifyException###2, JsonWriter_ESTest.java###test19+++writeArray###2, JsonWriter_ESTest.java###test19+++fail###1, JsonWriter_ESTest.java###test20+++verifyException###2, JsonWriter_ESTest.java###test20+++writeArray###2, JsonWriter_ESTest.java###test20+++fail###1, JsonWriter_ESTest.java###test21+++verifyException###2, JsonWriter_ESTest.java###test21+++writeArray###2, JsonWriter_ESTest.java###test21+++fail###1, JsonWriter_ESTest.java###test22+++verifyException###2, JsonWriter_ESTest.java###test22+++writeArray###2, JsonWriter_ESTest.java###test22+++fail###1, JsonWriter_ESTest.java###test23+++verifyException###2, JsonWriter_ESTest.java###test23+++writeArray###2, JsonWriter_ESTest.java###test23+++fail###1, JsonWriter_ESTest.java###test24+++verifyException###2, JsonWriter_ESTest.java###test24+++writeArray###2, JsonWriter_ESTest.java###test24+++fail###1, JsonWriter_ESTest.java###test25+++verifyException###2, JsonWriter_ESTest.java###test25+++writeArray###3, JsonWriter_ESTest.java###test25+++fail###1, JsonWriter_ESTest.java###test26+++getInstance###1, JsonWriter_ESTest.java###test26+++verifyException###2, JsonWriter_ESTest.java###test26+++writeArray###3, JsonWriter_ESTest.java###test26+++fail###1, JsonWriter_ESTest.java###test27+++verifyException###2, JsonWriter_ESTest.java###test27+++writeArray###3, JsonWriter_ESTest.java###test27+++fail###1, JsonWriter_ESTest.java###test28+++getInstance###1, JsonWriter_ESTest.java###test28+++writeString###3, JsonWriter_ESTest.java###test28+++fail###1, JsonWriter_ESTest.java###test29+++writeNumber###3, JsonWriter_ESTest.java###test30+++writeArray###2, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++size###0, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++toString###0, JsonWriter_ESTest.java###test31+++writeArray###2, JsonWriter_ESTest.java###test31+++assertEquals###2, JsonWriter_ESTest.java###test31+++toString###0, JsonWriter_ESTest.java###test32+++writeArray###2, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++size###0, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++toString###0, JsonWriter_ESTest.java###test33+++writeArray###2, JsonWriter_ESTest.java###test33+++assertEquals###2, JsonWriter_ESTest.java###test33+++toString###0, JsonWriter_ESTest.java###test34+++writeArray###2, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++size###0, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++toString###0, JsonWriter_ESTest.java###test35+++writeArray###2, JsonWriter_ESTest.java###test35+++assertEquals###2, JsonWriter_ESTest.java###test35+++toString###0, JsonWriter_ESTest.java###test36+++writeArray###2, JsonWriter_ESTest.java###test36+++assertEquals###2, JsonWriter_ESTest.java###test36+++toString###0, JsonWriter_ESTest.java###test37+++writeArray###2, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++toString###0, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++size###0, JsonWriter_ESTest.java###test38+++writeArray###2, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++size###0, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++toString###0, JsonWriter_ESTest.java###test39+++writeArray###2, JsonWriter_ESTest.java###test39+++assertEquals###2, JsonWriter_ESTest.java###test39+++toString###0, JsonWriter_ESTest.java###test40+++writeArray###2, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++size###0, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++toString###0, JsonWriter_ESTest.java###test41+++writeArray###2, JsonWriter_ESTest.java###test41+++assertEquals###2, JsonWriter_ESTest.java###test41+++toString###0, JsonWriter_ESTest.java###test42+++writeArray###2, JsonWriter_ESTest.java###test42+++assertEquals###2, JsonWriter_ESTest.java###test42+++toString###0, JsonWriter_ESTest.java###test43+++writeArray###2, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++toString###0, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++size###0, JsonWriter_ESTest.java###test44+++getInstance###0, JsonWriter_ESTest.java###test44+++writeArray###3, JsonWriter_ESTest.java###test44+++assertEquals###2, JsonWriter_ESTest.java###test44+++toString###0, JsonWriter_ESTest.java###test45+++writeArray###3, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++size###0, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++toString###0, JsonWriter_ESTest.java###test46+++getInstance###0, JsonWriter_ESTest.java###test46+++writeMap###3, JsonWriter_ESTest.java###test46+++assertEquals###2, JsonWriter_ESTest.java###test46+++size###0, JsonWriter_ESTest.java###test47+++mock###2, JsonWriter_ESTest.java###test47+++writeIterable###3, JsonWriter_ESTest.java###test47+++assertEquals###2, JsonWriter_ESTest.java###test47+++toString###0, JsonWriter_ESTest.java###test48+++getInstance###1, JsonWriter_ESTest.java###test48+++writeBoolean###3, JsonWriter_ESTest.java###test49+++writeBase64String###3, JsonWriter_ESTest.java###test49+++assertEquals###2, JsonWriter_ESTest.java###test49+++toString###0, JsonWriter_ESTest.java###test50+++getInstance###1, JsonWriter_ESTest.java###test50+++getAvailableZoneIds###0, JsonWriter_ESTest.java###test50+++verifyException###2, JsonWriter_ESTest.java###test50+++writeIterable###3, JsonWriter_ESTest.java###test50+++fail###1, JsonWriter_ESTest.java###test51+++getInstance###1, JsonWriter_ESTest.java###test51+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:01:13 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class JsonWriter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, JsonWriter_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.NoOpValueFormatter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.Writer;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java###test45",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeString(zapposJson0, \"TG$gvGV}05y\", mockPrintWriter0);\n    assertEquals(\"\\\"TG$gvGV}05y\\\"\", charArrayWriter0.toString());\n    assertEquals(13, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap((ZapposJson) null, (Map<?, ?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Cannot find type of Map\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"Cannot find type of Map\");\n    HashMap<Object, JsonConfig.ReaderConfig> hashMap0 = new HashMap<Object, JsonConfig.ReaderConfig>();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    hashMap0.put(mockPrintWriter0, jsonConfig_ReaderConfig0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, mockPrintWriter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable((ZapposJson) null, (Iterable<?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    HashSet<Object> hashSet0 = new HashSet<Object>(1011);\n    hashSet0.add(charArrayWriter0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, hashSet0, charArrayWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(8232);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeIterable(zapposJson0, linkedHashSet0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeEnum(zapposJson0, (Enum<?>) null, mockFileWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBoolean(zapposJson0, (Boolean) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((boolean[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    boolean[] booleanArray0 = new boolean[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(booleanArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((short[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    short[] shortArray0 = new short[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(shortArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((long[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    long[] longArray0 = new long[6];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((int[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int[] intArray0 = new int[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(intArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((float[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    float[] floatArray0 = new float[7];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(floatArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((double[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(doubleArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((char[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    char[] charArray0 = new char[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(charArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, (Object[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) charArrayWriter0;\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) mockPrintWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeString(zapposJson0, (String) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"EH|\", \"EH|\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[6];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0,0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[0];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[3];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[0];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[6];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0,0,0,0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[0];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[0];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[3];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n    assertEquals(7, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[3];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(7, charArrayWriter0.size());\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[0];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[4];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[false,false,false,false]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[0];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[0];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[9];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\"]\", charArrayWriter0.toString());\n    assertEquals(82, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object[] objectArray0 = new Object[0];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[2];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(11, charArrayWriter0.size());\n    assertEquals(\"[null,null]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"'sCQv\");\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonWriter.writeMap(zapposJson0, map0, mockPrintWriter0);\n    assertEquals(28, map0.size());\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);\n    JsonWriter.writeIterable(zapposJson0, treeSet0, stringWriter0);\n    assertEquals(\"[]\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    byte[] byteArray0 = new byte[0];\n    JsonWriter.writeBase64String(zapposJson0, byteArray0, charArrayWriter0);\n    assertEquals(\"\\\"\\\"\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Character @ = new Character((String)@);\\n\");\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    JsonWriter jsonWriter0 = new JsonWriter(zapposJson0);\n    assertEquals('\\\"', JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[2];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(11, charArrayWriter0.size());\n    assertEquals(\"[null,null]\", charArrayWriter0.toString());\n}",
            "TestRelevantFocal": "[writeArray###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:01:13 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.time.ZoneId;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException {\n    writer.append(zapposJson.format(value));\n}",
            "all_field_declaration": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';\nprotected ZapposJson zapposJson;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "protected ZapposJson zapposJson;",
            "Parameter_type": "ZapposJson,Number,Writer",
            "Import_statements": "import java.io.IOException;\nimport java.io.Writer;\n",
            "public_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "public_field": "/*\n   * Static will not be copied. So they are fine to be here.\n   */\npublic static final String CONST_NULL = \"null\";\npublic static final char CONST_DOUBLE_QUOTE = '\"';\npublic static final char CONST_COMMA = ',';\npublic static final char CONST_COLON = ':';\npublic static final char CONST_OPEN_OBJECT = '{';\npublic static final char CONST_CLOSE_OBJECT = '}';\npublic static final char CONST_OPEN_ARRAY = '[';\npublic static final char CONST_CLOSE_ARRAY = ']';",
            "Method_statement": "writeNumber(ZapposJson zapposJson, Number value, Writer writer)",
            "Method_name": "writeNumber",
            "Class_declaration": "public class JsonWriter {\n",
            "constructors": "public JsonWriter(ZapposJson jacinda) {\n    this.zapposJson = jacinda;\n}",
            "all_method_signature": "public JsonWriter(ZapposJson jacinda);\npublic static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException;\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException;\npublic static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;\npublic static void writeEnum(ZapposJson zapposJson, Enum<?> value, Writer writer) throws IOException;\npublic static void writeIterable(ZapposJson zapposJson, Iterable<?> iterable, Writer writer) throws IOException;\npublic static void writeMap(ZapposJson zapposJson, Map<?, ?> map, Writer writer) throws IOException;\npublic static void writeArray(ZapposJson zapposJson, Object[] values, Writer writer) throws IOException;\npublic static void writeBase64String(ZapposJson zapposJson, byte[] value, Writer writer) throws IOException;\npublic static void writeArray(char[] values, Writer writer) throws IOException;\npublic static void writeArray(boolean[] values, Writer writer) throws IOException;\npublic static void writeArray(short[] values, Writer writer) throws IOException;\npublic static void writeArray(int[] values, Writer writer) throws IOException;\npublic static void writeArray(long[] values, Writer writer) throws IOException;\npublic static void writeArray(float[] values, Writer writer) throws IOException;\npublic static void writeArray(double[] values, Writer writer) throws IOException;",
            "Class_name": "JsonWriter",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonWriter.java###writeNumber",
            "Parameter_num": "3",
            "contextMethod": "public static void writeString(ZapposJson zapposJson, String value, Writer writer) throws IOException {\n    writer.write(JsonWriter.CONST_DOUBLE_QUOTE);\n    JsonUtils.escape(zapposJson, value, writer);\n    writer.write(JsonWriter.CONST_DOUBLE_QUOTE);\n}\npublic static void writeBoolean(ZapposJson zapposJson, Boolean value, Writer writer) throws IOException {\n    writer.append(value.toString());\n}",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Writer;\n\nimport java.util.Iterator;\n\nimport java.util.Map;\n\nimport javax.xml.bind.DatatypeConverter;\n\nimport com.zappos.json.util.JsonUtils;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public static void writeNumber(ZapposJson zapposJson, Number value, Writer writer) throws IOException;",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonWriter_ESTest.java###test00+++getInstance###1, JsonWriter_ESTest.java###test00+++writeString###3, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++toString###0, JsonWriter_ESTest.java###test00+++assertEquals###2, JsonWriter_ESTest.java###test00+++size###0, JsonWriter_ESTest.java###test01+++createTempFile###2, JsonWriter_ESTest.java###test01+++writeEnum###3, JsonWriter_ESTest.java###test02+++verifyException###2, JsonWriter_ESTest.java###test02+++writeMap###3, JsonWriter_ESTest.java###test02+++fail###1, JsonWriter_ESTest.java###test03+++getInstance###1, JsonWriter_ESTest.java###test03+++put###2, JsonWriter_ESTest.java###test03+++verifyException###2, JsonWriter_ESTest.java###test03+++writeMap###3, JsonWriter_ESTest.java###test03+++fail###1, JsonWriter_ESTest.java###test04+++verifyException###2, JsonWriter_ESTest.java###test04+++writeMap###3, JsonWriter_ESTest.java###test04+++fail###1, JsonWriter_ESTest.java###test05+++verifyException###2, JsonWriter_ESTest.java###test05+++writeIterable###3, JsonWriter_ESTest.java###test05+++fail###1, JsonWriter_ESTest.java###test06+++getInstance###0, JsonWriter_ESTest.java###test06+++add###1, JsonWriter_ESTest.java###test06+++verifyException###2, JsonWriter_ESTest.java###test06+++writeIterable###3, JsonWriter_ESTest.java###test06+++fail###1, JsonWriter_ESTest.java###test07+++verifyException###2, JsonWriter_ESTest.java###test07+++writeIterable###3, JsonWriter_ESTest.java###test07+++fail###1, JsonWriter_ESTest.java###test08+++createTempFile###2, JsonWriter_ESTest.java###test08+++verifyException###2, JsonWriter_ESTest.java###test08+++writeEnum###3, JsonWriter_ESTest.java###test08+++fail###1, JsonWriter_ESTest.java###test09+++verifyException###2, JsonWriter_ESTest.java###test09+++writeBoolean###3, JsonWriter_ESTest.java###test09+++fail###1, JsonWriter_ESTest.java###test10+++verifyException###2, JsonWriter_ESTest.java###test10+++writeBase64String###3, JsonWriter_ESTest.java###test10+++fail###1, JsonWriter_ESTest.java###test11+++verifyException###2, JsonWriter_ESTest.java###test11+++writeArray###2, JsonWriter_ESTest.java###test11+++fail###1, JsonWriter_ESTest.java###test12+++verifyException###2, JsonWriter_ESTest.java###test12+++writeArray###2, JsonWriter_ESTest.java###test12+++fail###1, JsonWriter_ESTest.java###test13+++verifyException###2, JsonWriter_ESTest.java###test13+++writeArray###2, JsonWriter_ESTest.java###test13+++fail###1, JsonWriter_ESTest.java###test14+++verifyException###2, JsonWriter_ESTest.java###test14+++writeArray###2, JsonWriter_ESTest.java###test14+++fail###1, JsonWriter_ESTest.java###test15+++verifyException###2, JsonWriter_ESTest.java###test15+++writeArray###2, JsonWriter_ESTest.java###test15+++fail###1, JsonWriter_ESTest.java###test16+++verifyException###2, JsonWriter_ESTest.java###test16+++writeArray###2, JsonWriter_ESTest.java###test16+++fail###1, JsonWriter_ESTest.java###test17+++verifyException###2, JsonWriter_ESTest.java###test17+++writeArray###2, JsonWriter_ESTest.java###test17+++fail###1, JsonWriter_ESTest.java###test18+++verifyException###2, JsonWriter_ESTest.java###test18+++writeArray###2, JsonWriter_ESTest.java###test18+++fail###1, JsonWriter_ESTest.java###test19+++verifyException###2, JsonWriter_ESTest.java###test19+++writeArray###2, JsonWriter_ESTest.java###test19+++fail###1, JsonWriter_ESTest.java###test20+++verifyException###2, JsonWriter_ESTest.java###test20+++writeArray###2, JsonWriter_ESTest.java###test20+++fail###1, JsonWriter_ESTest.java###test21+++verifyException###2, JsonWriter_ESTest.java###test21+++writeArray###2, JsonWriter_ESTest.java###test21+++fail###1, JsonWriter_ESTest.java###test22+++verifyException###2, JsonWriter_ESTest.java###test22+++writeArray###2, JsonWriter_ESTest.java###test22+++fail###1, JsonWriter_ESTest.java###test23+++verifyException###2, JsonWriter_ESTest.java###test23+++writeArray###2, JsonWriter_ESTest.java###test23+++fail###1, JsonWriter_ESTest.java###test24+++verifyException###2, JsonWriter_ESTest.java###test24+++writeArray###2, JsonWriter_ESTest.java###test24+++fail###1, JsonWriter_ESTest.java###test25+++verifyException###2, JsonWriter_ESTest.java###test25+++writeArray###3, JsonWriter_ESTest.java###test25+++fail###1, JsonWriter_ESTest.java###test26+++getInstance###1, JsonWriter_ESTest.java###test26+++verifyException###2, JsonWriter_ESTest.java###test26+++writeArray###3, JsonWriter_ESTest.java###test26+++fail###1, JsonWriter_ESTest.java###test27+++verifyException###2, JsonWriter_ESTest.java###test27+++writeArray###3, JsonWriter_ESTest.java###test27+++fail###1, JsonWriter_ESTest.java###test28+++getInstance###1, JsonWriter_ESTest.java###test28+++writeString###3, JsonWriter_ESTest.java###test28+++fail###1, JsonWriter_ESTest.java###test29+++writeNumber###3, JsonWriter_ESTest.java###test30+++writeArray###2, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++size###0, JsonWriter_ESTest.java###test30+++assertEquals###2, JsonWriter_ESTest.java###test30+++toString###0, JsonWriter_ESTest.java###test31+++writeArray###2, JsonWriter_ESTest.java###test31+++assertEquals###2, JsonWriter_ESTest.java###test31+++toString###0, JsonWriter_ESTest.java###test32+++writeArray###2, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++size###0, JsonWriter_ESTest.java###test32+++assertEquals###2, JsonWriter_ESTest.java###test32+++toString###0, JsonWriter_ESTest.java###test33+++writeArray###2, JsonWriter_ESTest.java###test33+++assertEquals###2, JsonWriter_ESTest.java###test33+++toString###0, JsonWriter_ESTest.java###test34+++writeArray###2, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++size###0, JsonWriter_ESTest.java###test34+++assertEquals###2, JsonWriter_ESTest.java###test34+++toString###0, JsonWriter_ESTest.java###test35+++writeArray###2, JsonWriter_ESTest.java###test35+++assertEquals###2, JsonWriter_ESTest.java###test35+++toString###0, JsonWriter_ESTest.java###test36+++writeArray###2, JsonWriter_ESTest.java###test36+++assertEquals###2, JsonWriter_ESTest.java###test36+++toString###0, JsonWriter_ESTest.java###test37+++writeArray###2, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++toString###0, JsonWriter_ESTest.java###test37+++assertEquals###2, JsonWriter_ESTest.java###test37+++size###0, JsonWriter_ESTest.java###test38+++writeArray###2, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++size###0, JsonWriter_ESTest.java###test38+++assertEquals###2, JsonWriter_ESTest.java###test38+++toString###0, JsonWriter_ESTest.java###test39+++writeArray###2, JsonWriter_ESTest.java###test39+++assertEquals###2, JsonWriter_ESTest.java###test39+++toString###0, JsonWriter_ESTest.java###test40+++writeArray###2, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++size###0, JsonWriter_ESTest.java###test40+++assertEquals###2, JsonWriter_ESTest.java###test40+++toString###0, JsonWriter_ESTest.java###test41+++writeArray###2, JsonWriter_ESTest.java###test41+++assertEquals###2, JsonWriter_ESTest.java###test41+++toString###0, JsonWriter_ESTest.java###test42+++writeArray###2, JsonWriter_ESTest.java###test42+++assertEquals###2, JsonWriter_ESTest.java###test42+++toString###0, JsonWriter_ESTest.java###test43+++writeArray###2, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++toString###0, JsonWriter_ESTest.java###test43+++assertEquals###2, JsonWriter_ESTest.java###test43+++size###0, JsonWriter_ESTest.java###test44+++getInstance###0, JsonWriter_ESTest.java###test44+++writeArray###3, JsonWriter_ESTest.java###test44+++assertEquals###2, JsonWriter_ESTest.java###test44+++toString###0, JsonWriter_ESTest.java###test45+++writeArray###3, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++size###0, JsonWriter_ESTest.java###test45+++assertEquals###2, JsonWriter_ESTest.java###test45+++toString###0, JsonWriter_ESTest.java###test46+++getInstance###0, JsonWriter_ESTest.java###test46+++writeMap###3, JsonWriter_ESTest.java###test46+++assertEquals###2, JsonWriter_ESTest.java###test46+++size###0, JsonWriter_ESTest.java###test47+++mock###2, JsonWriter_ESTest.java###test47+++writeIterable###3, JsonWriter_ESTest.java###test47+++assertEquals###2, JsonWriter_ESTest.java###test47+++toString###0, JsonWriter_ESTest.java###test48+++getInstance###1, JsonWriter_ESTest.java###test48+++writeBoolean###3, JsonWriter_ESTest.java###test49+++writeBase64String###3, JsonWriter_ESTest.java###test49+++assertEquals###2, JsonWriter_ESTest.java###test49+++toString###0, JsonWriter_ESTest.java###test50+++getInstance###1, JsonWriter_ESTest.java###test50+++getAvailableZoneIds###0, JsonWriter_ESTest.java###test50+++verifyException###2, JsonWriter_ESTest.java###test50+++writeIterable###3, JsonWriter_ESTest.java###test50+++fail###1, JsonWriter_ESTest.java###test51+++getInstance###1, JsonWriter_ESTest.java###test51+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 14:01:13 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class JsonWriter_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonWriter\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonWriter_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, JsonWriter_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonWriter_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.NoOpValueFormatter\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.File;\nimport java.io.Writer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java###test29",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeString(zapposJson0, \"TG$gvGV}05y\", mockPrintWriter0);\n    assertEquals(\"\\\"TG$gvGV}05y\\\"\", charArrayWriter0.toString());\n    assertEquals(13, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap((ZapposJson) null, (Map<?, ?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Cannot find type of Map\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"Cannot find type of Map\");\n    HashMap<Object, JsonConfig.ReaderConfig> hashMap0 = new HashMap<Object, JsonConfig.ReaderConfig>();\n    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;\n    hashMap0.put(mockPrintWriter0, jsonConfig_ReaderConfig0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, mockPrintWriter0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        // \n        // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    try {\n        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable((ZapposJson) null, (Iterable<?>) null, charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    HashSet<Object> hashSet0 = new HashSet<Object>(1011);\n    hashSet0.add(charArrayWriter0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, hashSet0, charArrayWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(8232);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeIterable(zapposJson0, linkedHashSet0, pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(true);\n    File file0 = MockFile.createTempFile(\".next();\\n\", \".next();\\n\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeEnum(zapposJson0, (Enum<?>) null, mockFileWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBoolean(zapposJson0, (Boolean) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    // Undeclared exception!\n    try {\n        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((boolean[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    boolean[] booleanArray0 = new boolean[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(booleanArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((short[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    short[] shortArray0 = new short[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(shortArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((long[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    long[] longArray0 = new long[6];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((int[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int[] intArray0 = new int[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(intArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((float[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    float[] floatArray0 = new float[7];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(floatArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((double[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    double[] doubleArray0 = new double[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(doubleArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray((char[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    char[] charArray0 = new char[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(charArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, (Object[]) null, (Writer) charArrayWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) charArrayWriter0;\n    // Undeclared exception!\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) mockPrintWriter0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // javassist/ClassPool\n        // \n        verifyException(\"com.zappos.json.JsonWriterCodeGenerator\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[0];\n    PipedWriter pipedWriter0 = new PipedWriter();\n    try {\n        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) pipedWriter0);\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedWriter\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);\n    // Undeclared exception!\n    try {\n        JsonWriter.writeString(zapposJson0, (String) null, stringWriter0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"EH|\", \"EH|\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[6];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0,0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    double[] doubleArray0 = new double[0];\n    JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[3];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0.0,0.0,0.0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    float[] floatArray0 = new float[0];\n    JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[6];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(13, charArrayWriter0.size());\n    assertEquals(\"[0,0,0,0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    long[] longArray0 = new long[0];\n    JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[0];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    int[] intArray0 = new int[3];\n    JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n    assertEquals(7, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[3];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(7, charArrayWriter0.size());\n    assertEquals(\"[0,0,0]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    short[] shortArray0 = new short[0];\n    JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[4];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(25, charArrayWriter0.size());\n    assertEquals(\"[false,false,false,false]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    boolean[] booleanArray0 = new boolean[0];\n    JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[0];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    char[] charArray0 = new char[9];\n    JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\",\\\"\\\\u0000\\\"]\", charArrayWriter0.toString());\n    assertEquals(82, charArrayWriter0.size());\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    Object[] objectArray0 = new Object[0];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(\"[]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = new ZapposJson();\n    Object[] objectArray0 = new Object[2];\n    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);\n    assertEquals(11, charArrayWriter0.size());\n    assertEquals(\"[null,null]\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"'sCQv\");\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonWriter.writeMap(zapposJson0, map0, mockPrintWriter0);\n    assertEquals(28, map0.size());\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);\n    JsonWriter.writeIterable(zapposJson0, treeSet0, stringWriter0);\n    assertEquals(\"[]\", stringWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);\n    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    byte[] byteArray0 = new byte[0];\n    JsonWriter.writeBase64String(zapposJson0, byteArray0, charArrayWriter0);\n    assertEquals(\"\\\"\\\"\", charArrayWriter0.toString());\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"Character @ = new Character((String)@);\\n\");\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000\n        // \n        verifyException(\"com.zappos.json.ZapposJson\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"TG$gvGV}05y\");\n    JsonWriter jsonWriter0 = new JsonWriter(zapposJson0);\n    assertEquals('\\\"', JsonWriter.CONST_DOUBLE_QUOTE);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"EH|\", \"EH|\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);\n}",
            "TestRelevantFocal": "[writeNumber###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  14:01:13 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonConfig;\nimport com.zappos.json.JsonWriter;\nimport com.zappos.json.ZapposJson;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.time.ZoneId;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public List<JsonBeanAttribute> getMutators(Class<?> clazz) {\n    return getAccessorsOrMutators(clazz, false);\n}",
            "all_field_declaration": "private ZapposJson jacinda;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Class<?>",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public JsonBeanIntrospector(ZapposJson jacinda);\npublic List<JsonBeanAttribute> getMutators(Class<?> clazz);\npublic List<JsonBeanAttribute> getAccessors(Class<?> clazz);",
            "public_field": "",
            "Method_statement": "getMutators(Class<?> clazz)",
            "Method_name": "getMutators",
            "Class_declaration": "public class JsonBeanIntrospector {\n",
            "constructors": "public JsonBeanIntrospector(ZapposJson jacinda) {\n    this.jacinda = jacinda;\n}",
            "all_method_signature": "public JsonBeanIntrospector(ZapposJson jacinda);\nprivate List<JsonBeanAttribute> getAccessorsOrMutators(Class<?> clazz, boolean accessor);\npublic List<JsonBeanAttribute> getMutators(Class<?> clazz);\npublic List<JsonBeanAttribute> getAccessors(Class<?> clazz);",
            "Class_name": "JsonBeanIntrospector",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanIntrospector.java###getMutators",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.beans.IntrospectionException;\n\nimport java.beans.Introspector;\n\nimport java.beans.PropertyDescriptor;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport com.zappos.json.annot.JsonEnum;\n\nimport com.zappos.json.annot.JsonFormat;\n\nimport com.zappos.json.annot.JsonIgnore;\n\nimport com.zappos.json.annot.JsonKey;\n\nimport com.zappos.json.format.NoOpValueFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.Reflections;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public List<JsonBeanAttribute> getMutators(Class<?> clazz);",
            "Junit_version": "4",
            "returnType": "List<JsonBeanAttribute>"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanIntrospector_ESTest.java###test0+++getInstance###0, JsonBeanIntrospector_ESTest.java###test0+++verifyException###2, JsonBeanIntrospector_ESTest.java###test0+++getMutators###1, JsonBeanIntrospector_ESTest.java###test0+++fail###1, JsonBeanIntrospector_ESTest.java###test1+++getInstance###0, JsonBeanIntrospector_ESTest.java###test1+++verifyException###2, JsonBeanIntrospector_ESTest.java###test1+++getAccessors###1, JsonBeanIntrospector_ESTest.java###test1+++fail###1, JsonBeanIntrospector_ESTest.java###test2+++getAccessors###1, JsonBeanIntrospector_ESTest.java###test2+++assertEquals###2, JsonBeanIntrospector_ESTest.java###test2+++size###0, JsonBeanIntrospector_ESTest.java###test3+++getMutators###1, JsonBeanIntrospector_ESTest.java###test3+++assertEquals###2, JsonBeanIntrospector_ESTest.java###test3+++size###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:49:54 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanIntrospector_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanIntrospector\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanIntrospector_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanIntrospector_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.ZapposJson;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanIntrospector_ESTest.java###test0",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    // Undeclared exception!\n    try {\n        jsonBeanIntrospector0.getMutators((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.beans.Introspector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    // Undeclared exception!\n    try {\n        jsonBeanIntrospector0.getAccessors((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.beans.Introspector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    Class<NoOpValueFormatter> class0 = NoOpValueFormatter.class;\n    List<JsonBeanAttribute> list0 = jsonBeanIntrospector0.getAccessors(class0);\n    assertEquals(2, list0.size());\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    Class<NoOpValueFormatter> class0 = NoOpValueFormatter.class;\n    List<JsonBeanAttribute> list0 = jsonBeanIntrospector0.getMutators(class0);\n    assertEquals(1, list0.size());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    // Undeclared exception!\n    try {\n        jsonBeanIntrospector0.getMutators((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.beans.Introspector\", e);\n    }\n}",
            "TestRelevantFocal": "[getMutators###1]",
            "TestCodeShell": "/*\r\n * This file was automatically generated by EvoSuite\r\n * Thu Jan 25 13:49:54 GMT 2024\r\n */\r\npackage com.zappos.json;\r\n\r\nimport org.junit.Test;\r\nimport static org.junit.Assert.*;\r\nimport static org.evosuite.runtime.EvoAssertions.*;\r\nimport com.zappos.json.JsonBeanAttribute;\r\nimport com.zappos.json.JsonBeanIntrospector;\r\nimport com.zappos.json.ZapposJson;\r\nimport com.zappos.json.format.NoOpValueFormatter;\r\nimport java.util.List;\r\nimport org.evosuite.runtime.EvoRunner;\r\nimport org.evosuite.runtime.EvoRunnerParameters;\r\nimport org.junit.runner.RunWith;\r\n\r\n@RunWith(EvoRunner.class)\r\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\r\npublic class JsonBeanIntrospector_ESTest extends JsonBeanIntrospector_ESTest_scaffolding {\r\n}\r\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public List<JsonBeanAttribute> getAccessors(Class<?> clazz) {\n    return getAccessorsOrMutators(clazz, true);\n}",
            "all_field_declaration": "private ZapposJson jacinda;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Class<?>",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public JsonBeanIntrospector(ZapposJson jacinda);\npublic List<JsonBeanAttribute> getMutators(Class<?> clazz);\npublic List<JsonBeanAttribute> getAccessors(Class<?> clazz);",
            "public_field": "",
            "Method_statement": "getAccessors(Class<?> clazz)",
            "Method_name": "getAccessors",
            "Class_declaration": "public class JsonBeanIntrospector {\n",
            "constructors": "public JsonBeanIntrospector(ZapposJson jacinda) {\n    this.jacinda = jacinda;\n}",
            "all_method_signature": "public JsonBeanIntrospector(ZapposJson jacinda);\nprivate List<JsonBeanAttribute> getAccessorsOrMutators(Class<?> clazz, boolean accessor);\npublic List<JsonBeanAttribute> getMutators(Class<?> clazz);\npublic List<JsonBeanAttribute> getAccessors(Class<?> clazz);",
            "Class_name": "JsonBeanIntrospector",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonBeanIntrospector.java###getAccessors",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.beans.IntrospectionException;\n\nimport java.beans.Introspector;\n\nimport java.beans.PropertyDescriptor;\n\nimport java.lang.reflect.Field;\n\nimport java.lang.reflect.Method;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.Map;\n\nimport com.zappos.json.annot.JsonEnum;\n\nimport com.zappos.json.annot.JsonFormat;\n\nimport com.zappos.json.annot.JsonIgnore;\n\nimport com.zappos.json.annot.JsonKey;\n\nimport com.zappos.json.format.NoOpValueFormatter;\n\nimport com.zappos.json.format.ValueFormatter;\n\nimport com.zappos.json.util.Reflections;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public List<JsonBeanAttribute> getAccessors(Class<?> clazz);",
            "Junit_version": "4",
            "returnType": "List<JsonBeanAttribute>"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonBeanIntrospector_ESTest.java###test0+++getInstance###0, JsonBeanIntrospector_ESTest.java###test0+++verifyException###2, JsonBeanIntrospector_ESTest.java###test0+++getMutators###1, JsonBeanIntrospector_ESTest.java###test0+++fail###1, JsonBeanIntrospector_ESTest.java###test1+++getInstance###0, JsonBeanIntrospector_ESTest.java###test1+++verifyException###2, JsonBeanIntrospector_ESTest.java###test1+++getAccessors###1, JsonBeanIntrospector_ESTest.java###test1+++fail###1, JsonBeanIntrospector_ESTest.java###test2+++getAccessors###1, JsonBeanIntrospector_ESTest.java###test2+++assertEquals###2, JsonBeanIntrospector_ESTest.java###test2+++size###0, JsonBeanIntrospector_ESTest.java###test3+++getMutators###1, JsonBeanIntrospector_ESTest.java###test3+++assertEquals###2, JsonBeanIntrospector_ESTest.java###test3+++size###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:49:54 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonBeanIntrospector_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonBeanIntrospector\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonBeanIntrospector_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.annot.JsonIgnore\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.annot.JsonKey\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.annot.JsonFormat\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.annot.JsonEnum\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.JsonException\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonBeanIntrospector_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonType\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.JsonBeanAttribute\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.format.NoOpValueFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator$TypeInfo\",\n      \"com.zappos.json.JsonReaderCodeGenerator$AttributeInfo\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonReaderCodeGenerator$PathAndCode\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonBeanAttribute;\nimport com.zappos.json.JsonBeanIntrospector;\nimport com.zappos.json.ZapposJson;\nimport com.zappos.json.format.NoOpValueFormatter;\nimport java.util.List;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanIntrospector_ESTest.java###test2",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    // Undeclared exception!\n    try {\n        jsonBeanIntrospector0.getMutators((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.beans.Introspector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    // Undeclared exception!\n    try {\n        jsonBeanIntrospector0.getAccessors((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.beans.Introspector\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    Class<NoOpValueFormatter> class0 = NoOpValueFormatter.class;\n    List<JsonBeanAttribute> list0 = jsonBeanIntrospector0.getAccessors(class0);\n    assertEquals(2, list0.size());\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    Class<NoOpValueFormatter> class0 = NoOpValueFormatter.class;\n    List<JsonBeanAttribute> list0 = jsonBeanIntrospector0.getMutators(class0);\n    assertEquals(1, list0.size());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson(false);\n    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);\n    Class<NoOpValueFormatter> class0 = NoOpValueFormatter.class;\n    List<JsonBeanAttribute> list0 = jsonBeanIntrospector0.getAccessors(class0);\n    assertEquals(2, list0.size());\n}",
            "TestRelevantFocal": "[getAccessors###1]",
            "TestCodeShell": "/*\r\n * This file was automatically generated by EvoSuite\r\n * Thu Jan 25 13:49:54 GMT 2024\r\n */\r\npackage com.zappos.json;\r\n\r\nimport org.junit.Test;\r\nimport static org.junit.Assert.*;\r\nimport static org.evosuite.runtime.EvoAssertions.*;\r\nimport com.zappos.json.JsonBeanAttribute;\r\nimport com.zappos.json.JsonBeanIntrospector;\r\nimport com.zappos.json.ZapposJson;\r\nimport com.zappos.json.format.NoOpValueFormatter;\r\nimport java.util.List;\r\nimport org.evosuite.runtime.EvoRunner;\r\nimport org.evosuite.runtime.EvoRunnerParameters;\r\nimport org.junit.runner.RunWith;\r\n\r\n@RunWith(EvoRunner.class)\r\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\r\npublic class JsonBeanIntrospector_ESTest extends JsonBeanIntrospector_ESTest_scaffolding {\r\n}\r\n"
        }
    },
    {
        "Under_test_method": {},
        "Test_method": {
            "AllTest2Focal": "[JsonType_ESTest.java###test00+++values###0, JsonType_ESTest.java###test00+++assertEquals###2, JsonType_ESTest.java###test01+++valueOf###1, JsonType_ESTest.java###test01+++assertEquals###2, JsonType_ESTest.java###test02+++toJsonType###1, JsonType_ESTest.java###test02+++fail###1, JsonType_ESTest.java###test03+++isNumberType###1, JsonType_ESTest.java###test03+++fail###1, JsonType_ESTest.java###test04+++verifyException###2, JsonType_ESTest.java###test04+++isArrayType###1, JsonType_ESTest.java###test04+++fail###1, JsonType_ESTest.java###test05+++isArrayType###1, JsonType_ESTest.java###test05+++assertFalse###1, JsonType_ESTest.java###test06+++isBooleanType###1, JsonType_ESTest.java###test06+++assertFalse###1, JsonType_ESTest.java###test07+++isBooleanType###1, JsonType_ESTest.java###test07+++fail###1, JsonType_ESTest.java###test08+++isStringType###1, JsonType_ESTest.java###test08+++assertFalse###1, JsonType_ESTest.java###test09+++isNumberType###1, JsonType_ESTest.java###test09+++assertTrue###1, JsonType_ESTest.java###test10+++isNumberType###1, JsonType_ESTest.java###test10+++assertFalse###1, JsonType_ESTest.java###test11+++isNumberType###1, JsonType_ESTest.java###test11+++assertTrue###1, JsonType_ESTest.java###test12+++toJsonType###1, JsonType_ESTest.java###test12+++assertEquals###2, JsonType_ESTest.java###test13+++toJsonType###1, JsonType_ESTest.java###test13+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:59:03 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonType_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonType\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonType_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.JsonType\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonType_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonType\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonType;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonType_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonType[] jsonTypeArray0 = JsonType.values();\n    assertEquals(5, jsonTypeArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonType jsonType0 = JsonType.valueOf(\"STRING\");\n    assertEquals(JsonType.STRING, jsonType0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.toJsonType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isNumberType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isArrayType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonType\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isArrayType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isBooleanType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isBooleanType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isStringType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Object> class0 = Object.class;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    JsonType jsonType0 = JsonType.toJsonType(class0);\n    assertEquals(JsonType.NUMBER, jsonType0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonType jsonType0 = JsonType.toJsonType(class0);\n    assertEquals(JsonType.OBJECT, jsonType0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.toJsonType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}",
            "TestRelevantFocal": "[toJsonType###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:59:03 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonType;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonType_ESTest extends JsonType_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {},
        "Test_method": {
            "AllTest2Focal": "[JsonType_ESTest.java###test00+++values###0, JsonType_ESTest.java###test00+++assertEquals###2, JsonType_ESTest.java###test01+++valueOf###1, JsonType_ESTest.java###test01+++assertEquals###2, JsonType_ESTest.java###test02+++toJsonType###1, JsonType_ESTest.java###test02+++fail###1, JsonType_ESTest.java###test03+++isNumberType###1, JsonType_ESTest.java###test03+++fail###1, JsonType_ESTest.java###test04+++verifyException###2, JsonType_ESTest.java###test04+++isArrayType###1, JsonType_ESTest.java###test04+++fail###1, JsonType_ESTest.java###test05+++isArrayType###1, JsonType_ESTest.java###test05+++assertFalse###1, JsonType_ESTest.java###test06+++isBooleanType###1, JsonType_ESTest.java###test06+++assertFalse###1, JsonType_ESTest.java###test07+++isBooleanType###1, JsonType_ESTest.java###test07+++fail###1, JsonType_ESTest.java###test08+++isStringType###1, JsonType_ESTest.java###test08+++assertFalse###1, JsonType_ESTest.java###test09+++isNumberType###1, JsonType_ESTest.java###test09+++assertTrue###1, JsonType_ESTest.java###test10+++isNumberType###1, JsonType_ESTest.java###test10+++assertFalse###1, JsonType_ESTest.java###test11+++isNumberType###1, JsonType_ESTest.java###test11+++assertTrue###1, JsonType_ESTest.java###test12+++toJsonType###1, JsonType_ESTest.java###test12+++assertEquals###2, JsonType_ESTest.java###test13+++toJsonType###1, JsonType_ESTest.java###test13+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:59:03 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonType_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonType\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonType_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.JsonType\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonType_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonType\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonType;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonType_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonType[] jsonTypeArray0 = JsonType.values();\n    assertEquals(5, jsonTypeArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonType jsonType0 = JsonType.valueOf(\"STRING\");\n    assertEquals(JsonType.STRING, jsonType0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.toJsonType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isNumberType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isArrayType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonType\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isArrayType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isBooleanType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isBooleanType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isStringType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Object> class0 = Object.class;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    JsonType jsonType0 = JsonType.toJsonType(class0);\n    assertEquals(JsonType.NUMBER, jsonType0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonType jsonType0 = JsonType.toJsonType(class0);\n    assertEquals(JsonType.OBJECT, jsonType0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isNumberType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}",
            "TestRelevantFocal": "[isNumberType###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:59:03 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonType;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonType_ESTest extends JsonType_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {},
        "Test_method": {
            "AllTest2Focal": "[JsonType_ESTest.java###test00+++values###0, JsonType_ESTest.java###test00+++assertEquals###2, JsonType_ESTest.java###test01+++valueOf###1, JsonType_ESTest.java###test01+++assertEquals###2, JsonType_ESTest.java###test02+++toJsonType###1, JsonType_ESTest.java###test02+++fail###1, JsonType_ESTest.java###test03+++isNumberType###1, JsonType_ESTest.java###test03+++fail###1, JsonType_ESTest.java###test04+++verifyException###2, JsonType_ESTest.java###test04+++isArrayType###1, JsonType_ESTest.java###test04+++fail###1, JsonType_ESTest.java###test05+++isArrayType###1, JsonType_ESTest.java###test05+++assertFalse###1, JsonType_ESTest.java###test06+++isBooleanType###1, JsonType_ESTest.java###test06+++assertFalse###1, JsonType_ESTest.java###test07+++isBooleanType###1, JsonType_ESTest.java###test07+++fail###1, JsonType_ESTest.java###test08+++isStringType###1, JsonType_ESTest.java###test08+++assertFalse###1, JsonType_ESTest.java###test09+++isNumberType###1, JsonType_ESTest.java###test09+++assertTrue###1, JsonType_ESTest.java###test10+++isNumberType###1, JsonType_ESTest.java###test10+++assertFalse###1, JsonType_ESTest.java###test11+++isNumberType###1, JsonType_ESTest.java###test11+++assertTrue###1, JsonType_ESTest.java###test12+++toJsonType###1, JsonType_ESTest.java###test12+++assertEquals###2, JsonType_ESTest.java###test13+++toJsonType###1, JsonType_ESTest.java###test13+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:59:03 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonType_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonType\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonType_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.JsonType\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonType_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonType\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonType;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonType_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonType[] jsonTypeArray0 = JsonType.values();\n    assertEquals(5, jsonTypeArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonType jsonType0 = JsonType.valueOf(\"STRING\");\n    assertEquals(JsonType.STRING, jsonType0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.toJsonType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isNumberType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isArrayType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonType\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isArrayType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isBooleanType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isBooleanType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isStringType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Object> class0 = Object.class;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    JsonType jsonType0 = JsonType.toJsonType(class0);\n    assertEquals(JsonType.NUMBER, jsonType0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonType jsonType0 = JsonType.toJsonType(class0);\n    assertEquals(JsonType.OBJECT, jsonType0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isArrayType(class0);\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[isArrayType###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:59:03 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonType;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonType_ESTest extends JsonType_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {},
        "Test_method": {
            "AllTest2Focal": "[JsonType_ESTest.java###test00+++values###0, JsonType_ESTest.java###test00+++assertEquals###2, JsonType_ESTest.java###test01+++valueOf###1, JsonType_ESTest.java###test01+++assertEquals###2, JsonType_ESTest.java###test02+++toJsonType###1, JsonType_ESTest.java###test02+++fail###1, JsonType_ESTest.java###test03+++isNumberType###1, JsonType_ESTest.java###test03+++fail###1, JsonType_ESTest.java###test04+++verifyException###2, JsonType_ESTest.java###test04+++isArrayType###1, JsonType_ESTest.java###test04+++fail###1, JsonType_ESTest.java###test05+++isArrayType###1, JsonType_ESTest.java###test05+++assertFalse###1, JsonType_ESTest.java###test06+++isBooleanType###1, JsonType_ESTest.java###test06+++assertFalse###1, JsonType_ESTest.java###test07+++isBooleanType###1, JsonType_ESTest.java###test07+++fail###1, JsonType_ESTest.java###test08+++isStringType###1, JsonType_ESTest.java###test08+++assertFalse###1, JsonType_ESTest.java###test09+++isNumberType###1, JsonType_ESTest.java###test09+++assertTrue###1, JsonType_ESTest.java###test10+++isNumberType###1, JsonType_ESTest.java###test10+++assertFalse###1, JsonType_ESTest.java###test11+++isNumberType###1, JsonType_ESTest.java###test11+++assertTrue###1, JsonType_ESTest.java###test12+++toJsonType###1, JsonType_ESTest.java###test12+++assertEquals###2, JsonType_ESTest.java###test13+++toJsonType###1, JsonType_ESTest.java###test13+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:59:03 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonType_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonType\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonType_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.JsonType\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonType_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonType\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonType;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonType_ESTest.java###test07",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonType[] jsonTypeArray0 = JsonType.values();\n    assertEquals(5, jsonTypeArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonType jsonType0 = JsonType.valueOf(\"STRING\");\n    assertEquals(JsonType.STRING, jsonType0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.toJsonType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isNumberType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isArrayType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonType\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isArrayType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isBooleanType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isBooleanType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isStringType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Object> class0 = Object.class;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    JsonType jsonType0 = JsonType.toJsonType(class0);\n    assertEquals(JsonType.NUMBER, jsonType0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonType jsonType0 = JsonType.toJsonType(class0);\n    assertEquals(JsonType.OBJECT, jsonType0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isBooleanType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}",
            "TestRelevantFocal": "[isBooleanType###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:59:03 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonType;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonType_ESTest extends JsonType_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {},
        "Test_method": {
            "AllTest2Focal": "[JsonType_ESTest.java###test00+++values###0, JsonType_ESTest.java###test00+++assertEquals###2, JsonType_ESTest.java###test01+++valueOf###1, JsonType_ESTest.java###test01+++assertEquals###2, JsonType_ESTest.java###test02+++toJsonType###1, JsonType_ESTest.java###test02+++fail###1, JsonType_ESTest.java###test03+++isNumberType###1, JsonType_ESTest.java###test03+++fail###1, JsonType_ESTest.java###test04+++verifyException###2, JsonType_ESTest.java###test04+++isArrayType###1, JsonType_ESTest.java###test04+++fail###1, JsonType_ESTest.java###test05+++isArrayType###1, JsonType_ESTest.java###test05+++assertFalse###1, JsonType_ESTest.java###test06+++isBooleanType###1, JsonType_ESTest.java###test06+++assertFalse###1, JsonType_ESTest.java###test07+++isBooleanType###1, JsonType_ESTest.java###test07+++fail###1, JsonType_ESTest.java###test08+++isStringType###1, JsonType_ESTest.java###test08+++assertFalse###1, JsonType_ESTest.java###test09+++isNumberType###1, JsonType_ESTest.java###test09+++assertTrue###1, JsonType_ESTest.java###test10+++isNumberType###1, JsonType_ESTest.java###test10+++assertFalse###1, JsonType_ESTest.java###test11+++isNumberType###1, JsonType_ESTest.java###test11+++assertTrue###1, JsonType_ESTest.java###test12+++toJsonType###1, JsonType_ESTest.java###test12+++assertEquals###2, JsonType_ESTest.java###test13+++toJsonType###1, JsonType_ESTest.java###test13+++assertEquals###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:59:03 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonType_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonType\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonType_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.JsonType\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonType_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonType\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonType;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonType_ESTest.java###test08",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonType[] jsonTypeArray0 = JsonType.values();\n    assertEquals(5, jsonTypeArray0.length);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    JsonType jsonType0 = JsonType.valueOf(\"STRING\");\n    assertEquals(JsonType.STRING, jsonType0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.toJsonType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isNumberType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isArrayType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonType\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isArrayType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isBooleanType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    // Undeclared exception!\n    try {\n        JsonType.isBooleanType((Class<?>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isStringType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<Object> class0 = Object.class;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isNumberType(class0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<Integer> class0 = Integer.TYPE;\n    JsonType jsonType0 = JsonType.toJsonType(class0);\n    assertEquals(JsonType.NUMBER, jsonType0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Object> class0 = Object.class;\n    JsonType jsonType0 = JsonType.toJsonType(class0);\n    assertEquals(JsonType.OBJECT, jsonType0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    boolean boolean0 = JsonType.isStringType(class0);\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[isStringType###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:59:03 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonType;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonType_ESTest extends JsonType_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Object parse() throws IOException {\n    read();\n    skipWhiteSpace();\n    Object result = readValue(null, 0);\n    skipWhiteSpace();\n    if (!isEndOfText()) {\n        throw error(\"Unexpected character\");\n    }\n    return result;\n}",
            "all_field_declaration": "/*\n   * TODO: single-quote (') is not defined in JSON spec but it is valid in JavaScript.\n   * We should make it configurable and the default configuration is throwing exception.\n   * \n   */\npublic static final int MAX_OBJECT_TREE_DEEP = 12;\nprivate static final int MIN_BUFFER_SIZE = 10;\nprivate static final int DEFAULT_BUFFER_SIZE = 1024;\nprivate final Reader reader;\nprivate final char[] buffer;\nprivate int bufferOffset;\nprivate int index;\nprivate int fill;\nprivate int line;\nprivate int lineOffset;\nprivate int current;\nprivate StringBuilder captureBuffer;\nprivate int captureStart;\nprivate String[] paths = new String[MAX_OBJECT_TREE_DEEP];\n@SuppressWarnings(\"unused\")\nprivate ZapposJson zapposJson;",
            "sub_project_name": "Zappos_zappos-json",
            "lineNumbers": "6",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "import java.io.IOException;\n",
            "public_method_signature": "public JsonReader(ZapposJson zapposJson, String string);\npublic JsonReader(ZapposJson zapposJson, Reader reader);\npublic JsonReader(ZapposJson jacinda, Reader reader, int buffersize);\npublic Object parse() throws IOException;",
            "public_field": "/*\n   * TODO: single-quote (') is not defined in JSON spec but it is valid in JavaScript.\n   * We should make it configurable and the default configuration is throwing exception.\n   * \n   */\npublic static final int MAX_OBJECT_TREE_DEEP = 12;",
            "Method_statement": "parse()",
            "Method_name": "parse",
            "Class_declaration": "public class JsonReader {\n",
            "constructors": "public JsonReader(ZapposJson zapposJson, String string) {\n    this(zapposJson, new StringReader(string), Math.max(MIN_BUFFER_SIZE, Math.min(DEFAULT_BUFFER_SIZE, string.length())));\n}public JsonReader(ZapposJson zapposJson, Reader reader) {\n    this(zapposJson, reader, DEFAULT_BUFFER_SIZE);\n}public JsonReader(ZapposJson jacinda, Reader reader, int buffersize) {\n    this.zapposJson = jacinda;\n    this.reader = reader;\n    buffer = new char[buffersize];\n    line = 1;\n    captureStart = -1;\n}",
            "all_method_signature": "public JsonReader(ZapposJson zapposJson, String string);\npublic JsonReader(ZapposJson zapposJson, Reader reader);\npublic JsonReader(ZapposJson jacinda, Reader reader, int buffersize);\npublic Object parse() throws IOException;\nprivate Object readValue(String path, int level) throws IOException;\nprivate Object readArray(String path, int level) throws IOException;\nprivate Object readObject(String path, int level) throws IOException;\nprivate Object createObject(int level, Map<String, Object> data);\nprivate String getPath(int level);\nprivate String readName() throws IOException;\nprivate Object readNull() throws IOException;\nprivate Object readTrue() throws IOException;\nprivate Object readFalse() throws IOException;\nprivate void readRequiredChar(char ch) throws IOException;\nprivate Object readString() throws IOException;\nprivate String readStringInternal() throws IOException;\nprivate void readEscape() throws IOException;\nprivate Object readNumber() throws IOException;\nprivate boolean readFraction() throws IOException;\nprivate boolean readExponent() throws IOException;\nprivate boolean readChar(char ch) throws IOException;\nprivate boolean readDigit() throws IOException;\nprivate void skipWhiteSpace() throws IOException;\nprivate void read() throws IOException;\nprivate void startCapture();\nprivate void pauseCapture();\nprivate String endCapture();\nprivate JsonException expected(String expected);\nprivate JsonException error(String message);\nprivate boolean isWhiteSpace();\nprivate boolean isDigit();\nprivate boolean isHexDigit();\nprivate boolean isEndOfText();",
            "Class_name": "JsonReader",
            "project_path": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/main/java/com/zappos/json/JsonReader.java###parse",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.io.IOException;\n\nimport java.io.Reader;\n\nimport java.io.StringReader;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\nimport java.util.Map;\n",
            "comment": "",
            "packageName": "com.zappos.json",
            "method_signature": "public Object parse() throws IOException;",
            "Junit_version": "4",
            "returnType": "Object"
        },
        "Test_method": {
            "AllTest2Focal": "[JsonReader_ESTest.java###test00+++verifyException###2, JsonReader_ESTest.java###test00+++parse###0, JsonReader_ESTest.java###test00+++fail###1, JsonReader_ESTest.java###test01+++getInstance###1, JsonReader_ESTest.java###test01+++verifyException###2, JsonReader_ESTest.java###test01+++parse###0, JsonReader_ESTest.java###test01+++fail###1, JsonReader_ESTest.java###test02+++verifyException###2, JsonReader_ESTest.java###test02+++parse###0, JsonReader_ESTest.java###test02+++fail###1, JsonReader_ESTest.java###test03+++verifyException###2, JsonReader_ESTest.java###test03+++fail###1, JsonReader_ESTest.java###test04+++verifyException###2, JsonReader_ESTest.java###test04+++fail###1, JsonReader_ESTest.java###test05+++verifyException###2, JsonReader_ESTest.java###test05+++parse###0, JsonReader_ESTest.java###test05+++fail###1, JsonReader_ESTest.java###test06+++getInstance###1, JsonReader_ESTest.java###test06+++parse###0, JsonReader_ESTest.java###test06+++assertEquals###2, JsonReader_ESTest.java###test06+++size###0, JsonReader_ESTest.java###test07+++getInstance###0, JsonReader_ESTest.java###test07+++verifyException###2, JsonReader_ESTest.java###test07+++parse###0, JsonReader_ESTest.java###test07+++fail###1, JsonReader_ESTest.java###test08+++getInstance###0, JsonReader_ESTest.java###test08+++verifyException###2, JsonReader_ESTest.java###test08+++parse###0, JsonReader_ESTest.java###test08+++fail###1, JsonReader_ESTest.java###test09+++verifyException###2, JsonReader_ESTest.java###test09+++parse###0, JsonReader_ESTest.java###test09+++fail###1, JsonReader_ESTest.java###test10+++verifyException###2, JsonReader_ESTest.java###test10+++parse###0, JsonReader_ESTest.java###test10+++fail###1, JsonReader_ESTest.java###test11+++parse###0, JsonReader_ESTest.java###test11+++verifyException###2, JsonReader_ESTest.java###test11+++parse###0, JsonReader_ESTest.java###test11+++fail###1, JsonReader_ESTest.java###test12+++getInstance###0, JsonReader_ESTest.java###test12+++verifyException###2, JsonReader_ESTest.java###test12+++parse###0, JsonReader_ESTest.java###test12+++fail###1, JsonReader_ESTest.java###test13+++verifyException###2, JsonReader_ESTest.java###test13+++parse###0, JsonReader_ESTest.java###test13+++fail###1, JsonReader_ESTest.java###test14+++verifyException###2, JsonReader_ESTest.java###test14+++parse###0, JsonReader_ESTest.java###test14+++fail###1, JsonReader_ESTest.java###test15+++verifyException###2, JsonReader_ESTest.java###test15+++parse###0, JsonReader_ESTest.java###test15+++fail###1, JsonReader_ESTest.java###test16+++parse###0, JsonReader_ESTest.java###test16+++assertEquals###2, JsonReader_ESTest.java###test17+++verifyException###2, JsonReader_ESTest.java###test17+++parse###0, JsonReader_ESTest.java###test17+++fail###1, JsonReader_ESTest.java###test18+++verifyException###2, JsonReader_ESTest.java###test18+++parse###0, JsonReader_ESTest.java###test18+++fail###1, JsonReader_ESTest.java###test19+++verifyException###2, JsonReader_ESTest.java###test19+++parse###0, JsonReader_ESTest.java###test19+++fail###1, JsonReader_ESTest.java###test20+++verifyException###2, JsonReader_ESTest.java###test20+++parse###0, JsonReader_ESTest.java###test20+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Thu Jan 25 13:53:16 GMT 2024\n */\n\npackage com.zappos.json;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class JsonReader_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"com.zappos.json.JsonReader\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\Zappos_zappos-json\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonReader_ESTest_scaffolding.class.getClassLoader() ,\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\",\n      \"com.zappos.json.JsonReader\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.ValueFormatter\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.format.JavaDateFormatter\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonReader_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"com.zappos.json.JsonReader\",\n      \"com.zappos.json.ZapposJson\",\n      \"com.zappos.json.format.AbstractValueFormatter\",\n      \"com.zappos.json.format.JavaDateFormatter\",\n      \"com.zappos.json.format.JavaSqlDateFormatter\",\n      \"com.zappos.json.format.JavaTimestampFormatter\",\n      \"com.zappos.json.format.AbstractNumberFormatter\",\n      \"com.zappos.json.format.BigIntegerFormatter\",\n      \"com.zappos.json.format.BigDecimalFormatter\",\n      \"com.zappos.json.util.Reflections\",\n      \"com.zappos.json.format.JavaTimeLocalDateFormatter\",\n      \"com.zappos.json.format.JavaTimeInstantFormatter\",\n      \"com.zappos.json.JsonBeanIntrospector\",\n      \"com.zappos.json.JsonWriterCodeGenerator\",\n      \"com.zappos.json.JsonReaderCodeGenerator\",\n      \"com.zappos.json.util.Strings\",\n      \"com.zappos.json.JsonException\",\n      \"com.zappos.json.ZapposJson$ZapposJsonSingleton\",\n      \"com.zappos.json.JsonWriter\",\n      \"com.zappos.json.util.JsonUtils\",\n      \"com.zappos.json.JsonConfig$WriterConfig\",\n      \"com.zappos.json.JsonConfig$ReaderConfig\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport com.zappos.json.JsonReader;\nimport com.zappos.json.ZapposJson;\nimport java.io.Reader;\n",
            "TestInfo": "E:/AgentTester v2/Repos/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReader_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, (Reader) null);\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"k.Z&&N>^?(kPH\");\n    StringReader stringReader0 = new StringReader(\"k.Z&&N>^?(kPH\");\n    JsonReader jsonReader0 = new JsonReader(zapposJson0, stringReader0, 0);\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    PipedReader pipedReader0 = new PipedReader();\n    JsonReader jsonReader0 = new JsonReader(zapposJson0, pipedReader0);\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: IOException\");\n    } catch (IOException e) {\n        // \n        // Pipe not connected\n        // \n        verifyException(\"java.io.PipedReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    JsonReader jsonReader0 = null;\n    try {\n        jsonReader0 = new JsonReader((ZapposJson) null, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.io.StringReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    JsonReader jsonReader0 = null;\n    try {\n        jsonReader0 = new JsonReader((ZapposJson) null, (Reader) null, (-3724));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"',' or '}'\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Unexpected character[offset:4, line: 1, column: 4\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance(\"p-LZ\");\n    JsonReader jsonReader0 = new JsonReader(zapposJson0, \"[]\");\n    ArrayList arrayList0 = (ArrayList) jsonReader0.parse();\n    assertEquals(0, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonReader jsonReader0 = new JsonReader(zapposJson0, \"  writer.write(CONST_COMMA);\\n\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Expected value[offset:2, line: 1, column: 2\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonReader jsonReader0 = new JsonReader(zapposJson0, \"9t+<j\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Unexpected character[offset:1, line: 1, column: 1\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"8r>{-~,sl~)\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Unexpected character[offset:1, line: 1, column: 1\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"5D#Y~s^a\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Unexpected character[offset:1, line: 1, column: 1\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"3\");\n    jsonReader0.parse();\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Unexpected character[offset:2, line: 1, column: 2\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    ZapposJson zapposJson0 = ZapposJson.getInstance();\n    JsonReader jsonReader0 = new JsonReader(zapposJson0, \"1mjGNg\\\"!a\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Unexpected character[offset:1, line: 1, column: 1\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReader jsonReader0 = new JsonReader(zapposJson0, \"-#;yx>R6dC*~*>}9\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Expected digit[offset:1, line: 1, column: 1\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"\\\"0b VxFWK\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Unexpected end of input[offset:9, line: 1, column: 8\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"6BM?`%>k/\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Unexpected character[offset:1, line: 1, column: 1\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"73\");\n    Object object0 = jsonReader0.parse();\n    assertEquals(\"73\", object0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"['6L0h>!4|Ip7IJyCh\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Unexpected end of input[offset:18, line: 1, column: 17\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"tM{WR#+l2I'\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Expected 'r'[offset:1, line: 1, column: 1\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ZapposJson zapposJson0 = new ZapposJson();\n    JsonReader jsonReader0 = new JsonReader(zapposJson0, \"fvC*\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Expected 'a'[offset:1, line: 1, column: 1\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"naxe\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Expected 'u'[offset:1, line: 1, column: 1\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    JsonReader jsonReader0 = new JsonReader((ZapposJson) null, \"',' or '}'\");\n    // Undeclared exception!\n    try {\n        jsonReader0.parse();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        // \n        // Unexpected character[offset:4, line: 1, column: 4\n        // \n        verifyException(\"com.zappos.json.JsonReader\", e);\n    }\n}",
            "TestRelevantFocal": "[parse###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  13:53:16 GMT 2024\n */\npackage com.zappos.json;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.zappos.json.JsonReader;\nimport com.zappos.json.ZapposJson;\nimport java.io.IOException;\nimport java.io.PipedReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    }
]