[
    {
        "Under_test_method": {
            "Method_body": "boolean isInTheSameRegionAs(Point otherPoint) {\n    return this.region == otherPoint.region;\n}",
            "all_field_declaration": "private double xMin;\nprivate double yMin;\nprivate double xMax;\nprivate double yMax;\nprivate static final int INSIDE = 0;\nprivate static final int LEFT = 1;\nprivate static final int RIGHT = 2;\nprivate static final int BOTTOM = 4;\nprivate static final int TOP = 8;\nprivate final static float MINIMUM_DELTA = 0.01f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "int region;",
            "Parameter_type": "Point",
            "Import_statements": "",
            "public_method_signature": "public CohenSutherlandClipping();\npublic CohenSutherlandClipping(Rectangle2D clipWindow);\npublic void setClip(Rectangle2D clipWindow);\npublic boolean clip(Line2D.Float line);",
            "public_field": "",
            "Method_statement": "isInTheSameRegionAs(Point otherPoint)",
            "Method_name": "isInTheSameRegionAs",
            "Class_declaration": "class Point {\n",
            "constructors": "Point(double x, double y) {\n    setPositionAndRegion(x, y);\n}",
            "all_method_signature": "public CohenSutherlandClipping();\npublic CohenSutherlandClipping(Rectangle2D clipWindow);\npublic void setClip(Rectangle2D clipWindow);\npublic boolean clip(Line2D.Float line);\nprivate static double delta(double value1, double value2);",
            "Class_name": "Point",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/CohenSutherlandClipping.java###isInTheSameRegionAs",
            "Parameter_num": "1",
            "contextMethod": "public void setClip(Rectangle2D clipWindow) {\n    xMin = clipWindow.getX();\n    xMax = xMin + clipWindow.getWidth();\n    yMin = clipWindow.getY();\n    yMax = yMin + clipWindow.getHeight();\n}\npublic boolean clip(Line2D.Float line) {\n    Point point1 = new Point(line.getX1(), line.getY1());\n    Point point2 = new Point(line.getX2(), line.getY2());\n    Point outsidePoint = new Point(0d, 0d);\n    boolean lineIsVertical = (point1.x == point2.x);\n    double lineSlope = lineIsVertical ? 0d : (point2.y - point1.y) / (point2.x - point1.x);\n    while (point1.region != INSIDE || point2.region != INSIDE) {\n        if ((point1.region & point2.region) != 0)\n            return false;\n        outsidePoint.region = (point1.region == INSIDE) ? point2.region : point1.region;\n        if ((outsidePoint.region & LEFT) != 0) {\n            outsidePoint.x = xMin;\n            outsidePoint.y = delta(outsidePoint.x, point1.x) * lineSlope + point1.y;\n        } else if ((outsidePoint.region & RIGHT) != 0) {\n            outsidePoint.x = xMax;\n            outsidePoint.y = delta(outsidePoint.x, point1.x) * lineSlope + point1.y;\n        } else if ((outsidePoint.region & BOTTOM) != 0) {\n            outsidePoint.y = yMin;\n            outsidePoint.x = lineIsVertical ? point1.x : delta(outsidePoint.y, point1.y) / lineSlope + point1.x;\n        } else if ((outsidePoint.region & TOP) != 0) {\n            outsidePoint.y = yMax;\n            outsidePoint.x = lineIsVertical ? point1.x : delta(outsidePoint.y, point1.y) / lineSlope + point1.x;\n        }\n        if (outsidePoint.isInTheSameRegionAs(point1)) {\n            point1.setPositionAndRegion(outsidePoint.x, outsidePoint.y);\n        } else {\n            point2.setPositionAndRegion(outsidePoint.x, outsidePoint.y);\n        }\n    }\n    line.setLine(point1.x, point1.y, point2.x, point2.y);\n    return true;\n}",
            "all_Import_statements": "import java.awt.geom.Rectangle2D;\n\nimport java.awt.geom.Line2D;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": " boolean isInTheSameRegionAs(Point otherPoint);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[CohenSutherlandClipping_ESTest.java###test00+++isInTheSameRegionAs###1, CohenSutherlandClipping_ESTest.java###test00+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test01+++getBounds###0, CohenSutherlandClipping_ESTest.java###test01+++createIntersection###1, CohenSutherlandClipping_ESTest.java###test01+++setClip###1, CohenSutherlandClipping_ESTest.java###test01+++setPositionAndRegion###2, CohenSutherlandClipping_ESTest.java###test02+++clip###1, CohenSutherlandClipping_ESTest.java###test02+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test03+++createIntersection###1, CohenSutherlandClipping_ESTest.java###test04+++verifyException###2, CohenSutherlandClipping_ESTest.java###test04+++setClip###1, CohenSutherlandClipping_ESTest.java###test04+++fail###1, CohenSutherlandClipping_ESTest.java###test05+++verifyException###2, CohenSutherlandClipping_ESTest.java###test05+++clip###1, CohenSutherlandClipping_ESTest.java###test05+++fail###1, CohenSutherlandClipping_ESTest.java###test06+++verifyException###2, CohenSutherlandClipping_ESTest.java###test06+++fail###1, CohenSutherlandClipping_ESTest.java###test07+++clip###1, CohenSutherlandClipping_ESTest.java###test07+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test08+++clip###1, CohenSutherlandClipping_ESTest.java###test08+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test08+++assertTrue###1, CohenSutherlandClipping_ESTest.java###test09+++clip###1, CohenSutherlandClipping_ESTest.java###test09+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test10+++clip###1, CohenSutherlandClipping_ESTest.java###test10+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test10+++assertTrue###1, CohenSutherlandClipping_ESTest.java###test11+++clip###1, CohenSutherlandClipping_ESTest.java###test11+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test11+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:46:24 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class CohenSutherlandClipping_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.CohenSutherlandClipping\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CohenSutherlandClipping_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.CohenSutherlandClipping\",\n      \"technology.tabula.CohenSutherlandClipping$Point\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CohenSutherlandClipping_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.CohenSutherlandClipping\",\n      \"technology.tabula.CohenSutherlandClipping$Point\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.CohenSutherlandClipping;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/CohenSutherlandClipping_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point1 = cohenSutherlandClipping0.new Point(85.583519889645, (-1224.317));\n    boolean boolean0 = cohenSutherlandClipping_Point1.isInTheSameRegionAs(cohenSutherlandClipping_Point0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1307.7F, 1307.7F, 1307.7F, 1.0F);\n    java.awt.Rectangle rectangle0 = rectangle2D_Float0.getBounds();\n    Rectangle2D rectangle2D0 = rectangle0.createIntersection(rectangle2D_Float0);\n    cohenSutherlandClipping0.setClip(rectangle2D0);\n    cohenSutherlandClipping_Point0.setPositionAndRegion(1307.7F, 1307.7F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.01F, (-867.8885F), 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (-1528.726938792), 0.0, 0.0);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle((-191), 270);\n    Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle0);\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping(rectangle2D0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    // Undeclared exception!\n    try {\n        cohenSutherlandClipping0.setClip((Rectangle2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    // Undeclared exception!\n    try {\n        cohenSutherlandClipping0.clip((Line2D.Float) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = null;\n    try {\n        cohenSutherlandClipping0 = new CohenSutherlandClipping((Rectangle2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(290.05316F, (-574.2401F), (-574.2401F), 290.05316F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.0F, 0.0F, (-1.0F));\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.y2, 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float((-1.0F), 1763.0F, 1763.0F, (-1.0F));\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 1442.09F, 0.0F, 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.y1, 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(553.22186F, 0.0F, (-1.0F), 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.x2, 0.01F);\n    assertTrue(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point1 = cohenSutherlandClipping0.new Point(85.583519889645, (-1224.317));\n    boolean boolean0 = cohenSutherlandClipping_Point1.isInTheSameRegionAs(cohenSutherlandClipping_Point0);\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[isInTheSameRegionAs###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:46:24 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.CohenSutherlandClipping;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class CohenSutherlandClipping_ESTest extends CohenSutherlandClipping_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setClip(Rectangle2D clipWindow) {\n    xMin = clipWindow.getX();\n    xMax = xMin + clipWindow.getWidth();\n    yMin = clipWindow.getY();\n    yMax = yMin + clipWindow.getHeight();\n}",
            "all_field_declaration": "private double xMin;\nprivate double yMin;\nprivate double xMax;\nprivate double yMax;\nprivate static final int INSIDE = 0;\nprivate static final int LEFT = 1;\nprivate static final int RIGHT = 2;\nprivate static final int BOTTOM = 4;\nprivate static final int TOP = 8;\nprivate final static float MINIMUM_DELTA = 0.01f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "private double xMin;private double yMin;private double xMax;private double yMax;",
            "Parameter_type": "Rectangle2D",
            "Import_statements": "import java.awt.geom.Rectangle2D;\n",
            "public_method_signature": "public CohenSutherlandClipping();\npublic CohenSutherlandClipping(Rectangle2D clipWindow);\npublic void setClip(Rectangle2D clipWindow);\npublic boolean clip(Line2D.Float line);",
            "public_field": "",
            "Method_statement": "setClip(Rectangle2D clipWindow)",
            "Method_name": "setClip",
            "Class_declaration": "public  final class CohenSutherlandClipping {\n",
            "constructors": "public CohenSutherlandClipping() {\n}public CohenSutherlandClipping(Rectangle2D clipWindow) {\n    setClip(clipWindow);\n}",
            "all_method_signature": "public CohenSutherlandClipping();\npublic CohenSutherlandClipping(Rectangle2D clipWindow);\npublic void setClip(Rectangle2D clipWindow);\npublic boolean clip(Line2D.Float line);\nprivate static double delta(double value1, double value2);",
            "Class_name": "CohenSutherlandClipping",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/CohenSutherlandClipping.java###setClip",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Rectangle2D;\n\nimport java.awt.geom.Line2D;\n",
            "comment": "\n     * Sets the clip rectangle.\n     * @param clipWindow the clip window.\n     ",
            "packageName": "technology.tabula",
            "method_signature": "public void setClip(Rectangle2D clipWindow);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[CohenSutherlandClipping_ESTest.java###test00+++isInTheSameRegionAs###1, CohenSutherlandClipping_ESTest.java###test00+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test01+++getBounds###0, CohenSutherlandClipping_ESTest.java###test01+++createIntersection###1, CohenSutherlandClipping_ESTest.java###test01+++setClip###1, CohenSutherlandClipping_ESTest.java###test01+++setPositionAndRegion###2, CohenSutherlandClipping_ESTest.java###test02+++clip###1, CohenSutherlandClipping_ESTest.java###test02+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test03+++createIntersection###1, CohenSutherlandClipping_ESTest.java###test04+++verifyException###2, CohenSutherlandClipping_ESTest.java###test04+++setClip###1, CohenSutherlandClipping_ESTest.java###test04+++fail###1, CohenSutherlandClipping_ESTest.java###test05+++verifyException###2, CohenSutherlandClipping_ESTest.java###test05+++clip###1, CohenSutherlandClipping_ESTest.java###test05+++fail###1, CohenSutherlandClipping_ESTest.java###test06+++verifyException###2, CohenSutherlandClipping_ESTest.java###test06+++fail###1, CohenSutherlandClipping_ESTest.java###test07+++clip###1, CohenSutherlandClipping_ESTest.java###test07+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test08+++clip###1, CohenSutherlandClipping_ESTest.java###test08+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test08+++assertTrue###1, CohenSutherlandClipping_ESTest.java###test09+++clip###1, CohenSutherlandClipping_ESTest.java###test09+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test10+++clip###1, CohenSutherlandClipping_ESTest.java###test10+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test10+++assertTrue###1, CohenSutherlandClipping_ESTest.java###test11+++clip###1, CohenSutherlandClipping_ESTest.java###test11+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test11+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:46:24 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class CohenSutherlandClipping_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.CohenSutherlandClipping\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CohenSutherlandClipping_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.CohenSutherlandClipping\",\n      \"technology.tabula.CohenSutherlandClipping$Point\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CohenSutherlandClipping_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.CohenSutherlandClipping\",\n      \"technology.tabula.CohenSutherlandClipping$Point\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.geom.Rectangle2D;\nimport technology.tabula.CohenSutherlandClipping;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/CohenSutherlandClipping_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point1 = cohenSutherlandClipping0.new Point(85.583519889645, (-1224.317));\n    boolean boolean0 = cohenSutherlandClipping_Point1.isInTheSameRegionAs(cohenSutherlandClipping_Point0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1307.7F, 1307.7F, 1307.7F, 1.0F);\n    java.awt.Rectangle rectangle0 = rectangle2D_Float0.getBounds();\n    Rectangle2D rectangle2D0 = rectangle0.createIntersection(rectangle2D_Float0);\n    cohenSutherlandClipping0.setClip(rectangle2D0);\n    cohenSutherlandClipping_Point0.setPositionAndRegion(1307.7F, 1307.7F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.01F, (-867.8885F), 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (-1528.726938792), 0.0, 0.0);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle((-191), 270);\n    Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle0);\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping(rectangle2D0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    // Undeclared exception!\n    try {\n        cohenSutherlandClipping0.setClip((Rectangle2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    // Undeclared exception!\n    try {\n        cohenSutherlandClipping0.clip((Line2D.Float) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = null;\n    try {\n        cohenSutherlandClipping0 = new CohenSutherlandClipping((Rectangle2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(290.05316F, (-574.2401F), (-574.2401F), 290.05316F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.0F, 0.0F, (-1.0F));\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.y2, 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float((-1.0F), 1763.0F, 1763.0F, (-1.0F));\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 1442.09F, 0.0F, 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.y1, 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(553.22186F, 0.0F, (-1.0F), 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.x2, 0.01F);\n    assertTrue(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1307.7F, 1307.7F, 1307.7F, 1.0F);\n    java.awt.Rectangle rectangle0 = rectangle2D_Float0.getBounds();\n    Rectangle2D rectangle2D0 = rectangle0.createIntersection(rectangle2D_Float0);\n    cohenSutherlandClipping0.setClip(rectangle2D0);\n    cohenSutherlandClipping_Point0.setPositionAndRegion(1307.7F, 1307.7F);\n}",
            "TestRelevantFocal": "[setClip###1, setPositionAndRegion###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:46:24 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.CohenSutherlandClipping;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class CohenSutherlandClipping_ESTest extends CohenSutherlandClipping_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "void setPositionAndRegion(double x, double y) {\n    this.x = x;\n    this.y = y;\n    region = (x < xMin) ? LEFT : (x > xMax) ? RIGHT : INSIDE;\n    if (y < yMin)\n        region |= BOTTOM;\n    else if (y > yMax)\n        region |= TOP;\n}",
            "all_field_declaration": "private double xMin;\nprivate double yMin;\nprivate double xMax;\nprivate double yMax;\nprivate static final int INSIDE = 0;\nprivate static final int LEFT = 1;\nprivate static final int RIGHT = 2;\nprivate static final int BOTTOM = 4;\nprivate static final int TOP = 8;\nprivate final static float MINIMUM_DELTA = 0.01f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "double x, y;int region;",
            "Parameter_type": "double,double",
            "Import_statements": "",
            "public_method_signature": "public CohenSutherlandClipping();\npublic CohenSutherlandClipping(Rectangle2D clipWindow);\npublic void setClip(Rectangle2D clipWindow);\npublic boolean clip(Line2D.Float line);",
            "public_field": "",
            "Method_statement": "setPositionAndRegion(double x, double y)",
            "Method_name": "setPositionAndRegion",
            "Class_declaration": "class Point {\n",
            "constructors": "Point(double x, double y) {\n    setPositionAndRegion(x, y);\n}",
            "all_method_signature": "public CohenSutherlandClipping();\npublic CohenSutherlandClipping(Rectangle2D clipWindow);\npublic void setClip(Rectangle2D clipWindow);\npublic boolean clip(Line2D.Float line);\nprivate static double delta(double value1, double value2);",
            "Class_name": "Point",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/CohenSutherlandClipping.java###setPositionAndRegion",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Rectangle2D;\n\nimport java.awt.geom.Line2D;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": " void setPositionAndRegion(double x, double y);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[CohenSutherlandClipping_ESTest.java###test00+++isInTheSameRegionAs###1, CohenSutherlandClipping_ESTest.java###test00+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test01+++getBounds###0, CohenSutherlandClipping_ESTest.java###test01+++createIntersection###1, CohenSutherlandClipping_ESTest.java###test01+++setClip###1, CohenSutherlandClipping_ESTest.java###test01+++setPositionAndRegion###2, CohenSutherlandClipping_ESTest.java###test02+++clip###1, CohenSutherlandClipping_ESTest.java###test02+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test03+++createIntersection###1, CohenSutherlandClipping_ESTest.java###test04+++verifyException###2, CohenSutherlandClipping_ESTest.java###test04+++setClip###1, CohenSutherlandClipping_ESTest.java###test04+++fail###1, CohenSutherlandClipping_ESTest.java###test05+++verifyException###2, CohenSutherlandClipping_ESTest.java###test05+++clip###1, CohenSutherlandClipping_ESTest.java###test05+++fail###1, CohenSutherlandClipping_ESTest.java###test06+++verifyException###2, CohenSutherlandClipping_ESTest.java###test06+++fail###1, CohenSutherlandClipping_ESTest.java###test07+++clip###1, CohenSutherlandClipping_ESTest.java###test07+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test08+++clip###1, CohenSutherlandClipping_ESTest.java###test08+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test08+++assertTrue###1, CohenSutherlandClipping_ESTest.java###test09+++clip###1, CohenSutherlandClipping_ESTest.java###test09+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test10+++clip###1, CohenSutherlandClipping_ESTest.java###test10+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test10+++assertTrue###1, CohenSutherlandClipping_ESTest.java###test11+++clip###1, CohenSutherlandClipping_ESTest.java###test11+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test11+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:46:24 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class CohenSutherlandClipping_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.CohenSutherlandClipping\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CohenSutherlandClipping_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.CohenSutherlandClipping\",\n      \"technology.tabula.CohenSutherlandClipping$Point\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CohenSutherlandClipping_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.CohenSutherlandClipping\",\n      \"technology.tabula.CohenSutherlandClipping$Point\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.geom.Rectangle2D;\nimport technology.tabula.CohenSutherlandClipping;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/CohenSutherlandClipping_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point1 = cohenSutherlandClipping0.new Point(85.583519889645, (-1224.317));\n    boolean boolean0 = cohenSutherlandClipping_Point1.isInTheSameRegionAs(cohenSutherlandClipping_Point0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1307.7F, 1307.7F, 1307.7F, 1.0F);\n    java.awt.Rectangle rectangle0 = rectangle2D_Float0.getBounds();\n    Rectangle2D rectangle2D0 = rectangle0.createIntersection(rectangle2D_Float0);\n    cohenSutherlandClipping0.setClip(rectangle2D0);\n    cohenSutherlandClipping_Point0.setPositionAndRegion(1307.7F, 1307.7F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.01F, (-867.8885F), 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (-1528.726938792), 0.0, 0.0);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle((-191), 270);\n    Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle0);\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping(rectangle2D0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    // Undeclared exception!\n    try {\n        cohenSutherlandClipping0.setClip((Rectangle2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    // Undeclared exception!\n    try {\n        cohenSutherlandClipping0.clip((Line2D.Float) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = null;\n    try {\n        cohenSutherlandClipping0 = new CohenSutherlandClipping((Rectangle2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(290.05316F, (-574.2401F), (-574.2401F), 290.05316F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.0F, 0.0F, (-1.0F));\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.y2, 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float((-1.0F), 1763.0F, 1763.0F, (-1.0F));\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 1442.09F, 0.0F, 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.y1, 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(553.22186F, 0.0F, (-1.0F), 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.x2, 0.01F);\n    assertTrue(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1307.7F, 1307.7F, 1307.7F, 1.0F);\n    java.awt.Rectangle rectangle0 = rectangle2D_Float0.getBounds();\n    Rectangle2D rectangle2D0 = rectangle0.createIntersection(rectangle2D_Float0);\n    cohenSutherlandClipping0.setClip(rectangle2D0);\n    cohenSutherlandClipping_Point0.setPositionAndRegion(1307.7F, 1307.7F);\n}",
            "TestRelevantFocal": "[setClip###1, setPositionAndRegion###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:46:24 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.CohenSutherlandClipping;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class CohenSutherlandClipping_ESTest extends CohenSutherlandClipping_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public boolean clip(Line2D.Float line) {\n    Point point1 = new Point(line.getX1(), line.getY1());\n    Point point2 = new Point(line.getX2(), line.getY2());\n    Point outsidePoint = new Point(0d, 0d);\n    boolean lineIsVertical = (point1.x == point2.x);\n    double lineSlope = lineIsVertical ? 0d : (point2.y - point1.y) / (point2.x - point1.x);\n    while (point1.region != INSIDE || point2.region != INSIDE) {\n        if ((point1.region & point2.region) != 0)\n            return false;\n        outsidePoint.region = (point1.region == INSIDE) ? point2.region : point1.region;\n        if ((outsidePoint.region & LEFT) != 0) {\n            outsidePoint.x = xMin;\n            outsidePoint.y = delta(outsidePoint.x, point1.x) * lineSlope + point1.y;\n        } else if ((outsidePoint.region & RIGHT) != 0) {\n            outsidePoint.x = xMax;\n            outsidePoint.y = delta(outsidePoint.x, point1.x) * lineSlope + point1.y;\n        } else if ((outsidePoint.region & BOTTOM) != 0) {\n            outsidePoint.y = yMin;\n            outsidePoint.x = lineIsVertical ? point1.x : delta(outsidePoint.y, point1.y) / lineSlope + point1.x;\n        } else if ((outsidePoint.region & TOP) != 0) {\n            outsidePoint.y = yMax;\n            outsidePoint.x = lineIsVertical ? point1.x : delta(outsidePoint.y, point1.y) / lineSlope + point1.x;\n        }\n        if (outsidePoint.isInTheSameRegionAs(point1)) {\n            point1.setPositionAndRegion(outsidePoint.x, outsidePoint.y);\n        } else {\n            point2.setPositionAndRegion(outsidePoint.x, outsidePoint.y);\n        }\n    }\n    line.setLine(point1.x, point1.y, point2.x, point2.y);\n    return true;\n}",
            "all_field_declaration": "private double xMin;\nprivate double yMin;\nprivate double xMax;\nprivate double yMax;\nprivate static final int INSIDE = 0;\nprivate static final int LEFT = 1;\nprivate static final int RIGHT = 2;\nprivate static final int BOTTOM = 4;\nprivate static final int TOP = 8;\nprivate final static float MINIMUM_DELTA = 0.01f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "8",
            "Filed": "private double xMin;private double yMin;private double xMax;private double yMax;private static final int INSIDE = 0;private static final int LEFT = 1;private static final int RIGHT = 2;private static final int BOTTOM = 4;private static final int TOP = 8;",
            "Parameter_type": "Line2D.Float",
            "Import_statements": "import java.awt.geom.Line2D;\n",
            "public_method_signature": "public CohenSutherlandClipping();\npublic CohenSutherlandClipping(Rectangle2D clipWindow);\npublic void setClip(Rectangle2D clipWindow);\npublic boolean clip(Line2D.Float line);",
            "public_field": "",
            "Method_statement": "clip(Line2D.Float line)",
            "Method_name": "clip",
            "Class_declaration": "public  final class CohenSutherlandClipping {\n",
            "constructors": "public CohenSutherlandClipping() {\n}public CohenSutherlandClipping(Rectangle2D clipWindow) {\n    setClip(clipWindow);\n}",
            "all_method_signature": "public CohenSutherlandClipping();\npublic CohenSutherlandClipping(Rectangle2D clipWindow);\npublic void setClip(Rectangle2D clipWindow);\npublic boolean clip(Line2D.Float line);\nprivate static double delta(double value1, double value2);",
            "Class_name": "CohenSutherlandClipping",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/CohenSutherlandClipping.java###clip",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Rectangle2D;\n\nimport java.awt.geom.Line2D;\n",
            "comment": "\n     * Clips a given line against the clip window.\n     * The modification (if needed) is done in place.\n     * @param line the line to clip.\n     * @return true if line is clipped, false if line is\n     * totally outside the clip window.\n     ",
            "packageName": "technology.tabula",
            "method_signature": "public boolean clip(Line2D.Float line);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[CohenSutherlandClipping_ESTest.java###test00+++isInTheSameRegionAs###1, CohenSutherlandClipping_ESTest.java###test00+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test01+++getBounds###0, CohenSutherlandClipping_ESTest.java###test01+++createIntersection###1, CohenSutherlandClipping_ESTest.java###test01+++setClip###1, CohenSutherlandClipping_ESTest.java###test01+++setPositionAndRegion###2, CohenSutherlandClipping_ESTest.java###test02+++clip###1, CohenSutherlandClipping_ESTest.java###test02+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test03+++createIntersection###1, CohenSutherlandClipping_ESTest.java###test04+++verifyException###2, CohenSutherlandClipping_ESTest.java###test04+++setClip###1, CohenSutherlandClipping_ESTest.java###test04+++fail###1, CohenSutherlandClipping_ESTest.java###test05+++verifyException###2, CohenSutherlandClipping_ESTest.java###test05+++clip###1, CohenSutherlandClipping_ESTest.java###test05+++fail###1, CohenSutherlandClipping_ESTest.java###test06+++verifyException###2, CohenSutherlandClipping_ESTest.java###test06+++fail###1, CohenSutherlandClipping_ESTest.java###test07+++clip###1, CohenSutherlandClipping_ESTest.java###test07+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test08+++clip###1, CohenSutherlandClipping_ESTest.java###test08+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test08+++assertTrue###1, CohenSutherlandClipping_ESTest.java###test09+++clip###1, CohenSutherlandClipping_ESTest.java###test09+++assertFalse###1, CohenSutherlandClipping_ESTest.java###test10+++clip###1, CohenSutherlandClipping_ESTest.java###test10+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test10+++assertTrue###1, CohenSutherlandClipping_ESTest.java###test11+++clip###1, CohenSutherlandClipping_ESTest.java###test11+++assertEquals###3, CohenSutherlandClipping_ESTest.java###test11+++assertTrue###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:46:24 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class CohenSutherlandClipping_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.CohenSutherlandClipping\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CohenSutherlandClipping_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.CohenSutherlandClipping\",\n      \"technology.tabula.CohenSutherlandClipping$Point\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CohenSutherlandClipping_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.CohenSutherlandClipping\",\n      \"technology.tabula.CohenSutherlandClipping$Point\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.geom.Line2D;\nimport technology.tabula.CohenSutherlandClipping;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/CohenSutherlandClipping_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point1 = cohenSutherlandClipping0.new Point(85.583519889645, (-1224.317));\n    boolean boolean0 = cohenSutherlandClipping_Point1.isInTheSameRegionAs(cohenSutherlandClipping_Point0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);\n    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1307.7F, 1307.7F, 1307.7F, 1.0F);\n    java.awt.Rectangle rectangle0 = rectangle2D_Float0.getBounds();\n    Rectangle2D rectangle2D0 = rectangle0.createIntersection(rectangle2D_Float0);\n    cohenSutherlandClipping0.setClip(rectangle2D0);\n    cohenSutherlandClipping_Point0.setPositionAndRegion(1307.7F, 1307.7F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.01F, (-867.8885F), 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (-1528.726938792), 0.0, 0.0);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle((-191), 270);\n    Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle0);\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping(rectangle2D0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    // Undeclared exception!\n    try {\n        cohenSutherlandClipping0.setClip((Rectangle2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    // Undeclared exception!\n    try {\n        cohenSutherlandClipping0.clip((Line2D.Float) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = null;\n    try {\n        cohenSutherlandClipping0 = new CohenSutherlandClipping((Rectangle2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(290.05316F, (-574.2401F), (-574.2401F), 290.05316F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.0F, 0.0F, (-1.0F));\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.y2, 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float((-1.0F), 1763.0F, 1763.0F, (-1.0F));\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 1442.09F, 0.0F, 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.y1, 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    Line2D.Float line2D_Float0 = new Line2D.Float(553.22186F, 0.0F, (-1.0F), 0.0F);\n    boolean boolean0 = cohenSutherlandClipping0.clip(line2D_Float0);\n    assertEquals(0.0F, line2D_Float0.x2, 0.01F);\n    assertTrue(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();\n    // Undeclared exception!\n    try {\n        cohenSutherlandClipping0.clip((Line2D.Float) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.CohenSutherlandClipping\", e);\n    }\n}",
            "TestRelevantFocal": "[clip###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:46:24 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.CohenSutherlandClipping;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class CohenSutherlandClipping_ESTest extends CohenSutherlandClipping_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public boolean isSpanning() {\n    return spanning;\n}",
            "all_field_declaration": "private boolean spanning;\nprivate boolean placeholder;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private boolean spanning;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "public_field": "",
            "Method_statement": "isSpanning()",
            "Method_name": "isSpanning",
            "Class_declaration": "public class Cell {\n",
            "constructors": "public Cell(float top, float left, float width, float height) {\n    super(top, left, width, height);\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}public Cell(Point2D topLeft, Point2D bottomRight) {\n    super((float) topLeft.getY(), (float) topLeft.getX(), (float) (bottomRight.getX() - topLeft.getX()), (float) (bottomRight.getY() - topLeft.getY()));\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}",
            "all_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "Class_name": "Cell",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Cell.java###isSpanning",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.util.Collections;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public boolean isSpanning();",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[Cell_ESTest.java###test00+++assertFalse###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++setSpanning###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++assertTrue###1, Cell_ESTest.java###test01+++verifyException###2, Cell_ESTest.java###test01+++getText###1, Cell_ESTest.java###test01+++fail###1, Cell_ESTest.java###test02+++setTextElements###1, Cell_ESTest.java###test02+++verifyException###2, Cell_ESTest.java###test02+++getText###0, Cell_ESTest.java###test02+++fail###1, Cell_ESTest.java###test03+++verifyException###2, Cell_ESTest.java###test03+++fail###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++setTextElements###1, Cell_ESTest.java###test04+++getText###1, Cell_ESTest.java###test04+++assertEquals###2, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isPlaceholder###0, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isSpanning###0, Cell_ESTest.java###test05+++getText###1, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isPlaceholder###0, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isSpanning###0, Cell_ESTest.java###test06+++assertFalse###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++setPlaceholder###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++assertTrue###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++setTextElements###1, Cell_ESTest.java###test07+++getText###0, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isSpanning###0, Cell_ESTest.java###test07+++assertEquals###2, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isPlaceholder###0, Cell_ESTest.java###test08+++add###1, Cell_ESTest.java###test08+++setTextElements###1, Cell_ESTest.java###test08+++getText###1, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isSpanning###0, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isPlaceholder###0, Cell_ESTest.java###test09+++isSpanning###0, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++isPlaceholder###0, Cell_ESTest.java###test10+++isPlaceholder###0, Cell_ESTest.java###test10+++assertFalse###1, Cell_ESTest.java###test10+++isSpanning###0, Cell_ESTest.java###test10+++assertFalse###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:42:58 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Cell_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Cell\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Cell_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Cell_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Cell;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Cell_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Cell cell0 = new Cell((-1540.676F), (-1540.676F), 801.6F, 801.6F);\n    assertFalse(cell0.isSpanning());\n    cell0.setSpanning(true);\n    boolean boolean0 = cell0.isSpanning();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.textElements = null;\n    // Undeclared exception!\n    try {\n        cell0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.setTextElements((List<TextChunk>) null);\n    // Undeclared exception!\n    try {\n        cell0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = null;\n    try {\n        cell0 = new Cell((Point2D) null, point0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText(true);\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    cell0.getText(false);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    assertFalse(cell0.isPlaceholder());\n    cell0.setPlaceholder(true);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText();\n    assertFalse(cell0.isSpanning());\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    cell0.setTextElements(linkedList0);\n    cell0.getText(false);\n    assertFalse(cell0.isSpanning());\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    boolean boolean0 = cell0.isSpanning();\n    assertFalse(boolean0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertFalse(cell0.isSpanning());\n    assertFalse(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Cell cell0 = new Cell((-1540.676F), (-1540.676F), 801.6F, 801.6F);\n    assertFalse(cell0.isSpanning());\n    cell0.setSpanning(true);\n    boolean boolean0 = cell0.isSpanning();\n    assertTrue(boolean0);\n}",
            "TestRelevantFocal": "[isSpanning###0, setSpanning###1, isSpanning###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:42:58 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Cell_ESTest extends Cell_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setSpanning(boolean spanning) {\n    this.spanning = spanning;\n}",
            "all_field_declaration": "private boolean spanning;\nprivate boolean placeholder;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private boolean spanning;",
            "Parameter_type": "boolean",
            "Import_statements": "",
            "public_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "public_field": "",
            "Method_statement": "setSpanning(boolean spanning)",
            "Method_name": "setSpanning",
            "Class_declaration": "public class Cell {\n",
            "constructors": "public Cell(float top, float left, float width, float height) {\n    super(top, left, width, height);\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}public Cell(Point2D topLeft, Point2D bottomRight) {\n    super((float) topLeft.getY(), (float) topLeft.getX(), (float) (bottomRight.getX() - topLeft.getX()), (float) (bottomRight.getY() - topLeft.getY()));\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}",
            "all_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "Class_name": "Cell",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Cell.java###setSpanning",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.util.Collections;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void setSpanning(boolean spanning);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Cell_ESTest.java###test00+++assertFalse###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++setSpanning###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++assertTrue###1, Cell_ESTest.java###test01+++verifyException###2, Cell_ESTest.java###test01+++getText###1, Cell_ESTest.java###test01+++fail###1, Cell_ESTest.java###test02+++setTextElements###1, Cell_ESTest.java###test02+++verifyException###2, Cell_ESTest.java###test02+++getText###0, Cell_ESTest.java###test02+++fail###1, Cell_ESTest.java###test03+++verifyException###2, Cell_ESTest.java###test03+++fail###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++setTextElements###1, Cell_ESTest.java###test04+++getText###1, Cell_ESTest.java###test04+++assertEquals###2, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isPlaceholder###0, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isSpanning###0, Cell_ESTest.java###test05+++getText###1, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isPlaceholder###0, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isSpanning###0, Cell_ESTest.java###test06+++assertFalse###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++setPlaceholder###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++assertTrue###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++setTextElements###1, Cell_ESTest.java###test07+++getText###0, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isSpanning###0, Cell_ESTest.java###test07+++assertEquals###2, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isPlaceholder###0, Cell_ESTest.java###test08+++add###1, Cell_ESTest.java###test08+++setTextElements###1, Cell_ESTest.java###test08+++getText###1, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isSpanning###0, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isPlaceholder###0, Cell_ESTest.java###test09+++isSpanning###0, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++isPlaceholder###0, Cell_ESTest.java###test10+++isPlaceholder###0, Cell_ESTest.java###test10+++assertFalse###1, Cell_ESTest.java###test10+++isSpanning###0, Cell_ESTest.java###test10+++assertFalse###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:42:58 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Cell_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Cell\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Cell_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Cell_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Cell;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Cell_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Cell cell0 = new Cell((-1540.676F), (-1540.676F), 801.6F, 801.6F);\n    assertFalse(cell0.isSpanning());\n    cell0.setSpanning(true);\n    boolean boolean0 = cell0.isSpanning();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.textElements = null;\n    // Undeclared exception!\n    try {\n        cell0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.setTextElements((List<TextChunk>) null);\n    // Undeclared exception!\n    try {\n        cell0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = null;\n    try {\n        cell0 = new Cell((Point2D) null, point0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText(true);\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    cell0.getText(false);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    assertFalse(cell0.isPlaceholder());\n    cell0.setPlaceholder(true);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText();\n    assertFalse(cell0.isSpanning());\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    cell0.setTextElements(linkedList0);\n    cell0.getText(false);\n    assertFalse(cell0.isSpanning());\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    boolean boolean0 = cell0.isSpanning();\n    assertFalse(boolean0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertFalse(cell0.isSpanning());\n    assertFalse(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Cell cell0 = new Cell((-1540.676F), (-1540.676F), 801.6F, 801.6F);\n    assertFalse(cell0.isSpanning());\n    cell0.setSpanning(true);\n    boolean boolean0 = cell0.isSpanning();\n    assertTrue(boolean0);\n}",
            "TestRelevantFocal": "[isSpanning###0, setSpanning###1, isSpanning###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:42:58 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Cell_ESTest extends Cell_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String getText(boolean useLineReturns) {\n    if (this.textElements.size() == 0) {\n        return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    this.textElements.sort(Rectangle.ILL_DEFINED_ORDER);\n    double curTop = this.textElements.get(0).getTop();\n    for (TextChunk tc : this.textElements) {\n        if (useLineReturns && tc.getTop() > curTop) {\n            sb.append('\\r');\n        }\n        sb.append(tc.getText());\n        curTop = tc.getTop();\n    }\n    return sb.toString().trim();\n}",
            "all_field_declaration": "private boolean spanning;\nprivate boolean placeholder;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "6",
            "Filed": "",
            "Parameter_type": "boolean",
            "Import_statements": "",
            "public_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "public_field": "",
            "Method_statement": "getText(boolean useLineReturns)",
            "Method_name": "getText",
            "Class_declaration": "public class Cell {\n",
            "constructors": "public Cell(float top, float left, float width, float height) {\n    super(top, left, width, height);\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}public Cell(Point2D topLeft, Point2D bottomRight) {\n    super((float) topLeft.getY(), (float) topLeft.getX(), (float) (bottomRight.getX() - topLeft.getX()), (float) (bottomRight.getY() - topLeft.getY()));\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}",
            "all_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "Class_name": "Cell",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Cell.java###getText",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.util.Collections;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public String getText(boolean useLineReturns);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Cell_ESTest.java###test00+++assertFalse###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++setSpanning###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++assertTrue###1, Cell_ESTest.java###test01+++verifyException###2, Cell_ESTest.java###test01+++getText###1, Cell_ESTest.java###test01+++fail###1, Cell_ESTest.java###test02+++setTextElements###1, Cell_ESTest.java###test02+++verifyException###2, Cell_ESTest.java###test02+++getText###0, Cell_ESTest.java###test02+++fail###1, Cell_ESTest.java###test03+++verifyException###2, Cell_ESTest.java###test03+++fail###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++setTextElements###1, Cell_ESTest.java###test04+++getText###1, Cell_ESTest.java###test04+++assertEquals###2, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isPlaceholder###0, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isSpanning###0, Cell_ESTest.java###test05+++getText###1, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isPlaceholder###0, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isSpanning###0, Cell_ESTest.java###test06+++assertFalse###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++setPlaceholder###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++assertTrue###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++setTextElements###1, Cell_ESTest.java###test07+++getText###0, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isSpanning###0, Cell_ESTest.java###test07+++assertEquals###2, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isPlaceholder###0, Cell_ESTest.java###test08+++add###1, Cell_ESTest.java###test08+++setTextElements###1, Cell_ESTest.java###test08+++getText###1, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isSpanning###0, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isPlaceholder###0, Cell_ESTest.java###test09+++isSpanning###0, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++isPlaceholder###0, Cell_ESTest.java###test10+++isPlaceholder###0, Cell_ESTest.java###test10+++assertFalse###1, Cell_ESTest.java###test10+++isSpanning###0, Cell_ESTest.java###test10+++assertFalse###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:42:58 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Cell_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Cell\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Cell_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Cell_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Cell;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Cell_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Cell cell0 = new Cell((-1540.676F), (-1540.676F), 801.6F, 801.6F);\n    assertFalse(cell0.isSpanning());\n    cell0.setSpanning(true);\n    boolean boolean0 = cell0.isSpanning();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.textElements = null;\n    // Undeclared exception!\n    try {\n        cell0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.setTextElements((List<TextChunk>) null);\n    // Undeclared exception!\n    try {\n        cell0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = null;\n    try {\n        cell0 = new Cell((Point2D) null, point0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText(true);\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    cell0.getText(false);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    assertFalse(cell0.isPlaceholder());\n    cell0.setPlaceholder(true);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText();\n    assertFalse(cell0.isSpanning());\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    cell0.setTextElements(linkedList0);\n    cell0.getText(false);\n    assertFalse(cell0.isSpanning());\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    boolean boolean0 = cell0.isSpanning();\n    assertFalse(boolean0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertFalse(cell0.isSpanning());\n    assertFalse(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    cell0.getText(false);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}",
            "TestRelevantFocal": "[getText###1, isPlaceholder###0, isSpanning###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:42:58 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Cell_ESTest extends Cell_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String getText() {\n    return getText(true);\n}",
            "all_field_declaration": "private boolean spanning;\nprivate boolean placeholder;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "public_field": "",
            "Method_statement": "getText()",
            "Method_name": "getText",
            "Class_declaration": "public class Cell {\n",
            "constructors": "public Cell(float top, float left, float width, float height) {\n    super(top, left, width, height);\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}public Cell(Point2D topLeft, Point2D bottomRight) {\n    super((float) topLeft.getY(), (float) topLeft.getX(), (float) (bottomRight.getX() - topLeft.getX()), (float) (bottomRight.getY() - topLeft.getY()));\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}",
            "all_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "Class_name": "Cell",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Cell.java###getText",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.util.Collections;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public String getText();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Cell_ESTest.java###test00+++assertFalse###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++setSpanning###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++assertTrue###1, Cell_ESTest.java###test01+++verifyException###2, Cell_ESTest.java###test01+++getText###1, Cell_ESTest.java###test01+++fail###1, Cell_ESTest.java###test02+++setTextElements###1, Cell_ESTest.java###test02+++verifyException###2, Cell_ESTest.java###test02+++getText###0, Cell_ESTest.java###test02+++fail###1, Cell_ESTest.java###test03+++verifyException###2, Cell_ESTest.java###test03+++fail###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++setTextElements###1, Cell_ESTest.java###test04+++getText###1, Cell_ESTest.java###test04+++assertEquals###2, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isPlaceholder###0, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isSpanning###0, Cell_ESTest.java###test05+++getText###1, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isPlaceholder###0, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isSpanning###0, Cell_ESTest.java###test06+++assertFalse###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++setPlaceholder###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++assertTrue###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++setTextElements###1, Cell_ESTest.java###test07+++getText###0, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isSpanning###0, Cell_ESTest.java###test07+++assertEquals###2, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isPlaceholder###0, Cell_ESTest.java###test08+++add###1, Cell_ESTest.java###test08+++setTextElements###1, Cell_ESTest.java###test08+++getText###1, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isSpanning###0, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isPlaceholder###0, Cell_ESTest.java###test09+++isSpanning###0, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++isPlaceholder###0, Cell_ESTest.java###test10+++isPlaceholder###0, Cell_ESTest.java###test10+++assertFalse###1, Cell_ESTest.java###test10+++isSpanning###0, Cell_ESTest.java###test10+++assertFalse###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:42:58 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Cell_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Cell\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Cell_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Cell_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.Point;\nimport java.util.List;\nimport technology.tabula.Cell;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Cell_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Cell cell0 = new Cell((-1540.676F), (-1540.676F), 801.6F, 801.6F);\n    assertFalse(cell0.isSpanning());\n    cell0.setSpanning(true);\n    boolean boolean0 = cell0.isSpanning();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.textElements = null;\n    // Undeclared exception!\n    try {\n        cell0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.setTextElements((List<TextChunk>) null);\n    // Undeclared exception!\n    try {\n        cell0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = null;\n    try {\n        cell0 = new Cell((Point2D) null, point0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText(true);\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    cell0.getText(false);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    assertFalse(cell0.isPlaceholder());\n    cell0.setPlaceholder(true);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText();\n    assertFalse(cell0.isSpanning());\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    cell0.setTextElements(linkedList0);\n    cell0.getText(false);\n    assertFalse(cell0.isSpanning());\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    boolean boolean0 = cell0.isSpanning();\n    assertFalse(boolean0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertFalse(cell0.isSpanning());\n    assertFalse(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.setTextElements((List<TextChunk>) null);\n    // Undeclared exception!\n    try {\n        cell0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}",
            "TestRelevantFocal": "[getText###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:42:58 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Cell_ESTest extends Cell_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public boolean isPlaceholder() {\n    return placeholder;\n}",
            "all_field_declaration": "private boolean spanning;\nprivate boolean placeholder;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private boolean placeholder;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "public_field": "",
            "Method_statement": "isPlaceholder()",
            "Method_name": "isPlaceholder",
            "Class_declaration": "public class Cell {\n",
            "constructors": "public Cell(float top, float left, float width, float height) {\n    super(top, left, width, height);\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}public Cell(Point2D topLeft, Point2D bottomRight) {\n    super((float) topLeft.getY(), (float) topLeft.getX(), (float) (bottomRight.getX() - topLeft.getX()), (float) (bottomRight.getY() - topLeft.getY()));\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}",
            "all_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "Class_name": "Cell",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Cell.java###isPlaceholder",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.util.Collections;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public boolean isPlaceholder();",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[Cell_ESTest.java###test00+++assertFalse###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++setSpanning###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++assertTrue###1, Cell_ESTest.java###test01+++verifyException###2, Cell_ESTest.java###test01+++getText###1, Cell_ESTest.java###test01+++fail###1, Cell_ESTest.java###test02+++setTextElements###1, Cell_ESTest.java###test02+++verifyException###2, Cell_ESTest.java###test02+++getText###0, Cell_ESTest.java###test02+++fail###1, Cell_ESTest.java###test03+++verifyException###2, Cell_ESTest.java###test03+++fail###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++setTextElements###1, Cell_ESTest.java###test04+++getText###1, Cell_ESTest.java###test04+++assertEquals###2, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isPlaceholder###0, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isSpanning###0, Cell_ESTest.java###test05+++getText###1, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isPlaceholder###0, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isSpanning###0, Cell_ESTest.java###test06+++assertFalse###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++setPlaceholder###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++assertTrue###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++setTextElements###1, Cell_ESTest.java###test07+++getText###0, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isSpanning###0, Cell_ESTest.java###test07+++assertEquals###2, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isPlaceholder###0, Cell_ESTest.java###test08+++add###1, Cell_ESTest.java###test08+++setTextElements###1, Cell_ESTest.java###test08+++getText###1, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isSpanning###0, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isPlaceholder###0, Cell_ESTest.java###test09+++isSpanning###0, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++isPlaceholder###0, Cell_ESTest.java###test10+++isPlaceholder###0, Cell_ESTest.java###test10+++assertFalse###1, Cell_ESTest.java###test10+++isSpanning###0, Cell_ESTest.java###test10+++assertFalse###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:42:58 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Cell_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Cell\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Cell_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Cell_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Cell;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Cell_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Cell cell0 = new Cell((-1540.676F), (-1540.676F), 801.6F, 801.6F);\n    assertFalse(cell0.isSpanning());\n    cell0.setSpanning(true);\n    boolean boolean0 = cell0.isSpanning();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.textElements = null;\n    // Undeclared exception!\n    try {\n        cell0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.setTextElements((List<TextChunk>) null);\n    // Undeclared exception!\n    try {\n        cell0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = null;\n    try {\n        cell0 = new Cell((Point2D) null, point0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText(true);\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    cell0.getText(false);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    assertFalse(cell0.isPlaceholder());\n    cell0.setPlaceholder(true);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText();\n    assertFalse(cell0.isSpanning());\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    cell0.setTextElements(linkedList0);\n    cell0.getText(false);\n    assertFalse(cell0.isSpanning());\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    boolean boolean0 = cell0.isSpanning();\n    assertFalse(boolean0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertFalse(cell0.isSpanning());\n    assertFalse(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    cell0.getText(false);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}",
            "TestRelevantFocal": "[getText###1, isPlaceholder###0, isSpanning###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:42:58 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Cell_ESTest extends Cell_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setPlaceholder(boolean placeholder) {\n    this.placeholder = placeholder;\n}",
            "all_field_declaration": "private boolean spanning;\nprivate boolean placeholder;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private boolean placeholder;",
            "Parameter_type": "boolean",
            "Import_statements": "",
            "public_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "public_field": "",
            "Method_statement": "setPlaceholder(boolean placeholder)",
            "Method_name": "setPlaceholder",
            "Class_declaration": "public class Cell {\n",
            "constructors": "public Cell(float top, float left, float width, float height) {\n    super(top, left, width, height);\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}public Cell(Point2D topLeft, Point2D bottomRight) {\n    super((float) topLeft.getY(), (float) topLeft.getX(), (float) (bottomRight.getX() - topLeft.getX()), (float) (bottomRight.getY() - topLeft.getY()));\n    this.setPlaceholder(false);\n    this.setSpanning(false);\n}",
            "all_method_signature": "public Cell(float top, float left, float width, float height);\npublic Cell(Point2D topLeft, Point2D bottomRight);\npublic String getText(boolean useLineReturns);\npublic String getText();\npublic boolean isSpanning();\npublic void setSpanning(boolean spanning);\npublic boolean isPlaceholder();\npublic void setPlaceholder(boolean placeholder);",
            "Class_name": "Cell",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Cell.java###setPlaceholder",
            "Parameter_num": "1",
            "contextMethod": "@Override\npublic String getText(boolean useLineReturns) {\n    if (this.textElements.size() == 0) {\n        return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    this.textElements.sort(Rectangle.ILL_DEFINED_ORDER);\n    double curTop = this.textElements.get(0).getTop();\n    for (TextChunk tc : this.textElements) {\n        if (useLineReturns && tc.getTop() > curTop) {\n            sb.append('\\r');\n        }\n        sb.append(tc.getText());\n        curTop = tc.getTop();\n    }\n    return sb.toString().trim();\n}\npublic void setSpanning(boolean spanning) {\n    this.spanning = spanning;\n}",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.util.Collections;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void setPlaceholder(boolean placeholder);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Cell_ESTest.java###test00+++assertFalse###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++setSpanning###1, Cell_ESTest.java###test00+++isSpanning###0, Cell_ESTest.java###test00+++assertTrue###1, Cell_ESTest.java###test01+++verifyException###2, Cell_ESTest.java###test01+++getText###1, Cell_ESTest.java###test01+++fail###1, Cell_ESTest.java###test02+++setTextElements###1, Cell_ESTest.java###test02+++verifyException###2, Cell_ESTest.java###test02+++getText###0, Cell_ESTest.java###test02+++fail###1, Cell_ESTest.java###test03+++verifyException###2, Cell_ESTest.java###test03+++fail###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++add###1, Cell_ESTest.java###test04+++setTextElements###1, Cell_ESTest.java###test04+++getText###1, Cell_ESTest.java###test04+++assertEquals###2, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isPlaceholder###0, Cell_ESTest.java###test04+++assertFalse###1, Cell_ESTest.java###test04+++isSpanning###0, Cell_ESTest.java###test05+++getText###1, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isPlaceholder###0, Cell_ESTest.java###test05+++assertFalse###1, Cell_ESTest.java###test05+++isSpanning###0, Cell_ESTest.java###test06+++assertFalse###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++setPlaceholder###1, Cell_ESTest.java###test06+++isPlaceholder###0, Cell_ESTest.java###test06+++assertTrue###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++add###1, Cell_ESTest.java###test07+++setTextElements###1, Cell_ESTest.java###test07+++getText###0, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isSpanning###0, Cell_ESTest.java###test07+++assertEquals###2, Cell_ESTest.java###test07+++assertFalse###1, Cell_ESTest.java###test07+++isPlaceholder###0, Cell_ESTest.java###test08+++add###1, Cell_ESTest.java###test08+++setTextElements###1, Cell_ESTest.java###test08+++getText###1, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isSpanning###0, Cell_ESTest.java###test08+++assertFalse###1, Cell_ESTest.java###test08+++isPlaceholder###0, Cell_ESTest.java###test09+++isSpanning###0, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++assertFalse###1, Cell_ESTest.java###test09+++isPlaceholder###0, Cell_ESTest.java###test10+++isPlaceholder###0, Cell_ESTest.java###test10+++assertFalse###1, Cell_ESTest.java###test10+++isSpanning###0, Cell_ESTest.java###test10+++assertFalse###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:42:58 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Cell_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Cell\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Cell_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Cell_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Cell;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Cell_ESTest.java###test06",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Cell cell0 = new Cell((-1540.676F), (-1540.676F), 801.6F, 801.6F);\n    assertFalse(cell0.isSpanning());\n    cell0.setSpanning(true);\n    boolean boolean0 = cell0.isSpanning();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.textElements = null;\n    // Undeclared exception!\n    try {\n        cell0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = new Cell(point0, point0);\n    cell0.setTextElements((List<TextChunk>) null);\n    // Undeclared exception!\n    try {\n        cell0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Point point0 = new Point();\n    Cell cell0 = null;\n    try {\n        cell0 = new Cell((Point2D) null, point0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Cell\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText(true);\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    cell0.getText(false);\n    assertFalse(cell0.isPlaceholder());\n    assertFalse(cell0.isSpanning());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    assertFalse(cell0.isPlaceholder());\n    cell0.setPlaceholder(true);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    linkedList0.add(textChunk1);\n    cell0.setTextElements(linkedList0);\n    String string0 = cell0.getText();\n    assertFalse(cell0.isSpanning());\n    assertEquals(\"\", string0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));\n    linkedList0.add(textChunk0);\n    cell0.setTextElements(linkedList0);\n    cell0.getText(false);\n    assertFalse(cell0.isSpanning());\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Cell cell0 = new Cell((-1021.3793F), (-1015.9F), (-1.0F), (-1021.3793F));\n    boolean boolean0 = cell0.isSpanning();\n    assertFalse(boolean0);\n    assertFalse(cell0.isPlaceholder());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertFalse(cell0.isSpanning());\n    assertFalse(boolean0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);\n    assertFalse(cell0.isPlaceholder());\n    cell0.setPlaceholder(true);\n    boolean boolean0 = cell0.isPlaceholder();\n    assertTrue(boolean0);\n}",
            "TestRelevantFocal": "[isPlaceholder###0, setPlaceholder###1, isPlaceholder###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:42:58 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Cell_ESTest extends Cell_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void add(List<TextElement> elements) {\n    for (TextElement te : elements) {\n        this.add(te);\n    }\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "List<TextElement>",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "add(List<TextElement> elements)",
            "Method_name": "add",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###add",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void add(List<TextElement> elements);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test07",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}",
            "TestRelevantFocal": "[merge###1, merge###1, add###1, add###1, merge###1, isSameChar###1, isSameChar###1, isSameChar###1, isSameChar###1, isLtrDominant###0, groupByDirectionality###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static List<Line> groupByLines(List<TextChunk> textChunks) {\n    List<Line> lines = new ArrayList<>();\n    if (textChunks.size() == 0) {\n        return lines;\n    }\n    float bbwidth = Rectangle.boundingBoxOf(textChunks).width;\n    Line l = new Line();\n    l.addTextChunk(textChunks.get(0));\n    textChunks.remove(0);\n    lines.add(l);\n    Line last = lines.get(lines.size() - 1);\n    for (TextChunk te : textChunks) {\n        if (last.verticalOverlapRatio(te) < 0.1) {\n            if (last.width / bbwidth > 0.9 && TextChunk.allSameChar(last.getTextElements())) {\n                lines.remove(lines.size() - 1);\n            }\n            lines.add(new Line());\n            last = lines.get(lines.size() - 1);\n        }\n        last.addTextChunk(te);\n    }\n    if (last.width / bbwidth > 0.9 && TextChunk.allSameChar(last.getTextElements())) {\n        lines.remove(lines.size() - 1);\n    }\n    List<Line> rv = new ArrayList<>(lines.size());\n    for (Line line : lines) {\n        rv.add(Line.removeRepeatedCharacters(line, ' ', 3));\n    }\n    return rv;\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "13",
            "Filed": "",
            "Parameter_type": "List<TextChunk>",
            "Import_statements": "import java.util.ArrayList;\nimport java.util.List;\n",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "groupByLines(List<TextChunk> textChunks)",
            "Method_name": "groupByLines",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###groupByLines",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Junit_version": "4",
            "returnType": "List<Line>"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.List;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test12",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}",
            "TestRelevantFocal": "[groupByLines###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic int hashCode() {\n    final int prime = 31;\n    int result = super.hashCode();\n    result = prime * result + ((textElements == null) ? 0 : textElements.hashCode());\n    return result;\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "hashCode()",
            "Method_name": "hashCode",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###hashCode",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public int hashCode();",
            "Junit_version": "4",
            "returnType": "int"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}",
            "TestRelevantFocal": "[hashCode###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public TextChunk[] splitAt(int i) {\n    if (i < 1 || i >= this.getTextElements().size()) {\n        throw new IllegalArgumentException();\n    }\n    return new TextChunk[] { new TextChunk(this.getTextElements().subList(0, i)), new TextChunk(this.getTextElements().subList(i, this.getTextElements().size())) };\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "int",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "splitAt(int i)",
            "Method_name": "splitAt",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###splitAt",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "\n     * Splits a TextChunk in two, at the position of the i-th TextElement\n     ",
            "packageName": "technology.tabula",
            "method_signature": "public TextChunk[] splitAt(int i);",
            "Junit_version": "4",
            "returnType": "TextChunk[]"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test31",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}",
            "TestRelevantFocal": "[splitAt###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public TextChunk merge(TextChunk other) {\n    super.merge(other);\n    return this;\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "TextChunk",
            "Import_statements": "",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "merge(TextChunk other)",
            "Method_name": "merge",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###merge",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public TextChunk merge(TextChunk other);",
            "Junit_version": "4",
            "returnType": "TextChunk"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test07",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}",
            "TestRelevantFocal": "[merge###1, merge###1, add###1, add###1, merge###1, isSameChar###1, isSameChar###1, isSameChar###1, isSameChar###1, isLtrDominant###0, groupByDirectionality###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public boolean isSameChar(Character[] c) {\n    String s = this.getText();\n    List<Character> chars = Arrays.asList(c);\n    for (int i = 0; i < s.length(); i++) {\n        if (!chars.contains(s.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "",
            "Parameter_type": "Character[]",
            "Import_statements": "import java.util.Arrays;\nimport java.util.List;\n",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "isSameChar(Character() c)",
            "Method_name": "isSameChar",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###isSameChar",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public boolean isSameChar(Character[] c);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test07",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}",
            "TestRelevantFocal": "[merge###1, merge###1, add###1, add###1, merge###1, isSameChar###1, isSameChar###1, isSameChar###1, isSameChar###1, isLtrDominant###0, groupByDirectionality###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic int isLtrDominant() {\n    int ltrCnt = 0;\n    int rtlCnt = 0;\n    for (int i = 0; i < this.getTextElements().size(); i++) {\n        String elementText = this.getTextElements().get(i).getText();\n        for (int j = 0; j < elementText.length(); j++) {\n            byte dir = Character.getDirectionality(elementText.charAt(j));\n            if ((dir == Character.DIRECTIONALITY_LEFT_TO_RIGHT) || (dir == Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING) || (dir == Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE)) {\n                ltrCnt++;\n            } else if ((dir == Character.DIRECTIONALITY_RIGHT_TO_LEFT) || (dir == Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC) || (dir == Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING) || (dir == Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE)) {\n                rtlCnt++;\n            }\n        }\n    }\n    return java.lang.Integer.compare(ltrCnt, rtlCnt);\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "isLtrDominant()",
            "Method_name": "isLtrDominant",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###isLtrDominant",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public int isLtrDominant();",
            "Junit_version": "4",
            "returnType": "int"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test07",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}",
            "TestRelevantFocal": "[merge###1, merge###1, add###1, add###1, merge###1, isSameChar###1, isSameChar###1, isSameChar###1, isSameChar###1, isLtrDominant###0, groupByDirectionality###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public TextChunk groupByDirectionality(Boolean isLtrDominant) {\n    if (this.getTextElements().size() <= 0) {\n        throw new IllegalArgumentException();\n    }\n    ArrayList<ArrayList<TextElement>> chunks = new ArrayList<>();\n    ArrayList<TextElement> buff = new ArrayList<>();\n    DirectionalityOptions buffDirectionality = DirectionalityOptions.NONE;\n    for (TextElement te : this.getTextElements()) {\n        if (buff.size() == 0) {\n            buff.add(te);\n            buffDirectionality = directionalities.get(Character.getDirectionality(te.getText().charAt(0)));\n        } else {\n            if (buffDirectionality == DirectionalityOptions.NONE) {\n                buffDirectionality = directionalities.get(Character.getDirectionality(te.getText().charAt(0)));\n            }\n            DirectionalityOptions teDirectionality = directionalities.get(Character.getDirectionality(te.getText().charAt(0)));\n            if (teDirectionality == buffDirectionality || teDirectionality == DirectionalityOptions.NONE) {\n                if (Character.getDirectionality(te.getText().charAt(0)) == java.lang.Character.DIRECTIONALITY_WHITESPACE && (buffDirectionality == (isLtrDominant ? DirectionalityOptions.RTL : DirectionalityOptions.LTR))) {\n                    buff.add(0, te);\n                } else {\n                    buff.add(te);\n                }\n            } else {\n                if (buffDirectionality == DirectionalityOptions.RTL) {\n                    Collections.reverse(buff);\n                }\n                chunks.add(buff);\n                buffDirectionality = directionalities.get(Character.getDirectionality(te.getText().charAt(0)));\n                buff = new ArrayList<>();\n                buff.add(te);\n            }\n        }\n    }\n    if (buffDirectionality == DirectionalityOptions.RTL) {\n        Collections.reverse(buff);\n    }\n    chunks.add(buff);\n    ArrayList<TextElement> everything = new ArrayList<>();\n    if (!isLtrDominant) {\n        Collections.reverse(chunks);\n    }\n    for (ArrayList<TextElement> group : chunks) {\n        everything.addAll(group);\n    }\n    return new TextChunk(everything);\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "11",
            "Filed": "private static HashMap<Byte, DirectionalityOptions> directionalities;",
            "Parameter_type": "Boolean",
            "Import_statements": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Collections;\n",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "groupByDirectionality(Boolean isLtrDominant)",
            "Method_name": "groupByDirectionality",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###groupByDirectionality",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "\n     * Splits a TextChunk into N TextChunks, where each chunk is of a single directionality, and\n     * then reverse the RTL ones.\n     * what we're doing here is *reversing* the Unicode bidi algorithm\n     * in the language of that algorithm, each chunk is a (maximal) directional run.\n     * We attach whitespace to the beginning of non-RTL\n     *",
            "packageName": "technology.tabula",
            "method_signature": "public TextChunk groupByDirectionality(Boolean isLtrDominant);",
            "Junit_version": "4",
            "returnType": "TextChunk"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test07",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}",
            "TestRelevantFocal": "[merge###1, merge###1, add###1, add###1, merge###1, isSameChar###1, isSameChar###1, isSameChar###1, isSameChar###1, isLtrDominant###0, groupByDirectionality###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public List<TextChunk> squeeze(Character c, int minRunLength) {\n    Character currentChar, lastChar = null;\n    int subSequenceLength = 0, subSequenceStart = 0;\n    TextChunk[] t;\n    List<TextChunk> rv = new ArrayList<>();\n    for (int i = 0; i < this.getTextElements().size(); i++) {\n        TextElement textElement = this.getTextElements().get(i);\n        String text = textElement.getText();\n        if (text.length() > 1) {\n            currentChar = text.trim().charAt(0);\n        } else {\n            currentChar = text.charAt(0);\n        }\n        if (lastChar != null && currentChar.equals(c) && lastChar.equals(currentChar)) {\n            subSequenceLength++;\n        } else {\n            if (((lastChar != null && !lastChar.equals(currentChar)) || i + 1 == this.getTextElements().size()) && subSequenceLength >= minRunLength) {\n                if (subSequenceStart == 0 && subSequenceLength <= this.getTextElements().size() - 1) {\n                    t = this.splitAt(subSequenceLength);\n                } else {\n                    t = this.splitAt(subSequenceStart);\n                    rv.add(t[0]);\n                }\n                rv.addAll(t[1].squeeze(c, minRunLength));\n                break;\n            }\n            subSequenceLength = 1;\n            subSequenceStart = i;\n        }\n        lastChar = currentChar;\n    }\n    if (rv.isEmpty()) {\n        if (subSequenceLength >= minRunLength && subSequenceLength < this.textElements.size()) {\n            TextChunk[] chunks = this.splitAt(subSequenceStart);\n            rv.add(chunks[0]);\n        } else {\n            rv.add(this);\n        }\n    }\n    return rv;\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "7",
            "Filed": "",
            "Parameter_type": "Character,int",
            "Import_statements": "import java.util.ArrayList;\nimport java.util.List;\n",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "squeeze(Character c, int minRunLength)",
            "Method_name": "squeeze",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###squeeze",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "\n     * Removes runs of identical TextElements in this TextChunk\n     * For example, if the TextChunk contains this string of characters: \"1234xxxxx56xx\"\n     * and c == 'x' and minRunLength == 4, this method will return a list of TextChunk\n     * such that: [\"1234\", \"56xx\"]\n     ",
            "packageName": "technology.tabula",
            "method_signature": "public List<TextChunk> squeeze(Character c, int minRunLength);",
            "Junit_version": "4",
            "returnType": "List<TextChunk>"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.List;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test11",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}",
            "TestRelevantFocal": "[isSameChar###1, isSameChar###1, squeeze###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static boolean allSameChar(List<TextChunk> textChunks) {\n    if (textChunks.size() == 1)\n        return false;\n    boolean hasHadAtLeastOneNonEmptyTextChunk = false;\n    char first = '\\u0000';\n    for (TextChunk tc : textChunks) {\n        if (tc.getText().length() == 0) {\n            continue;\n        }\n        if (first == '\\u0000') {\n            first = tc.getText().charAt(0);\n        } else {\n            hasHadAtLeastOneNonEmptyTextChunk = true;\n            if (!tc.isSameChar(first))\n                return false;\n        }\n    }\n    return hasHadAtLeastOneNonEmptyTextChunk;\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "5",
            "Filed": "",
            "Parameter_type": "List<TextChunk>",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "allSameChar(List<TextChunk> textChunks)",
            "Method_name": "allSameChar",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###allSameChar",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public static boolean allSameChar(List<TextChunk> textChunks);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test16",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[add###1, add###1, add###1, add###1, allSameChar###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic boolean equals(Object obj) {\n    if (this == obj)\n        return true;\n    if (!super.equals(obj))\n        return false;\n    if (getClass() != obj.getClass())\n        return false;\n    TextChunk other = (TextChunk) obj;\n    if (textElements == null) {\n        return other.textElements == null;\n    } else\n        return textElements.equals(other.textElements);\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "5",
            "Filed": "",
            "Parameter_type": "Object",
            "Import_statements": "",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "equals(Object obj)",
            "Method_name": "equals",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###equals",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public boolean equals(Object obj);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test17",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}",
            "TestRelevantFocal": "[equals###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String getText() {\n    if (this.textElements.size() == 0) {\n        return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (TextElement te : this.textElements) {\n        sb.append(te.getText());\n    }\n    return Normalizer.normalize(sb.toString(), Normalizer.Form.NFKC).trim();\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "import java.text.Normalizer;\n",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "getText()",
            "Method_name": "getText",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###getText",
            "Parameter_num": "0",
            "contextMethod": "@Override\npublic int isLtrDominant() {\n    int ltrCnt = 0;\n    int rtlCnt = 0;\n    for (int i = 0; i < this.getTextElements().size(); i++) {\n        String elementText = this.getTextElements().get(i).getText();\n        for (int j = 0; j < elementText.length(); j++) {\n            byte dir = Character.getDirectionality(elementText.charAt(j));\n            if ((dir == Character.DIRECTIONALITY_LEFT_TO_RIGHT) || (dir == Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING) || (dir == Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE)) {\n                ltrCnt++;\n            } else if ((dir == Character.DIRECTIONALITY_RIGHT_TO_LEFT) || (dir == Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC) || (dir == Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING) || (dir == Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE)) {\n                rtlCnt++;\n            }\n        }\n    }\n    return java.lang.Integer.compare(ltrCnt, rtlCnt);\n}",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public String getText();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test20",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}",
            "TestRelevantFocal": "[getText###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String getText(boolean useLineReturns) {\n    return getText();\n}",
            "all_field_declaration": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);\nprivate static HashMap<Byte, DirectionalityOptions> directionalities;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "boolean",
            "Import_statements": "",
            "public_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "public_field": "public static final TextChunk EMPTY = new TextChunk(0, 0, 0, 0);",
            "Method_statement": "getText(boolean useLineReturns)",
            "Method_name": "getText",
            "Class_declaration": "public class TextChunk {\n",
            "constructors": "public TextChunk(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}public TextChunk(TextElement textElement) {\n    super(textElement.y, textElement.x, textElement.width, textElement.height);\n    this.add(textElement);\n}public TextChunk(List<TextElement> textElements) {\n    this(textElements.get(0));\n    for (int i = 1; i < textElements.size(); i++) {\n        this.add(textElements.get(i));\n    }\n}",
            "all_method_signature": "public TextChunk(float top, float left, float width, float height);\npublic TextChunk(TextElement textElement);\npublic TextChunk(List<TextElement> textElements);\npublic TextChunk groupByDirectionality(Boolean isLtrDominant);\npublic int isLtrDominant();\npublic TextChunk merge(TextChunk other);\npublic void add(TextElement textElement);\npublic void add(List<TextElement> elements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic boolean isSameChar(Character c);\npublic boolean isSameChar(Character[] c);\npublic TextChunk[] splitAt(int i);\npublic List<TextChunk> squeeze(Character c, int minRunLength);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic static boolean allSameChar(List<TextChunk> textChunks);\npublic static List<Line> groupByLines(List<TextChunk> textChunks);",
            "Class_name": "TextChunk",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/TextChunk.java###getText",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.List;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.text.Normalizer;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public String getText(boolean useLineReturns);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++add###1, TextChunk_ESTest.java###test00+++groupByLines###1, TextChunk_ESTest.java###test00+++assertEquals###2, TextChunk_ESTest.java###test00+++size###0, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++add###1, TextChunk_ESTest.java###test01+++groupByLines###1, TextChunk_ESTest.java###test01+++assertEquals###2, TextChunk_ESTest.java###test01+++size###0, TextChunk_ESTest.java###test02+++setRect###4, TextChunk_ESTest.java###test02+++hashCode###0, TextChunk_ESTest.java###test03+++verifyException###2, TextChunk_ESTest.java###test03+++splitAt###1, TextChunk_ESTest.java###test03+++fail###1, TextChunk_ESTest.java###test04+++merge###1, TextChunk_ESTest.java###test04+++assertEquals###3, TextChunk_ESTest.java###test05+++merge###1, TextChunk_ESTest.java###test05+++assertEquals###3, TextChunk_ESTest.java###test06+++merge###1, TextChunk_ESTest.java###test06+++assertEquals###3, TextChunk_ESTest.java###test06+++getCenterY###0, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++intersects###1, TextChunk_ESTest.java###test07+++add###1, TextChunk_ESTest.java###test07+++merge###1, TextChunk_ESTest.java###test07+++setRect###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isSameChar###1, TextChunk_ESTest.java###test07+++isLtrDominant###0, TextChunk_ESTest.java###test07+++verifyException###2, TextChunk_ESTest.java###test07+++groupByDirectionality###1, TextChunk_ESTest.java###test07+++fail###1, TextChunk_ESTest.java###test08+++merge###1, TextChunk_ESTest.java###test08+++assertEquals###3, TextChunk_ESTest.java###test09+++verifyException###2, TextChunk_ESTest.java###test09+++merge###1, TextChunk_ESTest.java###test09+++fail###1, TextChunk_ESTest.java###test10+++verifyException###2, TextChunk_ESTest.java###test10+++isSameChar###1, TextChunk_ESTest.java###test10+++fail###1, TextChunk_ESTest.java###test11+++valueOf###1, TextChunk_ESTest.java###test11+++isSameChar###1, TextChunk_ESTest.java###test11+++squeeze###2, TextChunk_ESTest.java###test11+++assertEquals###2, TextChunk_ESTest.java###test11+++size###0, TextChunk_ESTest.java###test12+++verifyException###2, TextChunk_ESTest.java###test12+++groupByLines###1, TextChunk_ESTest.java###test12+++fail###1, TextChunk_ESTest.java###test13+++verifyException###2, TextChunk_ESTest.java###test13+++allSameChar###1, TextChunk_ESTest.java###test13+++fail###1, TextChunk_ESTest.java###test14+++verifyException###2, TextChunk_ESTest.java###test14+++fail###1, TextChunk_ESTest.java###test15+++getTextElements###0, TextChunk_ESTest.java###test15+++verifyException###2, TextChunk_ESTest.java###test15+++fail###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++add###1, TextChunk_ESTest.java###test16+++allSameChar###1, TextChunk_ESTest.java###test16+++assertFalse###1, TextChunk_ESTest.java###test17+++equals###1, TextChunk_ESTest.java###test17+++assertTrue###1, TextChunk_ESTest.java###test18+++valueOf###1, TextChunk_ESTest.java###test18+++squeeze###2, TextChunk_ESTest.java###test19+++valueOf###1, TextChunk_ESTest.java###test19+++squeeze###2, TextChunk_ESTest.java###test20+++getText###0, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++verifyException###2, TextChunk_ESTest.java###test21+++add###1, TextChunk_ESTest.java###test21+++fail###1, TextChunk_ESTest.java###test22+++valueOf###1, TextChunk_ESTest.java###test22+++verifyException###2, TextChunk_ESTest.java###test22+++groupByDirectionality###1, TextChunk_ESTest.java###test22+++fail###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++add###1, TextChunk_ESTest.java###test23+++verifyException###2, TextChunk_ESTest.java###test23+++groupByLines###1, TextChunk_ESTest.java###test23+++fail###1, TextChunk_ESTest.java###test24+++groupByLines###1, TextChunk_ESTest.java###test24+++assertEquals###2, TextChunk_ESTest.java###test24+++size###0, TextChunk_ESTest.java###test25+++add###1, TextChunk_ESTest.java###test25+++allSameChar###1, TextChunk_ESTest.java###test25+++assertFalse###1, TextChunk_ESTest.java###test26+++compareTo###1, TextChunk_ESTest.java###test26+++assertTrue###1, TextChunk_ESTest.java###test26+++equals###1, TextChunk_ESTest.java###test27+++compareTo###1, TextChunk_ESTest.java###test27+++assertEquals###2, TextChunk_ESTest.java###test28+++equals###1, TextChunk_ESTest.java###test28+++assertFalse###1, TextChunk_ESTest.java###test29+++clone###0, TextChunk_ESTest.java###test29+++equals###1, TextChunk_ESTest.java###test29+++assertTrue###1, TextChunk_ESTest.java###test30+++verifyException###2, TextChunk_ESTest.java###test30+++splitAt###1, TextChunk_ESTest.java###test30+++fail###1, TextChunk_ESTest.java###test31+++verifyException###2, TextChunk_ESTest.java###test31+++splitAt###1, TextChunk_ESTest.java###test31+++fail###1, TextChunk_ESTest.java###test32+++getText###1, TextChunk_ESTest.java###test33+++verifyException###2, TextChunk_ESTest.java###test33+++fail###1, TextChunk_ESTest.java###test34+++verifyException###2, TextChunk_ESTest.java###test34+++add###1, TextChunk_ESTest.java###test34+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:15:23 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class TextChunk_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.TextChunk\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TextChunk_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TextChunk_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/TextChunk_ESTest.java###test32",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    TextChunk.groupByLines(arrayList0);\n    assertEquals(2, arrayList0.size());\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);\n    textChunk0.hashCode();\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(15);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));\n    textChunk0.merge(textChunk0);\n    assertEquals((-155.6468F), textChunk0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));\n    textChunk0.merge(textChunk1);\n    assertEquals(1469.711F, textChunk0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = textChunk0.merge(textChunk0);\n    assertEquals(0.0, textChunk1.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = TextChunk.EMPTY;\n    TextChunk textChunk2 = textChunk0.merge(textChunk1);\n    TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);\n    textChunk1.intersects((Rectangle2D) textChunk3);\n    ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();\n    textChunk0.add((List<TextElement>) arrayList0);\n    TextChunk textChunk4 = textChunk1.merge(textChunk3);\n    Character[] characterArray0 = new Character[2];\n    Character character0 = new Character(',');\n    characterArray0[0] = character0;\n    Character character1 = new Character(',');\n    textChunk4.setRect((Rectangle2D) textChunk0);\n    characterArray0[1] = character1;\n    textChunk4.isSameChar(characterArray0);\n    textChunk4.isSameChar(character0);\n    textChunk4.isLtrDominant();\n    Boolean boolean0 = Boolean.FALSE;\n    // Undeclared exception!\n    try {\n        textChunk1.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);\n    TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);\n    textChunk0.merge(textChunk1);\n    assertEquals(2992.766F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.isSameChar((Character[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.Objects\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('8');\n    textChunk0.isSameChar(character0);\n    Character character1 = null;\n    int int0 = (-3901);\n    List<TextChunk> list0 = textChunk0.squeeze(character1, int0);\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    // Undeclared exception!\n    try {\n        TextChunk.allSameChar((List<TextChunk>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((List<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    List<TextElement> list0 = textChunk0.getTextElements();\n    TextChunk textChunk1 = null;\n    try {\n        textChunk1 = new TextChunk(list0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    boolean boolean0 = textChunk0.equals(textChunk0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('W');\n    textChunk0.squeeze(character0, 13);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Character character0 = Character.valueOf('$');\n    textChunk0.squeeze(character0, (-1631));\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText();\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();\n    linkedList0.add((TextElement) null);\n    // Undeclared exception!\n    try {\n        textChunk0.add((List<TextElement>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Boolean boolean0 = Boolean.valueOf(false);\n    // Undeclared exception!\n    try {\n        textChunk0.EMPTY.groupByDirectionality(boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    arrayList0.add(textChunk0);\n    arrayList0.add(textChunk0);\n    // Undeclared exception!\n    try {\n        TextChunk.groupByLines(arrayList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    List<Line> list0 = TextChunk.groupByLines(arrayList0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    arrayList0.add(textChunk0);\n    boolean boolean0 = TextChunk.allSameChar(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    textChunk1.compareTo(textChunk0);\n    assertTrue(textChunk1.equals((Object) textChunk0));\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = textChunk0.EMPTY.compareTo(rectangle0);\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();\n    boolean boolean0 = textChunk0.equals(arrayList0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Object object0 = textChunk0.clone();\n    boolean boolean0 = textChunk0.EMPTY.equals(object0);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    int int0 = 1;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt(1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.splitAt((-1477));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    TextChunk textChunk0 = null;\n    try {\n        textChunk0 = new TextChunk((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.add((TextElement) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.getText(false);\n}",
            "TestRelevantFocal": "[getText###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:15:23 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static final Table empty() {\n    return new Table(\"\");\n}",
            "all_field_declaration": "private final String extractionMethod;\nprivate int rowCount = 0;\nprivate int colCount = 0;\nprivate int pageNumber = 0;\nfinal TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();\nprivate List<List<RectangularTextContainer>> memoizedRows = null;\nfinal int row, col;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static final Table empty();\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\npublic RectangularTextContainer getCell(int i, int j);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "public_field": "",
            "Method_statement": "empty()",
            "Method_name": "empty",
            "Class_declaration": "public class Table {\n",
            "constructors": "private Table(String extractionMethod) {\n    this.extractionMethod = extractionMethod;\n}public Table(ExtractionAlgorithm extractionAlgorithm) {\n    this(extractionAlgorithm.toString());\n}",
            "all_method_signature": "public static final Table empty();\nprivate Table(String extractionMethod);\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\nprivate List<List<RectangularTextContainer>> computeRows();\npublic RectangularTextContainer getCell(int i, int j);\n CellPosition(int row, int col);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "Class_name": "Table",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Table.java###empty",
            "Parameter_num": "0",
            "contextMethod": "public static final Table empty() {\n    return new Table(\"\");\n}",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.TreeMap;\n\nimport technology.tabula.extractors.ExtractionAlgorithm;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public static final Table empty();",
            "Junit_version": "4",
            "returnType": "Table"
        },
        "Test_method": {
            "AllTest2Focal": "[Table_ESTest.java###test00+++empty###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++setPageNumber###1, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test01+++empty###0, Table_ESTest.java###test01+++setPageNumber###1, Table_ESTest.java###test01+++getPageNumber###0, Table_ESTest.java###test01+++assertEquals###2, Table_ESTest.java###test02+++getExtractionMethod###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getColCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getRowCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getPageNumber###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRight###0, Table_ESTest.java###test03+++union###3, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++setFrameFromDiagonal###4, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++verticalOverlapRatio###1, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test04+++empty###0, Table_ESTest.java###test04+++add###3, Table_ESTest.java###test04+++fail###1, Table_ESTest.java###test05+++verifyException###2, Table_ESTest.java###test05+++fail###1, Table_ESTest.java###test06+++empty###0, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test06+++add###3, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test07+++empty###0, Table_ESTest.java###test07+++getCell###2, Table_ESTest.java###test07+++add###3, Table_ESTest.java###test07+++getRows###0, Table_ESTest.java###test08+++empty###0, Table_ESTest.java###test08+++getCell###2, Table_ESTest.java###test08+++add###3, Table_ESTest.java###test08+++getRows###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getColCount###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getRowCount###0, Table_ESTest.java###test09+++empty###0, Table_ESTest.java###test09+++getCell###2, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getRowCount###0, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getColCount###0, Table_ESTest.java###test10+++empty###0, Table_ESTest.java###test10+++getPageNumber###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getColCount###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getRowCount###0, Table_ESTest.java###test11+++getColCount###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getPageNumber###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getRowCount###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:11:53 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Table_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Table\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Table_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Table_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Table;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Table_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Table table0 = Table.empty();\n    assertEquals(0, table0.getPageNumber());\n    table0.setPageNumber(1);\n    int int0 = table0.getPageNumber();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    table0.getExtractionMethod();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, table0.getRowCount());\n    assertEquals(0, table0.getPageNumber());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Table table0 = Table.empty();\n    // Undeclared exception!\n    try {\n        table0.add((RectangularTextContainer) null, 2, 2);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Table table0 = null;\n    try {\n        table0 = new Table((ExtractionAlgorithm) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Table\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    assertEquals(0, table0.getColCount());\n    table0.add(rectangularTextContainer0, (-2768), 0);\n    table0.getCell((-2768), 0);\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(666, 666);\n    table0.add(rectangularTextContainer0, 666, 666);\n    // Undeclared exception!\n    table0.getRows();\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.getRows();\n    assertEquals(1, table0.getColCount());\n    assertEquals(1, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.add(rectangularTextContainer0, 0, 0);\n    assertEquals(1, table0.getRowCount());\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Table table0 = Table.empty();\n    int int0 = table0.getPageNumber();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    int int0 = table0.getColCount();\n    assertEquals(0, table0.getPageNumber());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}",
            "TestRelevantFocal": "[empty###0, setPageNumber###1, getPageNumber###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:11:53 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\nimport technology.tabula.extractors.ExtractionAlgorithm;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Table_ESTest extends Table_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public int getPageNumber() {\n    return pageNumber;\n}",
            "all_field_declaration": "private final String extractionMethod;\nprivate int rowCount = 0;\nprivate int colCount = 0;\nprivate int pageNumber = 0;\nfinal TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();\nprivate List<List<RectangularTextContainer>> memoizedRows = null;\nfinal int row, col;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private int pageNumber = 0;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static final Table empty();\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\npublic RectangularTextContainer getCell(int i, int j);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "public_field": "",
            "Method_statement": "getPageNumber()",
            "Method_name": "getPageNumber",
            "Class_declaration": "public class Table {\n",
            "constructors": "private Table(String extractionMethod) {\n    this.extractionMethod = extractionMethod;\n}public Table(ExtractionAlgorithm extractionAlgorithm) {\n    this(extractionAlgorithm.toString());\n}",
            "all_method_signature": "public static final Table empty();\nprivate Table(String extractionMethod);\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\nprivate List<List<RectangularTextContainer>> computeRows();\npublic RectangularTextContainer getCell(int i, int j);\n CellPosition(int row, int col);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "Class_name": "Table",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Table.java###getPageNumber",
            "Parameter_num": "0",
            "contextMethod": "public static final Table empty() {\n    return new Table(\"\");\n}\npublic int getRowCount() {\n    return rowCount;\n}\npublic int getColCount() {\n    return colCount;\n}",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.TreeMap;\n\nimport technology.tabula.extractors.ExtractionAlgorithm;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public int getPageNumber();",
            "Junit_version": "4",
            "returnType": "int"
        },
        "Test_method": {
            "AllTest2Focal": "[Table_ESTest.java###test00+++empty###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++setPageNumber###1, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test01+++empty###0, Table_ESTest.java###test01+++setPageNumber###1, Table_ESTest.java###test01+++getPageNumber###0, Table_ESTest.java###test01+++assertEquals###2, Table_ESTest.java###test02+++getExtractionMethod###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getColCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getRowCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getPageNumber###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRight###0, Table_ESTest.java###test03+++union###3, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++setFrameFromDiagonal###4, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++verticalOverlapRatio###1, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test04+++empty###0, Table_ESTest.java###test04+++add###3, Table_ESTest.java###test04+++fail###1, Table_ESTest.java###test05+++verifyException###2, Table_ESTest.java###test05+++fail###1, Table_ESTest.java###test06+++empty###0, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test06+++add###3, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test07+++empty###0, Table_ESTest.java###test07+++getCell###2, Table_ESTest.java###test07+++add###3, Table_ESTest.java###test07+++getRows###0, Table_ESTest.java###test08+++empty###0, Table_ESTest.java###test08+++getCell###2, Table_ESTest.java###test08+++add###3, Table_ESTest.java###test08+++getRows###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getColCount###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getRowCount###0, Table_ESTest.java###test09+++empty###0, Table_ESTest.java###test09+++getCell###2, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getRowCount###0, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getColCount###0, Table_ESTest.java###test10+++empty###0, Table_ESTest.java###test10+++getPageNumber###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getColCount###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getRowCount###0, Table_ESTest.java###test11+++getColCount###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getPageNumber###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getRowCount###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:11:53 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Table_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Table\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Table_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Table_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Table;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Table_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Table table0 = Table.empty();\n    assertEquals(0, table0.getPageNumber());\n    table0.setPageNumber(1);\n    int int0 = table0.getPageNumber();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    table0.getExtractionMethod();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, table0.getRowCount());\n    assertEquals(0, table0.getPageNumber());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Table table0 = Table.empty();\n    // Undeclared exception!\n    try {\n        table0.add((RectangularTextContainer) null, 2, 2);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Table table0 = null;\n    try {\n        table0 = new Table((ExtractionAlgorithm) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Table\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    assertEquals(0, table0.getColCount());\n    table0.add(rectangularTextContainer0, (-2768), 0);\n    table0.getCell((-2768), 0);\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(666, 666);\n    table0.add(rectangularTextContainer0, 666, 666);\n    // Undeclared exception!\n    table0.getRows();\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.getRows();\n    assertEquals(1, table0.getColCount());\n    assertEquals(1, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.add(rectangularTextContainer0, 0, 0);\n    assertEquals(1, table0.getRowCount());\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Table table0 = Table.empty();\n    int int0 = table0.getPageNumber();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    int int0 = table0.getColCount();\n    assertEquals(0, table0.getPageNumber());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}",
            "TestRelevantFocal": "[empty###0, setPageNumber###1, getPageNumber###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:11:53 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\nimport technology.tabula.extractors.ExtractionAlgorithm;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Table_ESTest extends Table_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setPageNumber(int pageNumber) {\n    this.pageNumber = pageNumber;\n}",
            "all_field_declaration": "private final String extractionMethod;\nprivate int rowCount = 0;\nprivate int colCount = 0;\nprivate int pageNumber = 0;\nfinal TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();\nprivate List<List<RectangularTextContainer>> memoizedRows = null;\nfinal int row, col;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private int pageNumber = 0;",
            "Parameter_type": "int",
            "Import_statements": "",
            "public_method_signature": "public static final Table empty();\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\npublic RectangularTextContainer getCell(int i, int j);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "public_field": "",
            "Method_statement": "setPageNumber(int pageNumber)",
            "Method_name": "setPageNumber",
            "Class_declaration": "public class Table {\n",
            "constructors": "private Table(String extractionMethod) {\n    this.extractionMethod = extractionMethod;\n}public Table(ExtractionAlgorithm extractionAlgorithm) {\n    this(extractionAlgorithm.toString());\n}",
            "all_method_signature": "public static final Table empty();\nprivate Table(String extractionMethod);\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\nprivate List<List<RectangularTextContainer>> computeRows();\npublic RectangularTextContainer getCell(int i, int j);\n CellPosition(int row, int col);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "Class_name": "Table",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Table.java###setPageNumber",
            "Parameter_num": "1",
            "contextMethod": "public static final Table empty() {\n    return new Table(\"\");\n}\npublic int getRowCount() {\n    return rowCount;\n}\npublic int getColCount() {\n    return colCount;\n}",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.TreeMap;\n\nimport technology.tabula.extractors.ExtractionAlgorithm;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void setPageNumber(int pageNumber);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Table_ESTest.java###test00+++empty###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++setPageNumber###1, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test01+++empty###0, Table_ESTest.java###test01+++setPageNumber###1, Table_ESTest.java###test01+++getPageNumber###0, Table_ESTest.java###test01+++assertEquals###2, Table_ESTest.java###test02+++getExtractionMethod###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getColCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getRowCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getPageNumber###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRight###0, Table_ESTest.java###test03+++union###3, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++setFrameFromDiagonal###4, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++verticalOverlapRatio###1, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test04+++empty###0, Table_ESTest.java###test04+++add###3, Table_ESTest.java###test04+++fail###1, Table_ESTest.java###test05+++verifyException###2, Table_ESTest.java###test05+++fail###1, Table_ESTest.java###test06+++empty###0, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test06+++add###3, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test07+++empty###0, Table_ESTest.java###test07+++getCell###2, Table_ESTest.java###test07+++add###3, Table_ESTest.java###test07+++getRows###0, Table_ESTest.java###test08+++empty###0, Table_ESTest.java###test08+++getCell###2, Table_ESTest.java###test08+++add###3, Table_ESTest.java###test08+++getRows###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getColCount###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getRowCount###0, Table_ESTest.java###test09+++empty###0, Table_ESTest.java###test09+++getCell###2, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getRowCount###0, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getColCount###0, Table_ESTest.java###test10+++empty###0, Table_ESTest.java###test10+++getPageNumber###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getColCount###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getRowCount###0, Table_ESTest.java###test11+++getColCount###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getPageNumber###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getRowCount###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:11:53 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Table_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Table\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Table_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Table_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Table;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Table_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Table table0 = Table.empty();\n    assertEquals(0, table0.getPageNumber());\n    table0.setPageNumber(1);\n    int int0 = table0.getPageNumber();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    table0.getExtractionMethod();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, table0.getRowCount());\n    assertEquals(0, table0.getPageNumber());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Table table0 = Table.empty();\n    // Undeclared exception!\n    try {\n        table0.add((RectangularTextContainer) null, 2, 2);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Table table0 = null;\n    try {\n        table0 = new Table((ExtractionAlgorithm) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Table\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    assertEquals(0, table0.getColCount());\n    table0.add(rectangularTextContainer0, (-2768), 0);\n    table0.getCell((-2768), 0);\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(666, 666);\n    table0.add(rectangularTextContainer0, 666, 666);\n    // Undeclared exception!\n    table0.getRows();\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.getRows();\n    assertEquals(1, table0.getColCount());\n    assertEquals(1, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.add(rectangularTextContainer0, 0, 0);\n    assertEquals(1, table0.getRowCount());\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Table table0 = Table.empty();\n    int int0 = table0.getPageNumber();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    int int0 = table0.getColCount();\n    assertEquals(0, table0.getPageNumber());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}",
            "TestRelevantFocal": "[empty###0, setPageNumber###1, getPageNumber###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:11:53 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\nimport technology.tabula.extractors.ExtractionAlgorithm;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Table_ESTest extends Table_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public String getExtractionMethod() {\n    return extractionMethod;\n}",
            "all_field_declaration": "private final String extractionMethod;\nprivate int rowCount = 0;\nprivate int colCount = 0;\nprivate int pageNumber = 0;\nfinal TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();\nprivate List<List<RectangularTextContainer>> memoizedRows = null;\nfinal int row, col;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private final String extractionMethod;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static final Table empty();\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\npublic RectangularTextContainer getCell(int i, int j);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "public_field": "",
            "Method_statement": "getExtractionMethod()",
            "Method_name": "getExtractionMethod",
            "Class_declaration": "public class Table {\n",
            "constructors": "private Table(String extractionMethod) {\n    this.extractionMethod = extractionMethod;\n}public Table(ExtractionAlgorithm extractionAlgorithm) {\n    this(extractionAlgorithm.toString());\n}",
            "all_method_signature": "public static final Table empty();\nprivate Table(String extractionMethod);\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\nprivate List<List<RectangularTextContainer>> computeRows();\npublic RectangularTextContainer getCell(int i, int j);\n CellPosition(int row, int col);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "Class_name": "Table",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Table.java###getExtractionMethod",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.TreeMap;\n\nimport technology.tabula.extractors.ExtractionAlgorithm;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public String getExtractionMethod();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Table_ESTest.java###test00+++empty###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++setPageNumber###1, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test01+++empty###0, Table_ESTest.java###test01+++setPageNumber###1, Table_ESTest.java###test01+++getPageNumber###0, Table_ESTest.java###test01+++assertEquals###2, Table_ESTest.java###test02+++getExtractionMethod###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getColCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getRowCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getPageNumber###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRight###0, Table_ESTest.java###test03+++union###3, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++setFrameFromDiagonal###4, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++verticalOverlapRatio###1, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test04+++empty###0, Table_ESTest.java###test04+++add###3, Table_ESTest.java###test04+++fail###1, Table_ESTest.java###test05+++verifyException###2, Table_ESTest.java###test05+++fail###1, Table_ESTest.java###test06+++empty###0, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test06+++add###3, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test07+++empty###0, Table_ESTest.java###test07+++getCell###2, Table_ESTest.java###test07+++add###3, Table_ESTest.java###test07+++getRows###0, Table_ESTest.java###test08+++empty###0, Table_ESTest.java###test08+++getCell###2, Table_ESTest.java###test08+++add###3, Table_ESTest.java###test08+++getRows###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getColCount###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getRowCount###0, Table_ESTest.java###test09+++empty###0, Table_ESTest.java###test09+++getCell###2, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getRowCount###0, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getColCount###0, Table_ESTest.java###test10+++empty###0, Table_ESTest.java###test10+++getPageNumber###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getColCount###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getRowCount###0, Table_ESTest.java###test11+++getColCount###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getPageNumber###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getRowCount###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:11:53 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Table_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Table\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Table_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Table_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Table_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Table table0 = Table.empty();\n    assertEquals(0, table0.getPageNumber());\n    table0.setPageNumber(1);\n    int int0 = table0.getPageNumber();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    table0.getExtractionMethod();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, table0.getRowCount());\n    assertEquals(0, table0.getPageNumber());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Table table0 = Table.empty();\n    // Undeclared exception!\n    try {\n        table0.add((RectangularTextContainer) null, 2, 2);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Table table0 = null;\n    try {\n        table0 = new Table((ExtractionAlgorithm) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Table\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    assertEquals(0, table0.getColCount());\n    table0.add(rectangularTextContainer0, (-2768), 0);\n    table0.getCell((-2768), 0);\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(666, 666);\n    table0.add(rectangularTextContainer0, 666, 666);\n    // Undeclared exception!\n    table0.getRows();\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.getRows();\n    assertEquals(1, table0.getColCount());\n    assertEquals(1, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.add(rectangularTextContainer0, 0, 0);\n    assertEquals(1, table0.getRowCount());\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Table table0 = Table.empty();\n    int int0 = table0.getPageNumber();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    int int0 = table0.getColCount();\n    assertEquals(0, table0.getPageNumber());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}",
            "TestRelevantFocal": "[empty###0, empty###0, getCell###2, getCell###2, getRowCount###0, add###3, add###3, getExtractionMethod###0, getRowCount###0, getRowCount###0, getColCount###0, empty###0, getExtractionMethod###0, empty###0, getCell###2, getRows###0, getColCount###0, getRowCount###0, empty###0, getRows###0, getRowCount###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:11:53 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\nimport technology.tabula.extractors.ExtractionAlgorithm;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Table_ESTest extends Table_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public int getColCount() {\n    return colCount;\n}",
            "all_field_declaration": "private final String extractionMethod;\nprivate int rowCount = 0;\nprivate int colCount = 0;\nprivate int pageNumber = 0;\nfinal TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();\nprivate List<List<RectangularTextContainer>> memoizedRows = null;\nfinal int row, col;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private int colCount = 0;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static final Table empty();\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\npublic RectangularTextContainer getCell(int i, int j);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "public_field": "",
            "Method_statement": "getColCount()",
            "Method_name": "getColCount",
            "Class_declaration": "public class Table {\n",
            "constructors": "private Table(String extractionMethod) {\n    this.extractionMethod = extractionMethod;\n}public Table(ExtractionAlgorithm extractionAlgorithm) {\n    this(extractionAlgorithm.toString());\n}",
            "all_method_signature": "public static final Table empty();\nprivate Table(String extractionMethod);\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\nprivate List<List<RectangularTextContainer>> computeRows();\npublic RectangularTextContainer getCell(int i, int j);\n CellPosition(int row, int col);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "Class_name": "Table",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Table.java###getColCount",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.TreeMap;\n\nimport technology.tabula.extractors.ExtractionAlgorithm;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public int getColCount();",
            "Junit_version": "4",
            "returnType": "int"
        },
        "Test_method": {
            "AllTest2Focal": "[Table_ESTest.java###test00+++empty###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++setPageNumber###1, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test01+++empty###0, Table_ESTest.java###test01+++setPageNumber###1, Table_ESTest.java###test01+++getPageNumber###0, Table_ESTest.java###test01+++assertEquals###2, Table_ESTest.java###test02+++getExtractionMethod###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getColCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getRowCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getPageNumber###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRight###0, Table_ESTest.java###test03+++union###3, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++setFrameFromDiagonal###4, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++verticalOverlapRatio###1, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test04+++empty###0, Table_ESTest.java###test04+++add###3, Table_ESTest.java###test04+++fail###1, Table_ESTest.java###test05+++verifyException###2, Table_ESTest.java###test05+++fail###1, Table_ESTest.java###test06+++empty###0, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test06+++add###3, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test07+++empty###0, Table_ESTest.java###test07+++getCell###2, Table_ESTest.java###test07+++add###3, Table_ESTest.java###test07+++getRows###0, Table_ESTest.java###test08+++empty###0, Table_ESTest.java###test08+++getCell###2, Table_ESTest.java###test08+++add###3, Table_ESTest.java###test08+++getRows###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getColCount###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getRowCount###0, Table_ESTest.java###test09+++empty###0, Table_ESTest.java###test09+++getCell###2, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getRowCount###0, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getColCount###0, Table_ESTest.java###test10+++empty###0, Table_ESTest.java###test10+++getPageNumber###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getColCount###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getRowCount###0, Table_ESTest.java###test11+++getColCount###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getPageNumber###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getRowCount###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:11:53 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Table_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Table\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Table_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Table_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Table_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Table table0 = Table.empty();\n    assertEquals(0, table0.getPageNumber());\n    table0.setPageNumber(1);\n    int int0 = table0.getPageNumber();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    table0.getExtractionMethod();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, table0.getRowCount());\n    assertEquals(0, table0.getPageNumber());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Table table0 = Table.empty();\n    // Undeclared exception!\n    try {\n        table0.add((RectangularTextContainer) null, 2, 2);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Table table0 = null;\n    try {\n        table0 = new Table((ExtractionAlgorithm) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Table\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    assertEquals(0, table0.getColCount());\n    table0.add(rectangularTextContainer0, (-2768), 0);\n    table0.getCell((-2768), 0);\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(666, 666);\n    table0.add(rectangularTextContainer0, 666, 666);\n    // Undeclared exception!\n    table0.getRows();\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.getRows();\n    assertEquals(1, table0.getColCount());\n    assertEquals(1, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.add(rectangularTextContainer0, 0, 0);\n    assertEquals(1, table0.getRowCount());\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Table table0 = Table.empty();\n    int int0 = table0.getPageNumber();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    int int0 = table0.getColCount();\n    assertEquals(0, table0.getPageNumber());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}",
            "TestRelevantFocal": "[empty###0, empty###0, getCell###2, getCell###2, getRowCount###0, add###3, add###3, getExtractionMethod###0, getRowCount###0, getRowCount###0, getColCount###0, empty###0, getExtractionMethod###0, empty###0, getCell###2, getRows###0, getColCount###0, getRowCount###0, empty###0, getRows###0, getRowCount###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:11:53 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\nimport technology.tabula.extractors.ExtractionAlgorithm;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Table_ESTest extends Table_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public int getRowCount() {\n    return rowCount;\n}",
            "all_field_declaration": "private final String extractionMethod;\nprivate int rowCount = 0;\nprivate int colCount = 0;\nprivate int pageNumber = 0;\nfinal TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();\nprivate List<List<RectangularTextContainer>> memoizedRows = null;\nfinal int row, col;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private int rowCount = 0;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static final Table empty();\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\npublic RectangularTextContainer getCell(int i, int j);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "public_field": "",
            "Method_statement": "getRowCount()",
            "Method_name": "getRowCount",
            "Class_declaration": "public class Table {\n",
            "constructors": "private Table(String extractionMethod) {\n    this.extractionMethod = extractionMethod;\n}public Table(ExtractionAlgorithm extractionAlgorithm) {\n    this(extractionAlgorithm.toString());\n}",
            "all_method_signature": "public static final Table empty();\nprivate Table(String extractionMethod);\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\nprivate List<List<RectangularTextContainer>> computeRows();\npublic RectangularTextContainer getCell(int i, int j);\n CellPosition(int row, int col);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "Class_name": "Table",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Table.java###getRowCount",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.TreeMap;\n\nimport technology.tabula.extractors.ExtractionAlgorithm;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public int getRowCount();",
            "Junit_version": "4",
            "returnType": "int"
        },
        "Test_method": {
            "AllTest2Focal": "[Table_ESTest.java###test00+++empty###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++setPageNumber###1, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test01+++empty###0, Table_ESTest.java###test01+++setPageNumber###1, Table_ESTest.java###test01+++getPageNumber###0, Table_ESTest.java###test01+++assertEquals###2, Table_ESTest.java###test02+++getExtractionMethod###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getColCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getRowCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getPageNumber###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRight###0, Table_ESTest.java###test03+++union###3, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++setFrameFromDiagonal###4, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++verticalOverlapRatio###1, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test04+++empty###0, Table_ESTest.java###test04+++add###3, Table_ESTest.java###test04+++fail###1, Table_ESTest.java###test05+++verifyException###2, Table_ESTest.java###test05+++fail###1, Table_ESTest.java###test06+++empty###0, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test06+++add###3, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test07+++empty###0, Table_ESTest.java###test07+++getCell###2, Table_ESTest.java###test07+++add###3, Table_ESTest.java###test07+++getRows###0, Table_ESTest.java###test08+++empty###0, Table_ESTest.java###test08+++getCell###2, Table_ESTest.java###test08+++add###3, Table_ESTest.java###test08+++getRows###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getColCount###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getRowCount###0, Table_ESTest.java###test09+++empty###0, Table_ESTest.java###test09+++getCell###2, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getRowCount###0, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getColCount###0, Table_ESTest.java###test10+++empty###0, Table_ESTest.java###test10+++getPageNumber###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getColCount###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getRowCount###0, Table_ESTest.java###test11+++getColCount###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getPageNumber###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getRowCount###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:11:53 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Table_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Table\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Table_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Table_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Table_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Table table0 = Table.empty();\n    assertEquals(0, table0.getPageNumber());\n    table0.setPageNumber(1);\n    int int0 = table0.getPageNumber();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    table0.getExtractionMethod();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, table0.getRowCount());\n    assertEquals(0, table0.getPageNumber());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Table table0 = Table.empty();\n    // Undeclared exception!\n    try {\n        table0.add((RectangularTextContainer) null, 2, 2);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Table table0 = null;\n    try {\n        table0 = new Table((ExtractionAlgorithm) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Table\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    assertEquals(0, table0.getColCount());\n    table0.add(rectangularTextContainer0, (-2768), 0);\n    table0.getCell((-2768), 0);\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(666, 666);\n    table0.add(rectangularTextContainer0, 666, 666);\n    // Undeclared exception!\n    table0.getRows();\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.getRows();\n    assertEquals(1, table0.getColCount());\n    assertEquals(1, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.add(rectangularTextContainer0, 0, 0);\n    assertEquals(1, table0.getRowCount());\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Table table0 = Table.empty();\n    int int0 = table0.getPageNumber();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    int int0 = table0.getColCount();\n    assertEquals(0, table0.getPageNumber());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}",
            "TestRelevantFocal": "[empty###0, empty###0, getCell###2, getCell###2, getRowCount###0, add###3, add###3, getExtractionMethod###0, getRowCount###0, getRowCount###0, getColCount###0, empty###0, getExtractionMethod###0, empty###0, getCell###2, getRows###0, getColCount###0, getRowCount###0, empty###0, getRows###0, getRowCount###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:11:53 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\nimport technology.tabula.extractors.ExtractionAlgorithm;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Table_ESTest extends Table_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public RectangularTextContainer getCell(int i, int j) {\n    RectangularTextContainer cell = cells.get(new CellPosition(i, j));\n    return cell != null ? cell : TextChunk.EMPTY;\n}",
            "all_field_declaration": "private final String extractionMethod;\nprivate int rowCount = 0;\nprivate int colCount = 0;\nprivate int pageNumber = 0;\nfinal TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();\nprivate List<List<RectangularTextContainer>> memoizedRows = null;\nfinal int row, col;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "2",
            "Filed": "final TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();",
            "Parameter_type": "int,int",
            "Import_statements": "",
            "public_method_signature": "public static final Table empty();\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\npublic RectangularTextContainer getCell(int i, int j);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "public_field": "",
            "Method_statement": "getCell(int i, int j)",
            "Method_name": "getCell",
            "Class_declaration": "public class Table {\n",
            "constructors": "private Table(String extractionMethod) {\n    this.extractionMethod = extractionMethod;\n}public Table(ExtractionAlgorithm extractionAlgorithm) {\n    this(extractionAlgorithm.toString());\n}",
            "all_method_signature": "public static final Table empty();\nprivate Table(String extractionMethod);\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\nprivate List<List<RectangularTextContainer>> computeRows();\npublic RectangularTextContainer getCell(int i, int j);\n CellPosition(int row, int col);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "Class_name": "Table",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Table.java###getCell",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.TreeMap;\n\nimport technology.tabula.extractors.ExtractionAlgorithm;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public RectangularTextContainer getCell(int i, int j);",
            "Junit_version": "4",
            "returnType": "RectangularTextContainer"
        },
        "Test_method": {
            "AllTest2Focal": "[Table_ESTest.java###test00+++empty###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++setPageNumber###1, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test01+++empty###0, Table_ESTest.java###test01+++setPageNumber###1, Table_ESTest.java###test01+++getPageNumber###0, Table_ESTest.java###test01+++assertEquals###2, Table_ESTest.java###test02+++getExtractionMethod###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getColCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getRowCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getPageNumber###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRight###0, Table_ESTest.java###test03+++union###3, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++setFrameFromDiagonal###4, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++verticalOverlapRatio###1, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test04+++empty###0, Table_ESTest.java###test04+++add###3, Table_ESTest.java###test04+++fail###1, Table_ESTest.java###test05+++verifyException###2, Table_ESTest.java###test05+++fail###1, Table_ESTest.java###test06+++empty###0, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test06+++add###3, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test07+++empty###0, Table_ESTest.java###test07+++getCell###2, Table_ESTest.java###test07+++add###3, Table_ESTest.java###test07+++getRows###0, Table_ESTest.java###test08+++empty###0, Table_ESTest.java###test08+++getCell###2, Table_ESTest.java###test08+++add###3, Table_ESTest.java###test08+++getRows###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getColCount###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getRowCount###0, Table_ESTest.java###test09+++empty###0, Table_ESTest.java###test09+++getCell###2, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getRowCount###0, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getColCount###0, Table_ESTest.java###test10+++empty###0, Table_ESTest.java###test10+++getPageNumber###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getColCount###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getRowCount###0, Table_ESTest.java###test11+++getColCount###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getPageNumber###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getRowCount###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:11:53 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Table_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Table\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Table_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Table_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Table_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Table table0 = Table.empty();\n    assertEquals(0, table0.getPageNumber());\n    table0.setPageNumber(1);\n    int int0 = table0.getPageNumber();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    table0.getExtractionMethod();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, table0.getRowCount());\n    assertEquals(0, table0.getPageNumber());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Table table0 = Table.empty();\n    // Undeclared exception!\n    try {\n        table0.add((RectangularTextContainer) null, 2, 2);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Table table0 = null;\n    try {\n        table0 = new Table((ExtractionAlgorithm) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Table\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    assertEquals(0, table0.getColCount());\n    table0.add(rectangularTextContainer0, (-2768), 0);\n    table0.getCell((-2768), 0);\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(666, 666);\n    table0.add(rectangularTextContainer0, 666, 666);\n    // Undeclared exception!\n    table0.getRows();\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.getRows();\n    assertEquals(1, table0.getColCount());\n    assertEquals(1, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.add(rectangularTextContainer0, 0, 0);\n    assertEquals(1, table0.getRowCount());\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Table table0 = Table.empty();\n    int int0 = table0.getPageNumber();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    int int0 = table0.getColCount();\n    assertEquals(0, table0.getPageNumber());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}",
            "TestRelevantFocal": "[empty###0, empty###0, getCell###2, getCell###2, getRowCount###0, add###3, add###3, getExtractionMethod###0, getRowCount###0, getRowCount###0, getColCount###0, empty###0, getExtractionMethod###0, empty###0, getCell###2, getRows###0, getColCount###0, getRowCount###0, empty###0, getRows###0, getRowCount###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:11:53 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\nimport technology.tabula.extractors.ExtractionAlgorithm;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Table_ESTest extends Table_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void add(RectangularTextContainer chunk, int row, int col) {\n    this.merge(chunk);\n    rowCount = Math.max(rowCount, row + 1);\n    colCount = Math.max(colCount, col + 1);\n    CellPosition cp = new CellPosition(row, col);\n    RectangularTextContainer old = cells.get(cp);\n    if (old != null)\n        chunk.merge(old);\n    cells.put(cp, chunk);\n    this.memoizedRows = null;\n}",
            "all_field_declaration": "private final String extractionMethod;\nprivate int rowCount = 0;\nprivate int colCount = 0;\nprivate int pageNumber = 0;\nfinal TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();\nprivate List<List<RectangularTextContainer>> memoizedRows = null;\nfinal int row, col;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "8",
            "Filed": "private int rowCount = 0;private int colCount = 0;final TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();private List<List<RectangularTextContainer>> memoizedRows = null;",
            "Parameter_type": "RectangularTextContainer,int,int",
            "Import_statements": "",
            "public_method_signature": "public static final Table empty();\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\npublic RectangularTextContainer getCell(int i, int j);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "public_field": "",
            "Method_statement": "add(RectangularTextContainer chunk, int row, int col)",
            "Method_name": "add",
            "Class_declaration": "public class Table {\n",
            "constructors": "private Table(String extractionMethod) {\n    this.extractionMethod = extractionMethod;\n}public Table(ExtractionAlgorithm extractionAlgorithm) {\n    this(extractionAlgorithm.toString());\n}",
            "all_method_signature": "public static final Table empty();\nprivate Table(String extractionMethod);\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\nprivate List<List<RectangularTextContainer>> computeRows();\npublic RectangularTextContainer getCell(int i, int j);\n CellPosition(int row, int col);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "Class_name": "Table",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Table.java###add",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.TreeMap;\n\nimport technology.tabula.extractors.ExtractionAlgorithm;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void add(RectangularTextContainer chunk, int row, int col);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Table_ESTest.java###test00+++empty###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++setPageNumber###1, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test01+++empty###0, Table_ESTest.java###test01+++setPageNumber###1, Table_ESTest.java###test01+++getPageNumber###0, Table_ESTest.java###test01+++assertEquals###2, Table_ESTest.java###test02+++getExtractionMethod###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getColCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getRowCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getPageNumber###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRight###0, Table_ESTest.java###test03+++union###3, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++setFrameFromDiagonal###4, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++verticalOverlapRatio###1, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test04+++empty###0, Table_ESTest.java###test04+++add###3, Table_ESTest.java###test04+++fail###1, Table_ESTest.java###test05+++verifyException###2, Table_ESTest.java###test05+++fail###1, Table_ESTest.java###test06+++empty###0, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test06+++add###3, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test07+++empty###0, Table_ESTest.java###test07+++getCell###2, Table_ESTest.java###test07+++add###3, Table_ESTest.java###test07+++getRows###0, Table_ESTest.java###test08+++empty###0, Table_ESTest.java###test08+++getCell###2, Table_ESTest.java###test08+++add###3, Table_ESTest.java###test08+++getRows###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getColCount###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getRowCount###0, Table_ESTest.java###test09+++empty###0, Table_ESTest.java###test09+++getCell###2, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getRowCount###0, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getColCount###0, Table_ESTest.java###test10+++empty###0, Table_ESTest.java###test10+++getPageNumber###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getColCount###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getRowCount###0, Table_ESTest.java###test11+++getColCount###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getPageNumber###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getRowCount###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:11:53 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Table_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Table\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Table_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Table_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Table_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Table table0 = Table.empty();\n    assertEquals(0, table0.getPageNumber());\n    table0.setPageNumber(1);\n    int int0 = table0.getPageNumber();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    table0.getExtractionMethod();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, table0.getRowCount());\n    assertEquals(0, table0.getPageNumber());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Table table0 = Table.empty();\n    // Undeclared exception!\n    try {\n        table0.add((RectangularTextContainer) null, 2, 2);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Table table0 = null;\n    try {\n        table0 = new Table((ExtractionAlgorithm) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Table\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    assertEquals(0, table0.getColCount());\n    table0.add(rectangularTextContainer0, (-2768), 0);\n    table0.getCell((-2768), 0);\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(666, 666);\n    table0.add(rectangularTextContainer0, 666, 666);\n    // Undeclared exception!\n    table0.getRows();\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.getRows();\n    assertEquals(1, table0.getColCount());\n    assertEquals(1, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.add(rectangularTextContainer0, 0, 0);\n    assertEquals(1, table0.getRowCount());\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Table table0 = Table.empty();\n    int int0 = table0.getPageNumber();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    int int0 = table0.getColCount();\n    assertEquals(0, table0.getPageNumber());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}",
            "TestRelevantFocal": "[empty###0, empty###0, getCell###2, getCell###2, getRowCount###0, add###3, add###3, getExtractionMethod###0, getRowCount###0, getRowCount###0, getColCount###0, empty###0, getExtractionMethod###0, empty###0, getCell###2, getRows###0, getColCount###0, getRowCount###0, empty###0, getRows###0, getRowCount###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:11:53 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\nimport technology.tabula.extractors.ExtractionAlgorithm;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Table_ESTest extends Table_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public List<List<RectangularTextContainer>> getRows() {\n    if (this.memoizedRows == null)\n        this.memoizedRows = computeRows();\n    return this.memoizedRows;\n}",
            "all_field_declaration": "private final String extractionMethod;\nprivate int rowCount = 0;\nprivate int colCount = 0;\nprivate int pageNumber = 0;\nfinal TreeMap<CellPosition, RectangularTextContainer> cells = new TreeMap<>();\nprivate List<List<RectangularTextContainer>> memoizedRows = null;\nfinal int row, col;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "2",
            "Filed": "private List<List<RectangularTextContainer>> memoizedRows = null;",
            "Parameter_type": "",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public static final Table empty();\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\npublic RectangularTextContainer getCell(int i, int j);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "public_field": "",
            "Method_statement": "getRows()",
            "Method_name": "getRows",
            "Class_declaration": "public class Table {\n",
            "constructors": "private Table(String extractionMethod) {\n    this.extractionMethod = extractionMethod;\n}public Table(ExtractionAlgorithm extractionAlgorithm) {\n    this(extractionAlgorithm.toString());\n}",
            "all_method_signature": "public static final Table empty();\nprivate Table(String extractionMethod);\npublic Table(ExtractionAlgorithm extractionAlgorithm);\npublic int getRowCount();\npublic int getColCount();\npublic int getPageNumber();\npublic void setPageNumber(int pageNumber);\npublic String getExtractionMethod();\npublic void add(RectangularTextContainer chunk, int row, int col);\npublic List<List<RectangularTextContainer>> getRows();\nprivate List<List<RectangularTextContainer>> computeRows();\npublic RectangularTextContainer getCell(int i, int j);\n CellPosition(int row, int col);\npublic int hashCode();\npublic boolean equals(Object obj);\npublic int compareTo(CellPosition other);",
            "Class_name": "Table",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Table.java###getRows",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.TreeMap;\n\nimport technology.tabula.extractors.ExtractionAlgorithm;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public List<List<RectangularTextContainer>> getRows();",
            "Junit_version": "4",
            "returnType": "List<List<RectangularTextContainer>>"
        },
        "Test_method": {
            "AllTest2Focal": "[Table_ESTest.java###test00+++empty###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++setPageNumber###1, Table_ESTest.java###test00+++getPageNumber###0, Table_ESTest.java###test00+++assertEquals###2, Table_ESTest.java###test01+++empty###0, Table_ESTest.java###test01+++setPageNumber###1, Table_ESTest.java###test01+++getPageNumber###0, Table_ESTest.java###test01+++assertEquals###2, Table_ESTest.java###test02+++getExtractionMethod###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getColCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getRowCount###0, Table_ESTest.java###test02+++assertEquals###2, Table_ESTest.java###test02+++getPageNumber###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRight###0, Table_ESTest.java###test03+++union###3, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++intersect###3, Table_ESTest.java###test03+++setFrameFromDiagonal###4, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++add###3, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getExtractionMethod###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++verticalOverlapRatio###1, Table_ESTest.java###test03+++getCell###2, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++getColCount###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test03+++empty###0, Table_ESTest.java###test03+++getRows###0, Table_ESTest.java###test03+++assertEquals###2, Table_ESTest.java###test03+++getRowCount###0, Table_ESTest.java###test04+++empty###0, Table_ESTest.java###test04+++add###3, Table_ESTest.java###test04+++fail###1, Table_ESTest.java###test05+++verifyException###2, Table_ESTest.java###test05+++fail###1, Table_ESTest.java###test06+++empty###0, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test06+++add###3, Table_ESTest.java###test06+++getCell###2, Table_ESTest.java###test06+++assertEquals###2, Table_ESTest.java###test06+++getColCount###0, Table_ESTest.java###test07+++empty###0, Table_ESTest.java###test07+++getCell###2, Table_ESTest.java###test07+++add###3, Table_ESTest.java###test07+++getRows###0, Table_ESTest.java###test08+++empty###0, Table_ESTest.java###test08+++getCell###2, Table_ESTest.java###test08+++add###3, Table_ESTest.java###test08+++getRows###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getColCount###0, Table_ESTest.java###test08+++assertEquals###2, Table_ESTest.java###test08+++getRowCount###0, Table_ESTest.java###test09+++empty###0, Table_ESTest.java###test09+++getCell###2, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++add###3, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getRowCount###0, Table_ESTest.java###test09+++assertEquals###2, Table_ESTest.java###test09+++getColCount###0, Table_ESTest.java###test10+++empty###0, Table_ESTest.java###test10+++getPageNumber###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getColCount###0, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++assertEquals###2, Table_ESTest.java###test10+++getRowCount###0, Table_ESTest.java###test11+++getColCount###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getPageNumber###0, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++assertEquals###2, Table_ESTest.java###test11+++getRowCount###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:11:53 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Table_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Table\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Table_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Table_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Table_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Table table0 = Table.empty();\n    assertEquals(0, table0.getPageNumber());\n    table0.setPageNumber(1);\n    int int0 = table0.getPageNumber();\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Table table0 = Table.empty();\n    table0.setPageNumber((-3380));\n    int int0 = table0.getPageNumber();\n    assertEquals((-3380), int0);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    table0.getExtractionMethod();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, table0.getRowCount());\n    assertEquals(0, table0.getPageNumber());\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Table table0 = Table.empty();\n    // Undeclared exception!\n    try {\n        table0.add((RectangularTextContainer) null, 2, 2);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Table table0 = null;\n    try {\n        table0 = new Table((ExtractionAlgorithm) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Table\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    assertEquals(0, table0.getColCount());\n    table0.add(rectangularTextContainer0, (-2768), 0);\n    table0.getCell((-2768), 0);\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(666, 666);\n    table0.add(rectangularTextContainer0, 666, 666);\n    // Undeclared exception!\n    table0.getRows();\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.getRows();\n    assertEquals(1, table0.getColCount());\n    assertEquals(1, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Table table0 = Table.empty();\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(1, 1);\n    table0.add(rectangularTextContainer0, 0, 0);\n    table0.add(rectangularTextContainer0, 0, 0);\n    assertEquals(1, table0.getRowCount());\n    assertEquals(1, table0.getColCount());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Table table0 = Table.empty();\n    int int0 = table0.getPageNumber();\n    assertEquals(0, table0.getColCount());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    Table table0 = new Table(spreadsheetExtractionAlgorithm0);\n    int int0 = table0.getColCount();\n    assertEquals(0, table0.getPageNumber());\n    assertEquals(0, int0);\n    assertEquals(0, table0.getRowCount());\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Table table0 = Table.empty();\n    Table table1 = Table.empty();\n    table0.getRight();\n    Rectangle2D.union(table0, table0, table1);\n    table0.x = (float) 2;\n    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);\n    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);\n    Point point0 = new Point(2, 2);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);\n    point0.y = 0;\n    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);\n    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);\n    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);\n    table0.getRowCount();\n    table0.add(rectangularTextContainer1, 1, 1423);\n    table1.add(rectangularTextContainer0, 1423, 2);\n    table0.getExtractionMethod();\n    table1.getRowCount();\n    table1.getRowCount();\n    table0.getColCount();\n    Table table2 = Table.empty();\n    table2.getExtractionMethod();\n    Table table3 = Table.empty();\n    table3.verticalOverlapRatio(rectangularTextContainer1);\n    table1.getCell(1424, 1424);\n    table3.getRows();\n    table1.getColCount();\n    assertEquals(1424, table1.getRowCount());\n    Table.empty();\n    table3.getRows();\n    assertEquals(0, table3.getRowCount());\n}",
            "TestRelevantFocal": "[empty###0, empty###0, getCell###2, getCell###2, getRowCount###0, add###3, add###3, getExtractionMethod###0, getRowCount###0, getRowCount###0, getColCount###0, empty###0, getExtractionMethod###0, empty###0, getCell###2, getRows###0, getColCount###0, getRowCount###0, empty###0, getRows###0, getRowCount###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:11:53 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Rectangle2D;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.Table;\nimport technology.tabula.extractors.ExtractionAlgorithm;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Table_ESTest extends Table_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static <T extends Comparable<? super T>> void sort(List<T> list) {\n    sort(list, QuickSort.<T>naturalOrder());\n}",
            "all_field_declaration": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\nprivate static final Comparator NATURAL_ORDER = new Comparator() {\n\n    @Override\n    public int compare(Object l, Object r) {\n        return ((Comparable) l).compareTo(r);\n    }\n};",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "List<T>",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public static void sort(List<T> list);\npublic static void sort(List<T> list, Comparator<? super T> comparator);",
            "public_field": "",
            "Method_statement": "sort(List<T> list)",
            "Method_name": "sort",
            "Class_declaration": "public  final class QuickSort {\n",
            "constructors": "private QuickSort() {\n}",
            "all_method_signature": "private QuickSort();\npublic static void sort(List<T> list);\npublic static void sort(List<T> list, Comparator<? super T> comparator);\nprivate static void quicksort(List<T> list, Comparator<? super T> cmp);\nprivate static int partition(List<T> list, Comparator<? super T> cmp, int p, int start, int end);\nprivate static void swap(List<T> list, int i, int j);\nprivate static Comparator<T> naturalOrder();",
            "Class_name": "QuickSort",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/QuickSort.java###sort",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.RandomAccess;\n\nimport java.util.Stack;\n",
            "comment": "\n\t * Sorts the given list according to natural order.\n\t ",
            "packageName": "technology.tabula",
            "method_signature": "public static void sort(List<T> list);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++sort###1, QuickSort_ESTest.java###test0+++assertEquals###2, QuickSort_ESTest.java###test0+++toString###0, QuickSort_ESTest.java###test1+++add###1, QuickSort_ESTest.java###test1+++add###1, QuickSort_ESTest.java###test1+++add###1, QuickSort_ESTest.java###test1+++clone###0, QuickSort_ESTest.java###test1+++sort###1, QuickSort_ESTest.java###test1+++sort###1, QuickSort_ESTest.java###test1+++mock###2, QuickSort_ESTest.java###test1+++compare###2, QuickSort_ESTest.java###test1+++anyInt###0, QuickSort_ESTest.java###test1+++anyInt###0, QuickSort_ESTest.java###test1+++when###1, QuickSort_ESTest.java###test1+++doReturn###5, QuickSort_ESTest.java###test1+++sort###2, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++sort###1, QuickSort_ESTest.java###test2+++assertEquals###2, QuickSort_ESTest.java###test2+++toString###0, QuickSort_ESTest.java###test3+++subList###2, QuickSort_ESTest.java###test3+++sort###1, QuickSort_ESTest.java###test3+++mock###2, QuickSort_ESTest.java###test3+++verifyException###2, QuickSort_ESTest.java###test3+++sort###2, QuickSort_ESTest.java###test3+++fail###1, QuickSort_ESTest.java###test4+++subList###2, QuickSort_ESTest.java###test4+++sort###1, QuickSort_ESTest.java###test4+++verifyException###2, QuickSort_ESTest.java###test4+++sort###1, QuickSort_ESTest.java###test4+++fail###1, QuickSort_ESTest.java###test5+++verifyException###2, QuickSort_ESTest.java###test5+++sort###1, QuickSort_ESTest.java###test5+++fail###1, QuickSort_ESTest.java###test6+++verifyException###2, QuickSort_ESTest.java###test6+++sort###2, QuickSort_ESTest.java###test6+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:01:44 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class QuickSort_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.QuickSort\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(QuickSort_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.QuickSort$1\",\n      \"technology.tabula.QuickSort\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, QuickSort_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(QuickSort_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.QuickSort$1\",\n      \"technology.tabula.QuickSort\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Vector;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport technology.tabula.QuickSort;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/QuickSort_ESTest.java###test1",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    Integer integer1 = new Integer((-3776));\n    vector0.add(integer1);\n    Integer integer2 = new Integer(0);\n    vector0.add(integer2);\n    vector0.add(integer2);\n    QuickSort.sort((List<Integer>) vector0);\n    assertEquals(\"[-3776, 0, 0, 2009]\", vector0.toString());\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    Integer integer1 = new Integer((-3776));\n    vector0.add(integer1);\n    Integer integer2 = new Integer(0);\n    vector0.add(integer2);\n    vector0.clone();\n    QuickSort.sort((List<Integer>) vector0);\n    QuickSort.sort((List<Integer>) vector0);\n    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    doReturn(1, 2009, 2009, 58, 0).when(comparator0).compare(anyInt(), anyInt());\n    QuickSort.sort((List<Integer>) vector0, (Comparator<? super Integer>) comparator0);\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    vector0.add(integer0);\n    Integer integer1 = new Integer(0);\n    vector0.add(integer1);\n    vector0.add(integer0);\n    QuickSort.sort((List<Integer>) vector0);\n    assertEquals(\"[0, 2009, 2009, 2009]\", vector0.toString());\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n    List<Integer> list0 = linkedList0.subList(0, 0);\n    QuickSort.sort((List<Integer>) linkedList0);\n    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    // Undeclared exception!\n    try {\n        QuickSort.sort(list0, (Comparator<? super Integer>) comparator0);\n        fail(\"Expecting exception: ConcurrentModificationException\");\n    } catch (ConcurrentModificationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.SubList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n    List<Integer> list0 = linkedList0.subList(0, 0);\n    QuickSort.sort((List<Integer>) linkedList0);\n    // Undeclared exception!\n    try {\n        QuickSort.sort(list0);\n        fail(\"Expecting exception: ConcurrentModificationException\");\n    } catch (ConcurrentModificationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.SubList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    // Undeclared exception!\n    try {\n        QuickSort.sort((List<Integer>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    // Undeclared exception!\n    try {\n        QuickSort.sort((List<Object>) null, (Comparator<? super Object>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    Integer integer1 = new Integer((-3776));\n    vector0.add(integer1);\n    Integer integer2 = new Integer(0);\n    vector0.add(integer2);\n    vector0.clone();\n    QuickSort.sort((List<Integer>) vector0);\n    QuickSort.sort((List<Integer>) vector0);\n    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    doReturn(1, 2009, 2009, 58, 0).when(comparator0).compare(anyInt(), anyInt());\n    QuickSort.sort((List<Integer>) vector0, (Comparator<? super Integer>) comparator0);\n}",
            "TestRelevantFocal": "[sort###1, sort###1, compare###2, sort###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:01:44 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Comparator;\nimport java.util.ConcurrentModificationException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport technology.tabula.QuickSort;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class QuickSort_ESTest extends QuickSort_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {},
        "Test_method": {
            "AllTest2Focal": "[QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++sort###1, QuickSort_ESTest.java###test0+++assertEquals###2, QuickSort_ESTest.java###test0+++toString###0, QuickSort_ESTest.java###test1+++add###1, QuickSort_ESTest.java###test1+++add###1, QuickSort_ESTest.java###test1+++add###1, QuickSort_ESTest.java###test1+++clone###0, QuickSort_ESTest.java###test1+++sort###1, QuickSort_ESTest.java###test1+++sort###1, QuickSort_ESTest.java###test1+++mock###2, QuickSort_ESTest.java###test1+++compare###2, QuickSort_ESTest.java###test1+++anyInt###0, QuickSort_ESTest.java###test1+++anyInt###0, QuickSort_ESTest.java###test1+++when###1, QuickSort_ESTest.java###test1+++doReturn###5, QuickSort_ESTest.java###test1+++sort###2, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++sort###1, QuickSort_ESTest.java###test2+++assertEquals###2, QuickSort_ESTest.java###test2+++toString###0, QuickSort_ESTest.java###test3+++subList###2, QuickSort_ESTest.java###test3+++sort###1, QuickSort_ESTest.java###test3+++mock###2, QuickSort_ESTest.java###test3+++verifyException###2, QuickSort_ESTest.java###test3+++sort###2, QuickSort_ESTest.java###test3+++fail###1, QuickSort_ESTest.java###test4+++subList###2, QuickSort_ESTest.java###test4+++sort###1, QuickSort_ESTest.java###test4+++verifyException###2, QuickSort_ESTest.java###test4+++sort###1, QuickSort_ESTest.java###test4+++fail###1, QuickSort_ESTest.java###test5+++verifyException###2, QuickSort_ESTest.java###test5+++sort###1, QuickSort_ESTest.java###test5+++fail###1, QuickSort_ESTest.java###test6+++verifyException###2, QuickSort_ESTest.java###test6+++sort###2, QuickSort_ESTest.java###test6+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:01:44 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class QuickSort_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.QuickSort\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(QuickSort_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.QuickSort$1\",\n      \"technology.tabula.QuickSort\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, QuickSort_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(QuickSort_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.QuickSort$1\",\n      \"technology.tabula.QuickSort\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Vector;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport technology.tabula.QuickSort;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/QuickSort_ESTest.java###test1",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    Integer integer1 = new Integer((-3776));\n    vector0.add(integer1);\n    Integer integer2 = new Integer(0);\n    vector0.add(integer2);\n    vector0.add(integer2);\n    QuickSort.sort((List<Integer>) vector0);\n    assertEquals(\"[-3776, 0, 0, 2009]\", vector0.toString());\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    Integer integer1 = new Integer((-3776));\n    vector0.add(integer1);\n    Integer integer2 = new Integer(0);\n    vector0.add(integer2);\n    vector0.clone();\n    QuickSort.sort((List<Integer>) vector0);\n    QuickSort.sort((List<Integer>) vector0);\n    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    doReturn(1, 2009, 2009, 58, 0).when(comparator0).compare(anyInt(), anyInt());\n    QuickSort.sort((List<Integer>) vector0, (Comparator<? super Integer>) comparator0);\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    vector0.add(integer0);\n    Integer integer1 = new Integer(0);\n    vector0.add(integer1);\n    vector0.add(integer0);\n    QuickSort.sort((List<Integer>) vector0);\n    assertEquals(\"[0, 2009, 2009, 2009]\", vector0.toString());\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n    List<Integer> list0 = linkedList0.subList(0, 0);\n    QuickSort.sort((List<Integer>) linkedList0);\n    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    // Undeclared exception!\n    try {\n        QuickSort.sort(list0, (Comparator<? super Integer>) comparator0);\n        fail(\"Expecting exception: ConcurrentModificationException\");\n    } catch (ConcurrentModificationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.SubList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n    List<Integer> list0 = linkedList0.subList(0, 0);\n    QuickSort.sort((List<Integer>) linkedList0);\n    // Undeclared exception!\n    try {\n        QuickSort.sort(list0);\n        fail(\"Expecting exception: ConcurrentModificationException\");\n    } catch (ConcurrentModificationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.SubList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    // Undeclared exception!\n    try {\n        QuickSort.sort((List<Integer>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    // Undeclared exception!\n    try {\n        QuickSort.sort((List<Object>) null, (Comparator<? super Object>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    Integer integer1 = new Integer((-3776));\n    vector0.add(integer1);\n    Integer integer2 = new Integer(0);\n    vector0.add(integer2);\n    vector0.clone();\n    QuickSort.sort((List<Integer>) vector0);\n    QuickSort.sort((List<Integer>) vector0);\n    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    doReturn(1, 2009, 2009, 58, 0).when(comparator0).compare(anyInt(), anyInt());\n    QuickSort.sort((List<Integer>) vector0, (Comparator<? super Integer>) comparator0);\n}",
            "TestRelevantFocal": "[sort###1, sort###1, compare###2, sort###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:01:44 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Comparator;\nimport java.util.ConcurrentModificationException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport technology.tabula.QuickSort;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class QuickSort_ESTest extends QuickSort_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static <T> void sort(List<T> list, Comparator<? super T> comparator) {\n    if (list instanceof RandomAccess) {\n        quicksort(list, comparator);\n    } else {\n        List<T> copy = new ArrayList<>(list);\n        quicksort(copy, comparator);\n        list.clear();\n        list.addAll(copy);\n    }\n}",
            "all_field_declaration": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\nprivate static final Comparator NATURAL_ORDER = new Comparator() {\n\n    @Override\n    public int compare(Object l, Object r) {\n        return ((Comparable) l).compareTo(r);\n    }\n};",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "List<T>,Comparator<? super T>",
            "Import_statements": "import java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.RandomAccess;\n",
            "public_method_signature": "public static void sort(List<T> list);\npublic static void sort(List<T> list, Comparator<? super T> comparator);",
            "public_field": "",
            "Method_statement": "sort(List<T> list, Comparator<? super T> comparator)",
            "Method_name": "sort",
            "Class_declaration": "public  final class QuickSort {\n",
            "constructors": "private QuickSort() {\n}",
            "all_method_signature": "private QuickSort();\npublic static void sort(List<T> list);\npublic static void sort(List<T> list, Comparator<? super T> comparator);\nprivate static void quicksort(List<T> list, Comparator<? super T> cmp);\nprivate static int partition(List<T> list, Comparator<? super T> cmp, int p, int start, int end);\nprivate static void swap(List<T> list, int i, int j);\nprivate static Comparator<T> naturalOrder();",
            "Class_name": "QuickSort",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/QuickSort.java###sort",
            "Parameter_num": "2",
            "contextMethod": "public static <T> void sort(List<T> list, Comparator<? super T> comparator) {\n    if (list instanceof RandomAccess) {\n        quicksort(list, comparator);\n    } else {\n        List<T> copy = new ArrayList<>(list);\n        quicksort(copy, comparator);\n        list.clear();\n        list.addAll(copy);\n    }\n}",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.RandomAccess;\n\nimport java.util.Stack;\n",
            "comment": "\n\t * Sorts the given list using the given comparator.\n\t ",
            "packageName": "technology.tabula",
            "method_signature": "public static void sort(List<T> list, Comparator<? super T> comparator);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++add###1, QuickSort_ESTest.java###test0+++sort###1, QuickSort_ESTest.java###test0+++assertEquals###2, QuickSort_ESTest.java###test0+++toString###0, QuickSort_ESTest.java###test1+++add###1, QuickSort_ESTest.java###test1+++add###1, QuickSort_ESTest.java###test1+++add###1, QuickSort_ESTest.java###test1+++clone###0, QuickSort_ESTest.java###test1+++sort###1, QuickSort_ESTest.java###test1+++sort###1, QuickSort_ESTest.java###test1+++mock###2, QuickSort_ESTest.java###test1+++compare###2, QuickSort_ESTest.java###test1+++anyInt###0, QuickSort_ESTest.java###test1+++anyInt###0, QuickSort_ESTest.java###test1+++when###1, QuickSort_ESTest.java###test1+++doReturn###5, QuickSort_ESTest.java###test1+++sort###2, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++add###1, QuickSort_ESTest.java###test2+++sort###1, QuickSort_ESTest.java###test2+++assertEquals###2, QuickSort_ESTest.java###test2+++toString###0, QuickSort_ESTest.java###test3+++subList###2, QuickSort_ESTest.java###test3+++sort###1, QuickSort_ESTest.java###test3+++mock###2, QuickSort_ESTest.java###test3+++verifyException###2, QuickSort_ESTest.java###test3+++sort###2, QuickSort_ESTest.java###test3+++fail###1, QuickSort_ESTest.java###test4+++subList###2, QuickSort_ESTest.java###test4+++sort###1, QuickSort_ESTest.java###test4+++verifyException###2, QuickSort_ESTest.java###test4+++sort###1, QuickSort_ESTest.java###test4+++fail###1, QuickSort_ESTest.java###test5+++verifyException###2, QuickSort_ESTest.java###test5+++sort###1, QuickSort_ESTest.java###test5+++fail###1, QuickSort_ESTest.java###test6+++verifyException###2, QuickSort_ESTest.java###test6+++sort###2, QuickSort_ESTest.java###test6+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:01:44 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\n@EvoSuiteClassExclude\npublic class QuickSort_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.QuickSort\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(QuickSort_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.QuickSort$1\",\n      \"technology.tabula.QuickSort\"\n    );\n  } \n  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { \n    mock(Class.forName(\"java.util.Comparator\", false, QuickSort_ESTest_scaffolding.class.getClassLoader()));\n  }\n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(QuickSort_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.QuickSort$1\",\n      \"technology.tabula.QuickSort\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Vector;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport technology.tabula.QuickSort;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/QuickSort_ESTest.java###test1",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    Integer integer1 = new Integer((-3776));\n    vector0.add(integer1);\n    Integer integer2 = new Integer(0);\n    vector0.add(integer2);\n    vector0.add(integer2);\n    QuickSort.sort((List<Integer>) vector0);\n    assertEquals(\"[-3776, 0, 0, 2009]\", vector0.toString());\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    Integer integer1 = new Integer((-3776));\n    vector0.add(integer1);\n    Integer integer2 = new Integer(0);\n    vector0.add(integer2);\n    vector0.clone();\n    QuickSort.sort((List<Integer>) vector0);\n    QuickSort.sort((List<Integer>) vector0);\n    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    doReturn(1, 2009, 2009, 58, 0).when(comparator0).compare(anyInt(), anyInt());\n    QuickSort.sort((List<Integer>) vector0, (Comparator<? super Integer>) comparator0);\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    vector0.add(integer0);\n    Integer integer1 = new Integer(0);\n    vector0.add(integer1);\n    vector0.add(integer0);\n    QuickSort.sort((List<Integer>) vector0);\n    assertEquals(\"[0, 2009, 2009, 2009]\", vector0.toString());\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n    List<Integer> list0 = linkedList0.subList(0, 0);\n    QuickSort.sort((List<Integer>) linkedList0);\n    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    // Undeclared exception!\n    try {\n        QuickSort.sort(list0, (Comparator<? super Integer>) comparator0);\n        fail(\"Expecting exception: ConcurrentModificationException\");\n    } catch (ConcurrentModificationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.SubList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n    List<Integer> list0 = linkedList0.subList(0, 0);\n    QuickSort.sort((List<Integer>) linkedList0);\n    // Undeclared exception!\n    try {\n        QuickSort.sort(list0);\n        fail(\"Expecting exception: ConcurrentModificationException\");\n    } catch (ConcurrentModificationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.SubList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    // Undeclared exception!\n    try {\n        QuickSort.sort((List<Integer>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    // Undeclared exception!\n    try {\n        QuickSort.sort((List<Object>) null, (Comparator<? super Object>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.util.ArrayList\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Integer integer0 = new Integer(2009);\n    vector0.add(integer0);\n    Integer integer1 = new Integer((-3776));\n    vector0.add(integer1);\n    Integer integer2 = new Integer(0);\n    vector0.add(integer2);\n    vector0.clone();\n    QuickSort.sort((List<Integer>) vector0);\n    QuickSort.sort((List<Integer>) vector0);\n    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    doReturn(1, 2009, 2009, 58, 0).when(comparator0).compare(anyInt(), anyInt());\n    QuickSort.sort((List<Integer>) vector0, (Comparator<? super Integer>) comparator0);\n}",
            "TestRelevantFocal": "[sort###1, sort###1, compare###2, sort###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:01:44 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Comparator;\nimport java.util.ConcurrentModificationException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport technology.tabula.QuickSort;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class QuickSort_ESTest extends QuickSort_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setTextElements(List<TextChunk> textChunks) {\n    this.textChunks = textChunks;\n}",
            "all_field_declaration": "List<TextChunk> textChunks = new ArrayList<>();\npublic static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "List<TextChunk> textChunks = new ArrayList<>();",
            "Parameter_type": "List<TextChunk>",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();",
            "public_field": "public static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "Method_statement": "setTextElements(List<TextChunk> textChunks)",
            "Method_name": "setTextElements",
            "Class_declaration": "public class Line {\n",
            "constructors": "",
            "all_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();\n static Line removeRepeatedCharacters(Line line, Character c, int minRunLength);",
            "Class_name": "Line",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Line.java###setTextElements",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void setTextElements(List<TextChunk> textChunks);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Line_ESTest.java###test00+++squeeze###2, Line_ESTest.java###test00+++setTextElements###1, Line_ESTest.java###test00+++addTextChunk###1, Line_ESTest.java###test00+++addTextChunk###2, Line_ESTest.java###test00+++assertEquals###3, Line_ESTest.java###test01+++addTextChunk###1, Line_ESTest.java###test01+++removeRepeatedCharacters###3, Line_ESTest.java###test01+++assertEquals###3, Line_ESTest.java###test01+++assertTrue###1, Line_ESTest.java###test01+++equals###1, Line_ESTest.java###test02+++valueOf###1, Line_ESTest.java###test02+++squeeze###2, Line_ESTest.java###test02+++setTextElements###1, Line_ESTest.java###test02+++removeRepeatedCharacters###3, Line_ESTest.java###test02+++assertEquals###3, Line_ESTest.java###test03+++setFrameFromCenter###4, Line_ESTest.java###test03+++addTextChunk###1, Line_ESTest.java###test03+++removeRepeatedCharacters###3, Line_ESTest.java###test03+++assertEquals###3, Line_ESTest.java###test03+++assertNotSame###2, Line_ESTest.java###test04+++addTextChunk###1, Line_ESTest.java###test04+++valueOf###1, Line_ESTest.java###test04+++removeRepeatedCharacters###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++getMaxY###0, Line_ESTest.java###test05+++setTextElements###1, Line_ESTest.java###test05+++getTextElements###0, Line_ESTest.java###test05+++assertNull###1, Line_ESTest.java###test06+++addTextChunk###2, Line_ESTest.java###test06+++getTextElements###0, Line_ESTest.java###test06+++assertEquals###2, Line_ESTest.java###test06+++size###0, Line_ESTest.java###test07+++addTextChunk###2, Line_ESTest.java###test07+++verifyException###2, Line_ESTest.java###test07+++toString###0, Line_ESTest.java###test07+++fail###1, Line_ESTest.java###test08+++valueOf###1, Line_ESTest.java###test08+++verifyException###2, Line_ESTest.java###test08+++removeRepeatedCharacters###3, Line_ESTest.java###test08+++fail###1, Line_ESTest.java###test09+++addTextChunk###1, Line_ESTest.java###test09+++fail###1, Line_ESTest.java###test10+++addTextChunk###2, Line_ESTest.java###test11+++verifyException###2, Line_ESTest.java###test11+++addTextChunk###2, Line_ESTest.java###test11+++fail###1, Line_ESTest.java###test12+++addTextChunk###2, Line_ESTest.java###test12+++valueOf###1, Line_ESTest.java###test12+++removeRepeatedCharacters###3, Line_ESTest.java###test12+++assertNotSame###2, Line_ESTest.java###test13+++addTextChunk###2, Line_ESTest.java###test13+++toString###0, Line_ESTest.java###test13+++assertEquals###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++assertEquals###3, Line_ESTest.java###test15+++verifyException###2, Line_ESTest.java###test15+++addTextChunk###2, Line_ESTest.java###test15+++fail###1, Line_ESTest.java###test16+++getTextElements###0, Line_ESTest.java###test16+++setTextElements###1, Line_ESTest.java###test16+++assertEquals###3, Line_ESTest.java###test16+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:53:47 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Line_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Line\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Line_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.HasText\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Line_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.List;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Line_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);\n    line0.setTextElements(list0);\n    line0.addTextChunk(textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(236.93358F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(4684.6978F, 0.0F, 0.0F, (-1382.9923F));\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('\\'');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, (-3689));\n    assertEquals(4684.6978F, line0.y, 0.01F);\n    assertTrue(line1.equals((Object) line0));\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Line line0 = new Line();\n    Character character0 = Character.valueOf('3');\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, '3');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1019));\n    line0.setTextElements(list0);\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 11);\n    assertEquals(1.0F, line1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    textChunk0.setFrameFromCenter((-1.0), 1386.87839472147, (double) 0.0F, (double) 0.0F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('o');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 3);\n    assertEquals(2773.7568F, line1.height, 0.01F);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk((-588.74023F), (-2790.2083F), (-1.0F), 0.3F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = Character.valueOf('\\\"');\n    Line.removeRepeatedCharacters(line0, character0, (-936));\n    assertEquals(0.3F, line0.height, 0.01F);\n    assertEquals((-588.4402343630791), line0.getMaxY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Line line0 = new Line();\n    line0.setTextElements((List<TextChunk>) null);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    line0.addTextChunk(339, textChunk0);\n    // Undeclared exception!\n    try {\n        line0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Character character0 = Character.valueOf('F');\n    // Undeclared exception!\n    try {\n        Line.removeRepeatedCharacters((Line) null, character0, 'F');\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    line0.addTextChunk(2147483645, textChunk0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk(13, (TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    Character character0 = Character.valueOf('T');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 0);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    String string0 = line0.toString();\n    assertEquals(\"technology.tabula.Line[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,chunks='', ]\", string0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(0.0F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((-2863), textChunk0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // i can't be less than 0\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Line line0 = new Line();\n    List<TextChunk> list0 = line0.getTextElements();\n    line0.setTextElements(list0);\n    assertEquals(0.0, line0.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);\n    line0.setTextElements(list0);\n    line0.addTextChunk(textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(236.93358F, line0.height, 0.01F);\n}",
            "TestRelevantFocal": "[setTextElements###1, addTextChunk###1, addTextChunk###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:53:47 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Line_ESTest extends Line_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void addTextChunk(TextChunk textChunk) {\n    if (this.textChunks.isEmpty()) {\n        this.setRect(textChunk);\n    } else {\n        this.merge(textChunk);\n    }\n    this.textChunks.add(textChunk);\n}",
            "all_field_declaration": "List<TextChunk> textChunks = new ArrayList<>();\npublic static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "2",
            "Filed": "List<TextChunk> textChunks = new ArrayList<>();",
            "Parameter_type": "TextChunk",
            "Import_statements": "",
            "public_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();",
            "public_field": "public static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "Method_statement": "addTextChunk(TextChunk textChunk)",
            "Method_name": "addTextChunk",
            "Class_declaration": "public class Line {\n",
            "constructors": "",
            "all_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();\n static Line removeRepeatedCharacters(Line line, Character c, int minRunLength);",
            "Class_name": "Line",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Line.java###addTextChunk",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void addTextChunk(TextChunk textChunk);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Line_ESTest.java###test00+++squeeze###2, Line_ESTest.java###test00+++setTextElements###1, Line_ESTest.java###test00+++addTextChunk###1, Line_ESTest.java###test00+++addTextChunk###2, Line_ESTest.java###test00+++assertEquals###3, Line_ESTest.java###test01+++addTextChunk###1, Line_ESTest.java###test01+++removeRepeatedCharacters###3, Line_ESTest.java###test01+++assertEquals###3, Line_ESTest.java###test01+++assertTrue###1, Line_ESTest.java###test01+++equals###1, Line_ESTest.java###test02+++valueOf###1, Line_ESTest.java###test02+++squeeze###2, Line_ESTest.java###test02+++setTextElements###1, Line_ESTest.java###test02+++removeRepeatedCharacters###3, Line_ESTest.java###test02+++assertEquals###3, Line_ESTest.java###test03+++setFrameFromCenter###4, Line_ESTest.java###test03+++addTextChunk###1, Line_ESTest.java###test03+++removeRepeatedCharacters###3, Line_ESTest.java###test03+++assertEquals###3, Line_ESTest.java###test03+++assertNotSame###2, Line_ESTest.java###test04+++addTextChunk###1, Line_ESTest.java###test04+++valueOf###1, Line_ESTest.java###test04+++removeRepeatedCharacters###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++getMaxY###0, Line_ESTest.java###test05+++setTextElements###1, Line_ESTest.java###test05+++getTextElements###0, Line_ESTest.java###test05+++assertNull###1, Line_ESTest.java###test06+++addTextChunk###2, Line_ESTest.java###test06+++getTextElements###0, Line_ESTest.java###test06+++assertEquals###2, Line_ESTest.java###test06+++size###0, Line_ESTest.java###test07+++addTextChunk###2, Line_ESTest.java###test07+++verifyException###2, Line_ESTest.java###test07+++toString###0, Line_ESTest.java###test07+++fail###1, Line_ESTest.java###test08+++valueOf###1, Line_ESTest.java###test08+++verifyException###2, Line_ESTest.java###test08+++removeRepeatedCharacters###3, Line_ESTest.java###test08+++fail###1, Line_ESTest.java###test09+++addTextChunk###1, Line_ESTest.java###test09+++fail###1, Line_ESTest.java###test10+++addTextChunk###2, Line_ESTest.java###test11+++verifyException###2, Line_ESTest.java###test11+++addTextChunk###2, Line_ESTest.java###test11+++fail###1, Line_ESTest.java###test12+++addTextChunk###2, Line_ESTest.java###test12+++valueOf###1, Line_ESTest.java###test12+++removeRepeatedCharacters###3, Line_ESTest.java###test12+++assertNotSame###2, Line_ESTest.java###test13+++addTextChunk###2, Line_ESTest.java###test13+++toString###0, Line_ESTest.java###test13+++assertEquals###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++assertEquals###3, Line_ESTest.java###test15+++verifyException###2, Line_ESTest.java###test15+++addTextChunk###2, Line_ESTest.java###test15+++fail###1, Line_ESTest.java###test16+++getTextElements###0, Line_ESTest.java###test16+++setTextElements###1, Line_ESTest.java###test16+++assertEquals###3, Line_ESTest.java###test16+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:53:47 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Line_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Line\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Line_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.HasText\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Line_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.List;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Line_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);\n    line0.setTextElements(list0);\n    line0.addTextChunk(textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(236.93358F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(4684.6978F, 0.0F, 0.0F, (-1382.9923F));\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('\\'');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, (-3689));\n    assertEquals(4684.6978F, line0.y, 0.01F);\n    assertTrue(line1.equals((Object) line0));\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Line line0 = new Line();\n    Character character0 = Character.valueOf('3');\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, '3');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1019));\n    line0.setTextElements(list0);\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 11);\n    assertEquals(1.0F, line1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    textChunk0.setFrameFromCenter((-1.0), 1386.87839472147, (double) 0.0F, (double) 0.0F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('o');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 3);\n    assertEquals(2773.7568F, line1.height, 0.01F);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk((-588.74023F), (-2790.2083F), (-1.0F), 0.3F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = Character.valueOf('\\\"');\n    Line.removeRepeatedCharacters(line0, character0, (-936));\n    assertEquals(0.3F, line0.height, 0.01F);\n    assertEquals((-588.4402343630791), line0.getMaxY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Line line0 = new Line();\n    line0.setTextElements((List<TextChunk>) null);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    line0.addTextChunk(339, textChunk0);\n    // Undeclared exception!\n    try {\n        line0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Character character0 = Character.valueOf('F');\n    // Undeclared exception!\n    try {\n        Line.removeRepeatedCharacters((Line) null, character0, 'F');\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    line0.addTextChunk(2147483645, textChunk0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk(13, (TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    Character character0 = Character.valueOf('T');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 0);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    String string0 = line0.toString();\n    assertEquals(\"technology.tabula.Line[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,chunks='', ]\", string0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(0.0F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((-2863), textChunk0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // i can't be less than 0\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Line line0 = new Line();\n    List<TextChunk> list0 = line0.getTextElements();\n    line0.setTextElements(list0);\n    assertEquals(0.0, line0.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);\n    line0.setTextElements(list0);\n    line0.addTextChunk(textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(236.93358F, line0.height, 0.01F);\n}",
            "TestRelevantFocal": "[setTextElements###1, addTextChunk###1, addTextChunk###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:53:47 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Line_ESTest extends Line_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void addTextChunk(int i, TextChunk textChunk) {\n    if (i < 0) {\n        throw new IllegalArgumentException(\"i can't be less than 0\");\n    }\n    int s = this.textChunks.size();\n    if (s < i + 1) {\n        for (; s <= i; s++) {\n            this.textChunks.add(null);\n        }\n        this.textChunks.set(i, textChunk);\n    } else {\n        this.textChunks.set(i, this.textChunks.get(i).merge(textChunk));\n    }\n    this.merge(textChunk);\n}",
            "all_field_declaration": "List<TextChunk> textChunks = new ArrayList<>();\npublic static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "List<TextChunk> textChunks = new ArrayList<>();",
            "Parameter_type": "int,TextChunk",
            "Import_statements": "",
            "public_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();",
            "public_field": "public static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "Method_statement": "addTextChunk(int i, TextChunk textChunk)",
            "Method_name": "addTextChunk",
            "Class_declaration": "public class Line {\n",
            "constructors": "",
            "all_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();\n static Line removeRepeatedCharacters(Line line, Character c, int minRunLength);",
            "Class_name": "Line",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Line.java###addTextChunk",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void addTextChunk(int i, TextChunk textChunk);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Line_ESTest.java###test00+++squeeze###2, Line_ESTest.java###test00+++setTextElements###1, Line_ESTest.java###test00+++addTextChunk###1, Line_ESTest.java###test00+++addTextChunk###2, Line_ESTest.java###test00+++assertEquals###3, Line_ESTest.java###test01+++addTextChunk###1, Line_ESTest.java###test01+++removeRepeatedCharacters###3, Line_ESTest.java###test01+++assertEquals###3, Line_ESTest.java###test01+++assertTrue###1, Line_ESTest.java###test01+++equals###1, Line_ESTest.java###test02+++valueOf###1, Line_ESTest.java###test02+++squeeze###2, Line_ESTest.java###test02+++setTextElements###1, Line_ESTest.java###test02+++removeRepeatedCharacters###3, Line_ESTest.java###test02+++assertEquals###3, Line_ESTest.java###test03+++setFrameFromCenter###4, Line_ESTest.java###test03+++addTextChunk###1, Line_ESTest.java###test03+++removeRepeatedCharacters###3, Line_ESTest.java###test03+++assertEquals###3, Line_ESTest.java###test03+++assertNotSame###2, Line_ESTest.java###test04+++addTextChunk###1, Line_ESTest.java###test04+++valueOf###1, Line_ESTest.java###test04+++removeRepeatedCharacters###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++getMaxY###0, Line_ESTest.java###test05+++setTextElements###1, Line_ESTest.java###test05+++getTextElements###0, Line_ESTest.java###test05+++assertNull###1, Line_ESTest.java###test06+++addTextChunk###2, Line_ESTest.java###test06+++getTextElements###0, Line_ESTest.java###test06+++assertEquals###2, Line_ESTest.java###test06+++size###0, Line_ESTest.java###test07+++addTextChunk###2, Line_ESTest.java###test07+++verifyException###2, Line_ESTest.java###test07+++toString###0, Line_ESTest.java###test07+++fail###1, Line_ESTest.java###test08+++valueOf###1, Line_ESTest.java###test08+++verifyException###2, Line_ESTest.java###test08+++removeRepeatedCharacters###3, Line_ESTest.java###test08+++fail###1, Line_ESTest.java###test09+++addTextChunk###1, Line_ESTest.java###test09+++fail###1, Line_ESTest.java###test10+++addTextChunk###2, Line_ESTest.java###test11+++verifyException###2, Line_ESTest.java###test11+++addTextChunk###2, Line_ESTest.java###test11+++fail###1, Line_ESTest.java###test12+++addTextChunk###2, Line_ESTest.java###test12+++valueOf###1, Line_ESTest.java###test12+++removeRepeatedCharacters###3, Line_ESTest.java###test12+++assertNotSame###2, Line_ESTest.java###test13+++addTextChunk###2, Line_ESTest.java###test13+++toString###0, Line_ESTest.java###test13+++assertEquals###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++assertEquals###3, Line_ESTest.java###test15+++verifyException###2, Line_ESTest.java###test15+++addTextChunk###2, Line_ESTest.java###test15+++fail###1, Line_ESTest.java###test16+++getTextElements###0, Line_ESTest.java###test16+++setTextElements###1, Line_ESTest.java###test16+++assertEquals###3, Line_ESTest.java###test16+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:53:47 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Line_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Line\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Line_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.HasText\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Line_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.List;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Line_ESTest.java###test00",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);\n    line0.setTextElements(list0);\n    line0.addTextChunk(textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(236.93358F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(4684.6978F, 0.0F, 0.0F, (-1382.9923F));\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('\\'');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, (-3689));\n    assertEquals(4684.6978F, line0.y, 0.01F);\n    assertTrue(line1.equals((Object) line0));\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Line line0 = new Line();\n    Character character0 = Character.valueOf('3');\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, '3');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1019));\n    line0.setTextElements(list0);\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 11);\n    assertEquals(1.0F, line1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    textChunk0.setFrameFromCenter((-1.0), 1386.87839472147, (double) 0.0F, (double) 0.0F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('o');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 3);\n    assertEquals(2773.7568F, line1.height, 0.01F);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk((-588.74023F), (-2790.2083F), (-1.0F), 0.3F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = Character.valueOf('\\\"');\n    Line.removeRepeatedCharacters(line0, character0, (-936));\n    assertEquals(0.3F, line0.height, 0.01F);\n    assertEquals((-588.4402343630791), line0.getMaxY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Line line0 = new Line();\n    line0.setTextElements((List<TextChunk>) null);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    line0.addTextChunk(339, textChunk0);\n    // Undeclared exception!\n    try {\n        line0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Character character0 = Character.valueOf('F');\n    // Undeclared exception!\n    try {\n        Line.removeRepeatedCharacters((Line) null, character0, 'F');\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    line0.addTextChunk(2147483645, textChunk0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk(13, (TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    Character character0 = Character.valueOf('T');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 0);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    String string0 = line0.toString();\n    assertEquals(\"technology.tabula.Line[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,chunks='', ]\", string0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(0.0F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((-2863), textChunk0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // i can't be less than 0\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Line line0 = new Line();\n    List<TextChunk> list0 = line0.getTextElements();\n    line0.setTextElements(list0);\n    assertEquals(0.0, line0.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);\n    line0.setTextElements(list0);\n    line0.addTextChunk(textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(236.93358F, line0.height, 0.01F);\n}",
            "TestRelevantFocal": "[setTextElements###1, addTextChunk###1, addTextChunk###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:53:47 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Line_ESTest extends Line_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "static Line removeRepeatedCharacters(Line line, Character c, int minRunLength) {\n    Line rv = new Line();\n    for (TextChunk t : line.getTextElements()) {\n        for (TextChunk r : t.squeeze(c, minRunLength)) {\n            rv.addTextChunk(r);\n        }\n    }\n    return rv;\n}",
            "all_field_declaration": "List<TextChunk> textChunks = new ArrayList<>();\npublic static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "Line,Character,int",
            "Import_statements": "",
            "public_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();",
            "public_field": "public static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "Method_statement": "removeRepeatedCharacters(Line line, Character c, int minRunLength)",
            "Method_name": "removeRepeatedCharacters",
            "Class_declaration": "public class Line {\n",
            "constructors": "",
            "all_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();\n static Line removeRepeatedCharacters(Line line, Character c, int minRunLength);",
            "Class_name": "Line",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Line.java###removeRepeatedCharacters",
            "Parameter_num": "3",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": " static Line removeRepeatedCharacters(Line line, Character c, int minRunLength);",
            "Junit_version": "4",
            "returnType": "Line"
        },
        "Test_method": {
            "AllTest2Focal": "[Line_ESTest.java###test00+++squeeze###2, Line_ESTest.java###test00+++setTextElements###1, Line_ESTest.java###test00+++addTextChunk###1, Line_ESTest.java###test00+++addTextChunk###2, Line_ESTest.java###test00+++assertEquals###3, Line_ESTest.java###test01+++addTextChunk###1, Line_ESTest.java###test01+++removeRepeatedCharacters###3, Line_ESTest.java###test01+++assertEquals###3, Line_ESTest.java###test01+++assertTrue###1, Line_ESTest.java###test01+++equals###1, Line_ESTest.java###test02+++valueOf###1, Line_ESTest.java###test02+++squeeze###2, Line_ESTest.java###test02+++setTextElements###1, Line_ESTest.java###test02+++removeRepeatedCharacters###3, Line_ESTest.java###test02+++assertEquals###3, Line_ESTest.java###test03+++setFrameFromCenter###4, Line_ESTest.java###test03+++addTextChunk###1, Line_ESTest.java###test03+++removeRepeatedCharacters###3, Line_ESTest.java###test03+++assertEquals###3, Line_ESTest.java###test03+++assertNotSame###2, Line_ESTest.java###test04+++addTextChunk###1, Line_ESTest.java###test04+++valueOf###1, Line_ESTest.java###test04+++removeRepeatedCharacters###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++getMaxY###0, Line_ESTest.java###test05+++setTextElements###1, Line_ESTest.java###test05+++getTextElements###0, Line_ESTest.java###test05+++assertNull###1, Line_ESTest.java###test06+++addTextChunk###2, Line_ESTest.java###test06+++getTextElements###0, Line_ESTest.java###test06+++assertEquals###2, Line_ESTest.java###test06+++size###0, Line_ESTest.java###test07+++addTextChunk###2, Line_ESTest.java###test07+++verifyException###2, Line_ESTest.java###test07+++toString###0, Line_ESTest.java###test07+++fail###1, Line_ESTest.java###test08+++valueOf###1, Line_ESTest.java###test08+++verifyException###2, Line_ESTest.java###test08+++removeRepeatedCharacters###3, Line_ESTest.java###test08+++fail###1, Line_ESTest.java###test09+++addTextChunk###1, Line_ESTest.java###test09+++fail###1, Line_ESTest.java###test10+++addTextChunk###2, Line_ESTest.java###test11+++verifyException###2, Line_ESTest.java###test11+++addTextChunk###2, Line_ESTest.java###test11+++fail###1, Line_ESTest.java###test12+++addTextChunk###2, Line_ESTest.java###test12+++valueOf###1, Line_ESTest.java###test12+++removeRepeatedCharacters###3, Line_ESTest.java###test12+++assertNotSame###2, Line_ESTest.java###test13+++addTextChunk###2, Line_ESTest.java###test13+++toString###0, Line_ESTest.java###test13+++assertEquals###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++assertEquals###3, Line_ESTest.java###test15+++verifyException###2, Line_ESTest.java###test15+++addTextChunk###2, Line_ESTest.java###test15+++fail###1, Line_ESTest.java###test16+++getTextElements###0, Line_ESTest.java###test16+++setTextElements###1, Line_ESTest.java###test16+++assertEquals###3, Line_ESTest.java###test16+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:53:47 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Line_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Line\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Line_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.HasText\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Line_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Line_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);\n    line0.setTextElements(list0);\n    line0.addTextChunk(textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(236.93358F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(4684.6978F, 0.0F, 0.0F, (-1382.9923F));\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('\\'');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, (-3689));\n    assertEquals(4684.6978F, line0.y, 0.01F);\n    assertTrue(line1.equals((Object) line0));\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Line line0 = new Line();\n    Character character0 = Character.valueOf('3');\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, '3');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1019));\n    line0.setTextElements(list0);\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 11);\n    assertEquals(1.0F, line1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    textChunk0.setFrameFromCenter((-1.0), 1386.87839472147, (double) 0.0F, (double) 0.0F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('o');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 3);\n    assertEquals(2773.7568F, line1.height, 0.01F);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk((-588.74023F), (-2790.2083F), (-1.0F), 0.3F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = Character.valueOf('\\\"');\n    Line.removeRepeatedCharacters(line0, character0, (-936));\n    assertEquals(0.3F, line0.height, 0.01F);\n    assertEquals((-588.4402343630791), line0.getMaxY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Line line0 = new Line();\n    line0.setTextElements((List<TextChunk>) null);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    line0.addTextChunk(339, textChunk0);\n    // Undeclared exception!\n    try {\n        line0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Character character0 = Character.valueOf('F');\n    // Undeclared exception!\n    try {\n        Line.removeRepeatedCharacters((Line) null, character0, 'F');\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    line0.addTextChunk(2147483645, textChunk0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk(13, (TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    Character character0 = Character.valueOf('T');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 0);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    String string0 = line0.toString();\n    assertEquals(\"technology.tabula.Line[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,chunks='', ]\", string0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(0.0F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((-2863), textChunk0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // i can't be less than 0\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Line line0 = new Line();\n    List<TextChunk> list0 = line0.getTextElements();\n    line0.setTextElements(list0);\n    assertEquals(0.0, line0.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk((-588.74023F), (-2790.2083F), (-1.0F), 0.3F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = Character.valueOf('\\\"');\n    Line.removeRepeatedCharacters(line0, character0, (-936));\n    assertEquals(0.3F, line0.height, 0.01F);\n    assertEquals((-588.4402343630791), line0.getMaxY(), 0.01);\n}",
            "TestRelevantFocal": "[addTextChunk###1, removeRepeatedCharacters###3]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:53:47 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Line_ESTest extends Line_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public List<TextChunk> getTextElements() {\n    return textChunks;\n}",
            "all_field_declaration": "List<TextChunk> textChunks = new ArrayList<>();\npublic static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "List<TextChunk> textChunks = new ArrayList<>();",
            "Parameter_type": "",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();",
            "public_field": "public static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "Method_statement": "getTextElements()",
            "Method_name": "getTextElements",
            "Class_declaration": "public class Line {\n",
            "constructors": "",
            "all_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();\n static Line removeRepeatedCharacters(Line line, Character c, int minRunLength);",
            "Class_name": "Line",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Line.java###getTextElements",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public List<TextChunk> getTextElements();",
            "Junit_version": "4",
            "returnType": "List<TextChunk>"
        },
        "Test_method": {
            "AllTest2Focal": "[Line_ESTest.java###test00+++squeeze###2, Line_ESTest.java###test00+++setTextElements###1, Line_ESTest.java###test00+++addTextChunk###1, Line_ESTest.java###test00+++addTextChunk###2, Line_ESTest.java###test00+++assertEquals###3, Line_ESTest.java###test01+++addTextChunk###1, Line_ESTest.java###test01+++removeRepeatedCharacters###3, Line_ESTest.java###test01+++assertEquals###3, Line_ESTest.java###test01+++assertTrue###1, Line_ESTest.java###test01+++equals###1, Line_ESTest.java###test02+++valueOf###1, Line_ESTest.java###test02+++squeeze###2, Line_ESTest.java###test02+++setTextElements###1, Line_ESTest.java###test02+++removeRepeatedCharacters###3, Line_ESTest.java###test02+++assertEquals###3, Line_ESTest.java###test03+++setFrameFromCenter###4, Line_ESTest.java###test03+++addTextChunk###1, Line_ESTest.java###test03+++removeRepeatedCharacters###3, Line_ESTest.java###test03+++assertEquals###3, Line_ESTest.java###test03+++assertNotSame###2, Line_ESTest.java###test04+++addTextChunk###1, Line_ESTest.java###test04+++valueOf###1, Line_ESTest.java###test04+++removeRepeatedCharacters###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++getMaxY###0, Line_ESTest.java###test05+++setTextElements###1, Line_ESTest.java###test05+++getTextElements###0, Line_ESTest.java###test05+++assertNull###1, Line_ESTest.java###test06+++addTextChunk###2, Line_ESTest.java###test06+++getTextElements###0, Line_ESTest.java###test06+++assertEquals###2, Line_ESTest.java###test06+++size###0, Line_ESTest.java###test07+++addTextChunk###2, Line_ESTest.java###test07+++verifyException###2, Line_ESTest.java###test07+++toString###0, Line_ESTest.java###test07+++fail###1, Line_ESTest.java###test08+++valueOf###1, Line_ESTest.java###test08+++verifyException###2, Line_ESTest.java###test08+++removeRepeatedCharacters###3, Line_ESTest.java###test08+++fail###1, Line_ESTest.java###test09+++addTextChunk###1, Line_ESTest.java###test09+++fail###1, Line_ESTest.java###test10+++addTextChunk###2, Line_ESTest.java###test11+++verifyException###2, Line_ESTest.java###test11+++addTextChunk###2, Line_ESTest.java###test11+++fail###1, Line_ESTest.java###test12+++addTextChunk###2, Line_ESTest.java###test12+++valueOf###1, Line_ESTest.java###test12+++removeRepeatedCharacters###3, Line_ESTest.java###test12+++assertNotSame###2, Line_ESTest.java###test13+++addTextChunk###2, Line_ESTest.java###test13+++toString###0, Line_ESTest.java###test13+++assertEquals###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++assertEquals###3, Line_ESTest.java###test15+++verifyException###2, Line_ESTest.java###test15+++addTextChunk###2, Line_ESTest.java###test15+++fail###1, Line_ESTest.java###test16+++getTextElements###0, Line_ESTest.java###test16+++setTextElements###1, Line_ESTest.java###test16+++assertEquals###3, Line_ESTest.java###test16+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:53:47 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Line_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Line\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Line_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.HasText\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Line_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.List;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Line_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);\n    line0.setTextElements(list0);\n    line0.addTextChunk(textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(236.93358F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(4684.6978F, 0.0F, 0.0F, (-1382.9923F));\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('\\'');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, (-3689));\n    assertEquals(4684.6978F, line0.y, 0.01F);\n    assertTrue(line1.equals((Object) line0));\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Line line0 = new Line();\n    Character character0 = Character.valueOf('3');\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, '3');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1019));\n    line0.setTextElements(list0);\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 11);\n    assertEquals(1.0F, line1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    textChunk0.setFrameFromCenter((-1.0), 1386.87839472147, (double) 0.0F, (double) 0.0F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('o');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 3);\n    assertEquals(2773.7568F, line1.height, 0.01F);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk((-588.74023F), (-2790.2083F), (-1.0F), 0.3F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = Character.valueOf('\\\"');\n    Line.removeRepeatedCharacters(line0, character0, (-936));\n    assertEquals(0.3F, line0.height, 0.01F);\n    assertEquals((-588.4402343630791), line0.getMaxY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Line line0 = new Line();\n    line0.setTextElements((List<TextChunk>) null);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    line0.addTextChunk(339, textChunk0);\n    // Undeclared exception!\n    try {\n        line0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Character character0 = Character.valueOf('F');\n    // Undeclared exception!\n    try {\n        Line.removeRepeatedCharacters((Line) null, character0, 'F');\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    line0.addTextChunk(2147483645, textChunk0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk(13, (TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    Character character0 = Character.valueOf('T');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 0);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    String string0 = line0.toString();\n    assertEquals(\"technology.tabula.Line[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,chunks='', ]\", string0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(0.0F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((-2863), textChunk0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // i can't be less than 0\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Line line0 = new Line();\n    List<TextChunk> list0 = line0.getTextElements();\n    line0.setTextElements(list0);\n    assertEquals(0.0, line0.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Line line0 = new Line();\n    line0.setTextElements((List<TextChunk>) null);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertNull(list0);\n}",
            "TestRelevantFocal": "[setTextElements###1, getTextElements###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:53:47 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Line_ESTest extends Line_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String toString() {\n    StringBuilder sb = new StringBuilder();\n    String s = super.toString();\n    sb.append(s, 0, s.length() - 1);\n    sb.append(\",chunks=\");\n    for (TextChunk te : this.textChunks) {\n        sb.append(\"'\" + te.getText() + \"', \");\n    }\n    sb.append(']');\n    return sb.toString();\n}",
            "all_field_declaration": "List<TextChunk> textChunks = new ArrayList<>();\npublic static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "7",
            "Filed": "List<TextChunk> textChunks = new ArrayList<>();",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();",
            "public_field": "public static final Character[] WHITE_SPACE_CHARS = { ' ', '\\t', '\\r', '\\n', '\\f' };",
            "Method_statement": "toString()",
            "Method_name": "toString",
            "Class_declaration": "public class Line {\n",
            "constructors": "",
            "all_method_signature": "public List<TextChunk> getTextElements();\npublic void setTextElements(List<TextChunk> textChunks);\npublic void addTextChunk(int i, TextChunk textChunk);\npublic void addTextChunk(TextChunk textChunk);\npublic String toString();\n static Line removeRepeatedCharacters(Line line, Character c, int minRunLength);",
            "Class_name": "Line",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Line.java###toString",
            "Parameter_num": "0",
            "contextMethod": "public List<TextChunk> getTextElements() {\n    return textChunks;\n}",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public String toString();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Line_ESTest.java###test00+++squeeze###2, Line_ESTest.java###test00+++setTextElements###1, Line_ESTest.java###test00+++addTextChunk###1, Line_ESTest.java###test00+++addTextChunk###2, Line_ESTest.java###test00+++assertEquals###3, Line_ESTest.java###test01+++addTextChunk###1, Line_ESTest.java###test01+++removeRepeatedCharacters###3, Line_ESTest.java###test01+++assertEquals###3, Line_ESTest.java###test01+++assertTrue###1, Line_ESTest.java###test01+++equals###1, Line_ESTest.java###test02+++valueOf###1, Line_ESTest.java###test02+++squeeze###2, Line_ESTest.java###test02+++setTextElements###1, Line_ESTest.java###test02+++removeRepeatedCharacters###3, Line_ESTest.java###test02+++assertEquals###3, Line_ESTest.java###test03+++setFrameFromCenter###4, Line_ESTest.java###test03+++addTextChunk###1, Line_ESTest.java###test03+++removeRepeatedCharacters###3, Line_ESTest.java###test03+++assertEquals###3, Line_ESTest.java###test03+++assertNotSame###2, Line_ESTest.java###test04+++addTextChunk###1, Line_ESTest.java###test04+++valueOf###1, Line_ESTest.java###test04+++removeRepeatedCharacters###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++assertEquals###3, Line_ESTest.java###test04+++getMaxY###0, Line_ESTest.java###test05+++setTextElements###1, Line_ESTest.java###test05+++getTextElements###0, Line_ESTest.java###test05+++assertNull###1, Line_ESTest.java###test06+++addTextChunk###2, Line_ESTest.java###test06+++getTextElements###0, Line_ESTest.java###test06+++assertEquals###2, Line_ESTest.java###test06+++size###0, Line_ESTest.java###test07+++addTextChunk###2, Line_ESTest.java###test07+++verifyException###2, Line_ESTest.java###test07+++toString###0, Line_ESTest.java###test07+++fail###1, Line_ESTest.java###test08+++valueOf###1, Line_ESTest.java###test08+++verifyException###2, Line_ESTest.java###test08+++removeRepeatedCharacters###3, Line_ESTest.java###test08+++fail###1, Line_ESTest.java###test09+++addTextChunk###1, Line_ESTest.java###test09+++fail###1, Line_ESTest.java###test10+++addTextChunk###2, Line_ESTest.java###test11+++verifyException###2, Line_ESTest.java###test11+++addTextChunk###2, Line_ESTest.java###test11+++fail###1, Line_ESTest.java###test12+++addTextChunk###2, Line_ESTest.java###test12+++valueOf###1, Line_ESTest.java###test12+++removeRepeatedCharacters###3, Line_ESTest.java###test12+++assertNotSame###2, Line_ESTest.java###test13+++addTextChunk###2, Line_ESTest.java###test13+++toString###0, Line_ESTest.java###test13+++assertEquals###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++addTextChunk###2, Line_ESTest.java###test14+++assertEquals###3, Line_ESTest.java###test15+++verifyException###2, Line_ESTest.java###test15+++addTextChunk###2, Line_ESTest.java###test15+++fail###1, Line_ESTest.java###test16+++getTextElements###0, Line_ESTest.java###test16+++setTextElements###1, Line_ESTest.java###test16+++assertEquals###3, Line_ESTest.java###test16+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:53:47 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Line_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Line\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Line_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.HasText\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Line_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Line_ESTest.java###test13",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);\n    line0.setTextElements(list0);\n    line0.addTextChunk(textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(236.93358F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(4684.6978F, 0.0F, 0.0F, (-1382.9923F));\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('\\'');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, (-3689));\n    assertEquals(4684.6978F, line0.y, 0.01F);\n    assertTrue(line1.equals((Object) line0));\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Line line0 = new Line();\n    Character character0 = Character.valueOf('3');\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, '3');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1019));\n    line0.setTextElements(list0);\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 11);\n    assertEquals(1.0F, line1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    textChunk0.setFrameFromCenter((-1.0), 1386.87839472147, (double) 0.0F, (double) 0.0F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = new Character('o');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 3);\n    assertEquals(2773.7568F, line1.height, 0.01F);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk((-588.74023F), (-2790.2083F), (-1.0F), 0.3F);\n    line0.addTextChunk(textChunk0);\n    Character character0 = Character.valueOf('\\\"');\n    Line.removeRepeatedCharacters(line0, character0, (-936));\n    assertEquals(0.3F, line0.height, 0.01F);\n    assertEquals((-588.4402343630791), line0.getMaxY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Line line0 = new Line();\n    line0.setTextElements((List<TextChunk>) null);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    List<TextChunk> list0 = line0.getTextElements();\n    assertEquals(1, list0.size());\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);\n    line0.addTextChunk(339, textChunk0);\n    // Undeclared exception!\n    try {\n        line0.toString();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Character character0 = Character.valueOf('F');\n    // Undeclared exception!\n    try {\n        Line.removeRepeatedCharacters((Line) null, character0, 'F');\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    line0.addTextChunk(2147483645, textChunk0);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Line line0 = new Line();\n    // Undeclared exception!\n    try {\n        line0.addTextChunk(13, (TextChunk) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Rectangle2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    Character character0 = Character.valueOf('T');\n    Line line1 = Line.removeRepeatedCharacters(line0, character0, 0);\n    assertNotSame(line1, line0);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    String string0 = line0.toString();\n    assertEquals(\"technology.tabula.Line[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,chunks='', ]\", string0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    line0.addTextChunk(0, textChunk0);\n    assertEquals(0.0F, line0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);\n    // Undeclared exception!\n    try {\n        line0.addTextChunk((-2863), textChunk0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        // \n        // i can't be less than 0\n        // \n        verifyException(\"technology.tabula.Line\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Line line0 = new Line();\n    List<TextChunk> list0 = line0.getTextElements();\n    line0.setTextElements(list0);\n    assertEquals(0.0, line0.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Line line0 = new Line();\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    line0.addTextChunk(0, textChunk0);\n    String string0 = line0.toString();\n    assertEquals(\"technology.tabula.Line[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,chunks='', ]\", string0);\n}",
            "TestRelevantFocal": "[addTextChunk###2, toString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:53:47 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.TextChunk;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Line_ESTest extends Line_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static float[] getFirstDeriv(float[] projection) {\n    float[] rv = new float[projection.length];\n    rv[0] = projection[1] - projection[0];\n    for (int i = 1; i < projection.length - 1; i++) {\n        rv[i] = projection[i + 1] - projection[i - 1];\n    }\n    rv[projection.length - 1] = projection[projection.length - 1] - projection[projection.length - 2];\n    return rv;\n}",
            "all_field_declaration": "// fixed <-> float conversion precision\npublic static final int DECIMAL_PLACES = 1;\nprivate final Page area;\nprivate final Rectangle textBounds;\nprivate float[] verticalProjection;\nprivate float[] horizontalProjection;\nprivate final double areaWidth, areaHeight, areaTop, areaLeft;\nprivate float minCharWidth = Float.MAX_VALUE, minCharHeight = Float.MAX_VALUE, horizontalKernelSize, verticalKernelSize;\nprivate float maxHorizontalProjection = 0, maxVerticalProjection = 0;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "5",
            "Filed": "",
            "Parameter_type": "float[]",
            "Import_statements": "",
            "public_method_signature": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize);\npublic float[] getVerticalProjection();\npublic float[] getHorizontalProjection();\npublic float[] findVerticalSeparators(float minColumnWidth);\npublic float[] findHorizontalSeparators(float minRowHeight);\npublic static float[] smooth(float[] data, int kernelSize);\npublic static float[] filter(float[] data, float alpha);\npublic static float[] getAutocorrelation(float[] projection);\npublic static float[] getFirstDeriv(float[] projection);",
            "public_field": "// fixed <-> float conversion precision\npublic static final int DECIMAL_PLACES = 1;",
            "Method_statement": "getFirstDeriv(float() projection)",
            "Method_name": "getFirstDeriv",
            "Class_declaration": "public class ProjectionProfile {\n",
            "constructors": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize) {\n    this.area = area;\n    this.areaWidth = area.getWidth();\n    this.areaHeight = area.getHeight();\n    this.areaTop = area.getTop();\n    this.areaLeft = area.getLeft();\n    this.verticalProjection = new float[toFixed(areaHeight)];\n    this.horizontalProjection = new float[toFixed(areaWidth)];\n    this.horizontalKernelSize = horizontalKernelSize;\n    this.verticalKernelSize = verticalKernelSize;\n    this.textBounds = area.getTextBounds();\n    for (Rectangle element : elements) {\n        if (element.getWidth() / this.textBounds.getWidth() > 0.8) {\n            continue;\n        }\n        this.addRectangle(element);\n    }\n    this.verticalProjection = smooth(this.verticalProjection, toFixed(verticalKernelSize));\n    this.horizontalProjection = smooth(this.horizontalProjection, toFixed(horizontalKernelSize));\n}",
            "all_method_signature": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize);\nprivate void addRectangle(Rectangle element);\npublic float[] getVerticalProjection();\npublic float[] getHorizontalProjection();\npublic float[] findVerticalSeparators(float minColumnWidth);\npublic float[] findHorizontalSeparators(float minRowHeight);\nprivate static List<Integer> findSeparatorsFromProjection(float[] derivative);\npublic static float[] smooth(float[] data, int kernelSize);\npublic static float[] filter(float[] data, float alpha);\npublic static float[] getAutocorrelation(float[] projection);\npublic static float[] getFirstDeriv(float[] projection);\nprivate static int toFixed(double value);\nprivate static double toDouble(int value);",
            "Class_name": "ProjectionProfile",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/ProjectionProfile.java###getFirstDeriv",
            "Parameter_num": "1",
            "contextMethod": "private void addRectangle(Rectangle element) {\n    if (!area.contains(element)) {\n        return;\n    }\n    this.minCharHeight = (float) Math.min(this.minCharHeight, element.getHeight());\n    this.minCharWidth = (float) Math.min(this.minCharWidth, element.getWidth());\n    for (int k = toFixed(element.getLeft()); k < toFixed(element.getRight()); k++) {\n        this.horizontalProjection[k - toFixed(areaLeft)] += element.getHeight();\n        this.maxHorizontalProjection = Math.max(this.maxHorizontalProjection, this.horizontalProjection[k - toFixed(areaLeft)]);\n    }\n    for (int k = toFixed(element.getTop()); k < toFixed(element.getBottom()); k++) {\n        this.verticalProjection[k - toFixed(areaTop)] += element.getWidth();\n        this.maxVerticalProjection = Math.max(this.maxVerticalProjection, this.verticalProjection[k - toFixed(areaTop)]);\n    }\n}\npublic float[] findVerticalSeparators(float minColumnWidth) {\n    boolean foundNarrower = false;\n    List<Integer> verticalSeparators = new ArrayList<>();\n    for (Ruling r : area.getVerticalRulings()) {\n        if (r.length() / this.textBounds.getHeight() >= 0.95) {\n            verticalSeparators.add(toFixed(r.getPosition() - this.areaLeft));\n        }\n    }\n    List<Integer> seps = findSeparatorsFromProjection(filter(getFirstDeriv(this.horizontalProjection), 0.1f));\n    for (Integer foundSep : seps) {\n        for (Integer explicitSep : verticalSeparators) {\n            if (Math.abs(toDouble(foundSep - explicitSep)) <= minColumnWidth) {\n                foundNarrower = true;\n                break;\n            }\n        }\n        if (!foundNarrower) {\n            verticalSeparators.add(foundSep);\n        }\n        foundNarrower = false;\n    }\n    Collections.sort(verticalSeparators);\n    float[] rv = new float[verticalSeparators.size()];\n    for (int i = 0; i < rv.length; i++) {\n        rv[i] = (float) toDouble(verticalSeparators.get(i));\n    }\n    return rv;\n}\npublic float[] findHorizontalSeparators(float minRowHeight) {\n    boolean foundShorter = false;\n    List<Integer> horizontalSeparators = new ArrayList<>();\n    for (Ruling r : area.getHorizontalRulings()) {\n        System.out.println(r.length() / this.textBounds.getWidth());\n        if (r.length() / this.textBounds.getWidth() >= 0.95) {\n            horizontalSeparators.add(toFixed(r.getPosition() - this.areaTop));\n        }\n    }\n    List<Integer> seps = findSeparatorsFromProjection(filter(getFirstDeriv(this.verticalProjection), 0.1f));\n    for (Integer foundSep : seps) {\n        for (Integer explicitSep : horizontalSeparators) {\n            if (Math.abs(toDouble(foundSep - explicitSep)) <= minRowHeight) {\n                foundShorter = true;\n                break;\n            }\n        }\n        if (!foundShorter) {\n            horizontalSeparators.add(foundSep);\n        }\n        foundShorter = false;\n    }\n    Collections.sort(horizontalSeparators);\n    float[] rv = new float[horizontalSeparators.size()];\n    for (int i = 0; i < rv.length; i++) {\n        rv[i] = (float) toDouble(horizontalSeparators.get(i));\n    }\n    return rv;\n}\nprivate static List<Integer> findSeparatorsFromProjection(float[] derivative) {\n    List<Integer> separators = new ArrayList<>();\n    Integer lastNeg = null;\n    float s;\n    boolean positiveSlope = false;\n    for (int i = 0; i < derivative.length; i++) {\n        s = derivative[i];\n        if (s > 0 && !positiveSlope) {\n            positiveSlope = true;\n            separators.add(lastNeg != null ? lastNeg : i);\n        } else if (s < 0) {\n            lastNeg = i;\n            positiveSlope = false;\n        }\n    }\n    return separators;\n}\npublic static float[] getAutocorrelation(float[] projection) {\n    float[] rv = new float[projection.length - 1];\n    for (int i = 1; i < projection.length - 1; i++) {\n        rv[i] = (projection[i] * projection[i - 1]) / 100f;\n    }\n    return rv;\n}",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public static float[] getFirstDeriv(float[] projection);",
            "Junit_version": "4",
            "returnType": "float[]"
        },
        "Test_method": {
            "AllTest2Focal": "[ProjectionProfile_ESTest.java###test00+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test00+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test01+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test01+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test02+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test02+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test03+++filter###2, ProjectionProfile_ESTest.java###test03+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test04+++smooth###2, ProjectionProfile_ESTest.java###test04+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test05+++smooth###2, ProjectionProfile_ESTest.java###test05+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test06+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test06+++assertEquals###2, ProjectionProfile_ESTest.java###test07+++smooth###2, ProjectionProfile_ESTest.java###test07+++fail###1, ProjectionProfile_ESTest.java###test08+++verifyException###2, ProjectionProfile_ESTest.java###test08+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test08+++fail###1, ProjectionProfile_ESTest.java###test09+++verifyException###2, ProjectionProfile_ESTest.java###test09+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test09+++fail###1, ProjectionProfile_ESTest.java###test10+++verifyException###2, ProjectionProfile_ESTest.java###test10+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test10+++fail###1, ProjectionProfile_ESTest.java###test11+++verifyException###2, ProjectionProfile_ESTest.java###test11+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test11+++fail###1, ProjectionProfile_ESTest.java###test12+++verifyException###2, ProjectionProfile_ESTest.java###test12+++filter###2, ProjectionProfile_ESTest.java###test12+++fail###1, ProjectionProfile_ESTest.java###test13+++verifyException###2, ProjectionProfile_ESTest.java###test13+++filter###2, ProjectionProfile_ESTest.java###test13+++fail###1, ProjectionProfile_ESTest.java###test14+++verifyException###2, ProjectionProfile_ESTest.java###test14+++fail###1, ProjectionProfile_ESTest.java###test15+++smooth###2, ProjectionProfile_ESTest.java###test15+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:59:46 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ProjectionProfile_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.ProjectionProfile\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ProjectionProfile_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.ProjectionProfile\",\n      \"technology.tabula.Page\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ProjectionProfile_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.ProjectionProfile\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.ProjectionProfile;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/ProjectionProfile_ESTest.java###test01",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    float[] floatArray0 = new float[9];\n    floatArray0[7] = (-5096.423F);\n    float[] floatArray1 = ProjectionProfile.getFirstDeriv(floatArray0);\n    assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-5096.423F), 0.0F, 5096.423F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    float[] floatArray0 = new float[9];\n    floatArray0[0] = 995.3F;\n    float[] floatArray1 = ProjectionProfile.getFirstDeriv(floatArray0);\n    assertArrayEquals(new float[] { (-995.3F), (-995.3F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (-93.946F);\n    floatArray0[1] = (-796.6174F);\n    float[] floatArray1 = ProjectionProfile.getAutocorrelation(floatArray0);\n    assertArrayEquals(new float[] { 0.0F, 748.39014F, -0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (-418.7F);\n    float[] floatArray1 = ProjectionProfile.filter(floatArray0, 1905.514F);\n    assertArrayEquals(new float[] { (-418.7F), 797420.06F, (-1.51869773E9F), 2.89238129E12F, (-5.5085812E15F), 1.049117E19F, (-1.9980582E22F) }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    float[] floatArray0 = new float[2];\n    floatArray0[0] = 3035.0F;\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, 3929);\n    assertArrayEquals(new float[] { 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    float[] floatArray0 = new float[6];\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, (-722));\n    assertArrayEquals(new float[] { -0.0F, -0.0F, -0.0F, -0.0F, -0.0F, -0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    float[] floatArray0 = new float[1];\n    float[] floatArray1 = ProjectionProfile.getAutocorrelation(floatArray0);\n    assertEquals(0, floatArray1.length);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.smooth((float[]) null, (-186));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getFirstDeriv((float[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    float[] floatArray0 = new float[1];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getFirstDeriv(floatArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 1\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getAutocorrelation((float[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    float[] floatArray0 = new float[0];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getAutocorrelation(floatArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.filter((float[]) null, 0.0F);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    float[] floatArray0 = new float[0];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.filter(floatArray0, 0.0F);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    ProjectionProfile projectionProfile0 = null;\n    try {\n        projectionProfile0 = new ProjectionProfile((Page) null, linkedList0, (-102.2418F), (-102.2418F));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    float[] floatArray0 = new float[0];\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, (-627));\n    assertNotSame(floatArray1, floatArray0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    float[] floatArray0 = new float[9];\n    floatArray0[0] = 995.3F;\n    float[] floatArray1 = ProjectionProfile.getFirstDeriv(floatArray0);\n    assertArrayEquals(new float[] { (-995.3F), (-995.3F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);\n}",
            "TestRelevantFocal": "[getFirstDeriv###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:59:46 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Page;\nimport technology.tabula.ProjectionProfile;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ProjectionProfile_ESTest extends ProjectionProfile_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static float[] getAutocorrelation(float[] projection) {\n    float[] rv = new float[projection.length - 1];\n    for (int i = 1; i < projection.length - 1; i++) {\n        rv[i] = (projection[i] * projection[i - 1]) / 100f;\n    }\n    return rv;\n}",
            "all_field_declaration": "// fixed <-> float conversion precision\npublic static final int DECIMAL_PLACES = 1;\nprivate final Page area;\nprivate final Rectangle textBounds;\nprivate float[] verticalProjection;\nprivate float[] horizontalProjection;\nprivate final double areaWidth, areaHeight, areaTop, areaLeft;\nprivate float minCharWidth = Float.MAX_VALUE, minCharHeight = Float.MAX_VALUE, horizontalKernelSize, verticalKernelSize;\nprivate float maxHorizontalProjection = 0, maxVerticalProjection = 0;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "float[]",
            "Import_statements": "",
            "public_method_signature": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize);\npublic float[] getVerticalProjection();\npublic float[] getHorizontalProjection();\npublic float[] findVerticalSeparators(float minColumnWidth);\npublic float[] findHorizontalSeparators(float minRowHeight);\npublic static float[] smooth(float[] data, int kernelSize);\npublic static float[] filter(float[] data, float alpha);\npublic static float[] getAutocorrelation(float[] projection);\npublic static float[] getFirstDeriv(float[] projection);",
            "public_field": "// fixed <-> float conversion precision\npublic static final int DECIMAL_PLACES = 1;",
            "Method_statement": "getAutocorrelation(float() projection)",
            "Method_name": "getAutocorrelation",
            "Class_declaration": "public class ProjectionProfile {\n",
            "constructors": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize) {\n    this.area = area;\n    this.areaWidth = area.getWidth();\n    this.areaHeight = area.getHeight();\n    this.areaTop = area.getTop();\n    this.areaLeft = area.getLeft();\n    this.verticalProjection = new float[toFixed(areaHeight)];\n    this.horizontalProjection = new float[toFixed(areaWidth)];\n    this.horizontalKernelSize = horizontalKernelSize;\n    this.verticalKernelSize = verticalKernelSize;\n    this.textBounds = area.getTextBounds();\n    for (Rectangle element : elements) {\n        if (element.getWidth() / this.textBounds.getWidth() > 0.8) {\n            continue;\n        }\n        this.addRectangle(element);\n    }\n    this.verticalProjection = smooth(this.verticalProjection, toFixed(verticalKernelSize));\n    this.horizontalProjection = smooth(this.horizontalProjection, toFixed(horizontalKernelSize));\n}",
            "all_method_signature": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize);\nprivate void addRectangle(Rectangle element);\npublic float[] getVerticalProjection();\npublic float[] getHorizontalProjection();\npublic float[] findVerticalSeparators(float minColumnWidth);\npublic float[] findHorizontalSeparators(float minRowHeight);\nprivate static List<Integer> findSeparatorsFromProjection(float[] derivative);\npublic static float[] smooth(float[] data, int kernelSize);\npublic static float[] filter(float[] data, float alpha);\npublic static float[] getAutocorrelation(float[] projection);\npublic static float[] getFirstDeriv(float[] projection);\nprivate static int toFixed(double value);\nprivate static double toDouble(int value);",
            "Class_name": "ProjectionProfile",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/ProjectionProfile.java###getAutocorrelation",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public static float[] getAutocorrelation(float[] projection);",
            "Junit_version": "4",
            "returnType": "float[]"
        },
        "Test_method": {
            "AllTest2Focal": "[ProjectionProfile_ESTest.java###test00+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test00+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test01+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test01+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test02+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test02+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test03+++filter###2, ProjectionProfile_ESTest.java###test03+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test04+++smooth###2, ProjectionProfile_ESTest.java###test04+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test05+++smooth###2, ProjectionProfile_ESTest.java###test05+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test06+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test06+++assertEquals###2, ProjectionProfile_ESTest.java###test07+++smooth###2, ProjectionProfile_ESTest.java###test07+++fail###1, ProjectionProfile_ESTest.java###test08+++verifyException###2, ProjectionProfile_ESTest.java###test08+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test08+++fail###1, ProjectionProfile_ESTest.java###test09+++verifyException###2, ProjectionProfile_ESTest.java###test09+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test09+++fail###1, ProjectionProfile_ESTest.java###test10+++verifyException###2, ProjectionProfile_ESTest.java###test10+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test10+++fail###1, ProjectionProfile_ESTest.java###test11+++verifyException###2, ProjectionProfile_ESTest.java###test11+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test11+++fail###1, ProjectionProfile_ESTest.java###test12+++verifyException###2, ProjectionProfile_ESTest.java###test12+++filter###2, ProjectionProfile_ESTest.java###test12+++fail###1, ProjectionProfile_ESTest.java###test13+++verifyException###2, ProjectionProfile_ESTest.java###test13+++filter###2, ProjectionProfile_ESTest.java###test13+++fail###1, ProjectionProfile_ESTest.java###test14+++verifyException###2, ProjectionProfile_ESTest.java###test14+++fail###1, ProjectionProfile_ESTest.java###test15+++smooth###2, ProjectionProfile_ESTest.java###test15+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:59:46 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ProjectionProfile_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.ProjectionProfile\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ProjectionProfile_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.ProjectionProfile\",\n      \"technology.tabula.Page\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ProjectionProfile_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.ProjectionProfile\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.ProjectionProfile;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/ProjectionProfile_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    float[] floatArray0 = new float[9];\n    floatArray0[7] = (-5096.423F);\n    float[] floatArray1 = ProjectionProfile.getFirstDeriv(floatArray0);\n    assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-5096.423F), 0.0F, 5096.423F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    float[] floatArray0 = new float[9];\n    floatArray0[0] = 995.3F;\n    float[] floatArray1 = ProjectionProfile.getFirstDeriv(floatArray0);\n    assertArrayEquals(new float[] { (-995.3F), (-995.3F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (-93.946F);\n    floatArray0[1] = (-796.6174F);\n    float[] floatArray1 = ProjectionProfile.getAutocorrelation(floatArray0);\n    assertArrayEquals(new float[] { 0.0F, 748.39014F, -0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (-418.7F);\n    float[] floatArray1 = ProjectionProfile.filter(floatArray0, 1905.514F);\n    assertArrayEquals(new float[] { (-418.7F), 797420.06F, (-1.51869773E9F), 2.89238129E12F, (-5.5085812E15F), 1.049117E19F, (-1.9980582E22F) }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    float[] floatArray0 = new float[2];\n    floatArray0[0] = 3035.0F;\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, 3929);\n    assertArrayEquals(new float[] { 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    float[] floatArray0 = new float[6];\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, (-722));\n    assertArrayEquals(new float[] { -0.0F, -0.0F, -0.0F, -0.0F, -0.0F, -0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    float[] floatArray0 = new float[1];\n    float[] floatArray1 = ProjectionProfile.getAutocorrelation(floatArray0);\n    assertEquals(0, floatArray1.length);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.smooth((float[]) null, (-186));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getFirstDeriv((float[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    float[] floatArray0 = new float[1];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getFirstDeriv(floatArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 1\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getAutocorrelation((float[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    float[] floatArray0 = new float[0];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getAutocorrelation(floatArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.filter((float[]) null, 0.0F);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    float[] floatArray0 = new float[0];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.filter(floatArray0, 0.0F);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    ProjectionProfile projectionProfile0 = null;\n    try {\n        projectionProfile0 = new ProjectionProfile((Page) null, linkedList0, (-102.2418F), (-102.2418F));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    float[] floatArray0 = new float[0];\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, (-627));\n    assertNotSame(floatArray1, floatArray0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (-93.946F);\n    floatArray0[1] = (-796.6174F);\n    float[] floatArray1 = ProjectionProfile.getAutocorrelation(floatArray0);\n    assertArrayEquals(new float[] { 0.0F, 748.39014F, -0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);\n}",
            "TestRelevantFocal": "[getAutocorrelation###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:59:46 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Page;\nimport technology.tabula.ProjectionProfile;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ProjectionProfile_ESTest extends ProjectionProfile_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static float[] filter(float[] data, float alpha) {\n    float[] rv = new float[data.length];\n    rv[0] = data[0];\n    for (int i = 1; i < data.length; i++) {\n        rv[i] = rv[i - 1] + alpha * (data[i] - rv[i - 1]);\n    }\n    return rv;\n}",
            "all_field_declaration": "// fixed <-> float conversion precision\npublic static final int DECIMAL_PLACES = 1;\nprivate final Page area;\nprivate final Rectangle textBounds;\nprivate float[] verticalProjection;\nprivate float[] horizontalProjection;\nprivate final double areaWidth, areaHeight, areaTop, areaLeft;\nprivate float minCharWidth = Float.MAX_VALUE, minCharHeight = Float.MAX_VALUE, horizontalKernelSize, verticalKernelSize;\nprivate float maxHorizontalProjection = 0, maxVerticalProjection = 0;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "",
            "Parameter_type": "float[],float",
            "Import_statements": "",
            "public_method_signature": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize);\npublic float[] getVerticalProjection();\npublic float[] getHorizontalProjection();\npublic float[] findVerticalSeparators(float minColumnWidth);\npublic float[] findHorizontalSeparators(float minRowHeight);\npublic static float[] smooth(float[] data, int kernelSize);\npublic static float[] filter(float[] data, float alpha);\npublic static float[] getAutocorrelation(float[] projection);\npublic static float[] getFirstDeriv(float[] projection);",
            "public_field": "// fixed <-> float conversion precision\npublic static final int DECIMAL_PLACES = 1;",
            "Method_statement": "filter(float() data, float alpha)",
            "Method_name": "filter",
            "Class_declaration": "public class ProjectionProfile {\n",
            "constructors": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize) {\n    this.area = area;\n    this.areaWidth = area.getWidth();\n    this.areaHeight = area.getHeight();\n    this.areaTop = area.getTop();\n    this.areaLeft = area.getLeft();\n    this.verticalProjection = new float[toFixed(areaHeight)];\n    this.horizontalProjection = new float[toFixed(areaWidth)];\n    this.horizontalKernelSize = horizontalKernelSize;\n    this.verticalKernelSize = verticalKernelSize;\n    this.textBounds = area.getTextBounds();\n    for (Rectangle element : elements) {\n        if (element.getWidth() / this.textBounds.getWidth() > 0.8) {\n            continue;\n        }\n        this.addRectangle(element);\n    }\n    this.verticalProjection = smooth(this.verticalProjection, toFixed(verticalKernelSize));\n    this.horizontalProjection = smooth(this.horizontalProjection, toFixed(horizontalKernelSize));\n}",
            "all_method_signature": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize);\nprivate void addRectangle(Rectangle element);\npublic float[] getVerticalProjection();\npublic float[] getHorizontalProjection();\npublic float[] findVerticalSeparators(float minColumnWidth);\npublic float[] findHorizontalSeparators(float minRowHeight);\nprivate static List<Integer> findSeparatorsFromProjection(float[] derivative);\npublic static float[] smooth(float[] data, int kernelSize);\npublic static float[] filter(float[] data, float alpha);\npublic static float[] getAutocorrelation(float[] projection);\npublic static float[] getFirstDeriv(float[] projection);\nprivate static int toFixed(double value);\nprivate static double toDouble(int value);",
            "Class_name": "ProjectionProfile",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/ProjectionProfile.java###filter",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.List;\n",
            "comment": " \n     * Simple Low pass filter\n     ",
            "packageName": "technology.tabula",
            "method_signature": "public static float[] filter(float[] data, float alpha);",
            "Junit_version": "4",
            "returnType": "float[]"
        },
        "Test_method": {
            "AllTest2Focal": "[ProjectionProfile_ESTest.java###test00+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test00+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test01+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test01+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test02+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test02+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test03+++filter###2, ProjectionProfile_ESTest.java###test03+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test04+++smooth###2, ProjectionProfile_ESTest.java###test04+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test05+++smooth###2, ProjectionProfile_ESTest.java###test05+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test06+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test06+++assertEquals###2, ProjectionProfile_ESTest.java###test07+++smooth###2, ProjectionProfile_ESTest.java###test07+++fail###1, ProjectionProfile_ESTest.java###test08+++verifyException###2, ProjectionProfile_ESTest.java###test08+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test08+++fail###1, ProjectionProfile_ESTest.java###test09+++verifyException###2, ProjectionProfile_ESTest.java###test09+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test09+++fail###1, ProjectionProfile_ESTest.java###test10+++verifyException###2, ProjectionProfile_ESTest.java###test10+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test10+++fail###1, ProjectionProfile_ESTest.java###test11+++verifyException###2, ProjectionProfile_ESTest.java###test11+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test11+++fail###1, ProjectionProfile_ESTest.java###test12+++verifyException###2, ProjectionProfile_ESTest.java###test12+++filter###2, ProjectionProfile_ESTest.java###test12+++fail###1, ProjectionProfile_ESTest.java###test13+++verifyException###2, ProjectionProfile_ESTest.java###test13+++filter###2, ProjectionProfile_ESTest.java###test13+++fail###1, ProjectionProfile_ESTest.java###test14+++verifyException###2, ProjectionProfile_ESTest.java###test14+++fail###1, ProjectionProfile_ESTest.java###test15+++smooth###2, ProjectionProfile_ESTest.java###test15+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:59:46 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ProjectionProfile_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.ProjectionProfile\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ProjectionProfile_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.ProjectionProfile\",\n      \"technology.tabula.Page\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ProjectionProfile_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.ProjectionProfile\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.ProjectionProfile;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/ProjectionProfile_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    float[] floatArray0 = new float[9];\n    floatArray0[7] = (-5096.423F);\n    float[] floatArray1 = ProjectionProfile.getFirstDeriv(floatArray0);\n    assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-5096.423F), 0.0F, 5096.423F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    float[] floatArray0 = new float[9];\n    floatArray0[0] = 995.3F;\n    float[] floatArray1 = ProjectionProfile.getFirstDeriv(floatArray0);\n    assertArrayEquals(new float[] { (-995.3F), (-995.3F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (-93.946F);\n    floatArray0[1] = (-796.6174F);\n    float[] floatArray1 = ProjectionProfile.getAutocorrelation(floatArray0);\n    assertArrayEquals(new float[] { 0.0F, 748.39014F, -0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (-418.7F);\n    float[] floatArray1 = ProjectionProfile.filter(floatArray0, 1905.514F);\n    assertArrayEquals(new float[] { (-418.7F), 797420.06F, (-1.51869773E9F), 2.89238129E12F, (-5.5085812E15F), 1.049117E19F, (-1.9980582E22F) }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    float[] floatArray0 = new float[2];\n    floatArray0[0] = 3035.0F;\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, 3929);\n    assertArrayEquals(new float[] { 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    float[] floatArray0 = new float[6];\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, (-722));\n    assertArrayEquals(new float[] { -0.0F, -0.0F, -0.0F, -0.0F, -0.0F, -0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    float[] floatArray0 = new float[1];\n    float[] floatArray1 = ProjectionProfile.getAutocorrelation(floatArray0);\n    assertEquals(0, floatArray1.length);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.smooth((float[]) null, (-186));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getFirstDeriv((float[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    float[] floatArray0 = new float[1];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getFirstDeriv(floatArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 1\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getAutocorrelation((float[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    float[] floatArray0 = new float[0];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getAutocorrelation(floatArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.filter((float[]) null, 0.0F);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    float[] floatArray0 = new float[0];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.filter(floatArray0, 0.0F);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    ProjectionProfile projectionProfile0 = null;\n    try {\n        projectionProfile0 = new ProjectionProfile((Page) null, linkedList0, (-102.2418F), (-102.2418F));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    float[] floatArray0 = new float[0];\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, (-627));\n    assertNotSame(floatArray1, floatArray0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (-418.7F);\n    float[] floatArray1 = ProjectionProfile.filter(floatArray0, 1905.514F);\n    assertArrayEquals(new float[] { (-418.7F), 797420.06F, (-1.51869773E9F), 2.89238129E12F, (-5.5085812E15F), 1.049117E19F, (-1.9980582E22F) }, floatArray1, 0.01F);\n}",
            "TestRelevantFocal": "[filter###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:59:46 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Page;\nimport technology.tabula.ProjectionProfile;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ProjectionProfile_ESTest extends ProjectionProfile_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static float[] smooth(float[] data, int kernelSize) {\n    float[] rv = new float[data.length];\n    float s;\n    for (int pass = 0; pass < 1; pass++) {\n        for (int i = 0; i < data.length; i++) {\n            s = 0;\n            for (int j = Math.max(0, i - kernelSize / 2); j < Math.min(i + kernelSize / 2, data.length); j++) {\n                s += data[j];\n            }\n            rv[i] = (float) Math.floor(s / kernelSize);\n        }\n    }\n    return rv;\n}",
            "all_field_declaration": "// fixed <-> float conversion precision\npublic static final int DECIMAL_PLACES = 1;\nprivate final Page area;\nprivate final Rectangle textBounds;\nprivate float[] verticalProjection;\nprivate float[] horizontalProjection;\nprivate final double areaWidth, areaHeight, areaTop, areaLeft;\nprivate float minCharWidth = Float.MAX_VALUE, minCharHeight = Float.MAX_VALUE, horizontalKernelSize, verticalKernelSize;\nprivate float maxHorizontalProjection = 0, maxVerticalProjection = 0;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "",
            "Parameter_type": "float[],int",
            "Import_statements": "",
            "public_method_signature": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize);\npublic float[] getVerticalProjection();\npublic float[] getHorizontalProjection();\npublic float[] findVerticalSeparators(float minColumnWidth);\npublic float[] findHorizontalSeparators(float minRowHeight);\npublic static float[] smooth(float[] data, int kernelSize);\npublic static float[] filter(float[] data, float alpha);\npublic static float[] getAutocorrelation(float[] projection);\npublic static float[] getFirstDeriv(float[] projection);",
            "public_field": "// fixed <-> float conversion precision\npublic static final int DECIMAL_PLACES = 1;",
            "Method_statement": "smooth(float() data, int kernelSize)",
            "Method_name": "smooth",
            "Class_declaration": "public class ProjectionProfile {\n",
            "constructors": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize) {\n    this.area = area;\n    this.areaWidth = area.getWidth();\n    this.areaHeight = area.getHeight();\n    this.areaTop = area.getTop();\n    this.areaLeft = area.getLeft();\n    this.verticalProjection = new float[toFixed(areaHeight)];\n    this.horizontalProjection = new float[toFixed(areaWidth)];\n    this.horizontalKernelSize = horizontalKernelSize;\n    this.verticalKernelSize = verticalKernelSize;\n    this.textBounds = area.getTextBounds();\n    for (Rectangle element : elements) {\n        if (element.getWidth() / this.textBounds.getWidth() > 0.8) {\n            continue;\n        }\n        this.addRectangle(element);\n    }\n    this.verticalProjection = smooth(this.verticalProjection, toFixed(verticalKernelSize));\n    this.horizontalProjection = smooth(this.horizontalProjection, toFixed(horizontalKernelSize));\n}",
            "all_method_signature": "public ProjectionProfile(Page area, List<? extends Rectangle> elements, float horizontalKernelSize, float verticalKernelSize);\nprivate void addRectangle(Rectangle element);\npublic float[] getVerticalProjection();\npublic float[] getHorizontalProjection();\npublic float[] findVerticalSeparators(float minColumnWidth);\npublic float[] findHorizontalSeparators(float minRowHeight);\nprivate static List<Integer> findSeparatorsFromProjection(float[] derivative);\npublic static float[] smooth(float[] data, int kernelSize);\npublic static float[] filter(float[] data, float alpha);\npublic static float[] getAutocorrelation(float[] projection);\npublic static float[] getFirstDeriv(float[] projection);\nprivate static int toFixed(double value);\nprivate static double toDouble(int value);",
            "Class_name": "ProjectionProfile",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/ProjectionProfile.java###smooth",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public static float[] smooth(float[] data, int kernelSize);",
            "Junit_version": "4",
            "returnType": "float[]"
        },
        "Test_method": {
            "AllTest2Focal": "[ProjectionProfile_ESTest.java###test00+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test00+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test01+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test01+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test02+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test02+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test03+++filter###2, ProjectionProfile_ESTest.java###test03+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test04+++smooth###2, ProjectionProfile_ESTest.java###test04+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test05+++smooth###2, ProjectionProfile_ESTest.java###test05+++assertArrayEquals###3, ProjectionProfile_ESTest.java###test06+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test06+++assertEquals###2, ProjectionProfile_ESTest.java###test07+++smooth###2, ProjectionProfile_ESTest.java###test07+++fail###1, ProjectionProfile_ESTest.java###test08+++verifyException###2, ProjectionProfile_ESTest.java###test08+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test08+++fail###1, ProjectionProfile_ESTest.java###test09+++verifyException###2, ProjectionProfile_ESTest.java###test09+++getFirstDeriv###1, ProjectionProfile_ESTest.java###test09+++fail###1, ProjectionProfile_ESTest.java###test10+++verifyException###2, ProjectionProfile_ESTest.java###test10+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test10+++fail###1, ProjectionProfile_ESTest.java###test11+++verifyException###2, ProjectionProfile_ESTest.java###test11+++getAutocorrelation###1, ProjectionProfile_ESTest.java###test11+++fail###1, ProjectionProfile_ESTest.java###test12+++verifyException###2, ProjectionProfile_ESTest.java###test12+++filter###2, ProjectionProfile_ESTest.java###test12+++fail###1, ProjectionProfile_ESTest.java###test13+++verifyException###2, ProjectionProfile_ESTest.java###test13+++filter###2, ProjectionProfile_ESTest.java###test13+++fail###1, ProjectionProfile_ESTest.java###test14+++verifyException###2, ProjectionProfile_ESTest.java###test14+++fail###1, ProjectionProfile_ESTest.java###test15+++smooth###2, ProjectionProfile_ESTest.java###test15+++assertNotSame###2]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:59:46 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class ProjectionProfile_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.ProjectionProfile\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ProjectionProfile_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.ProjectionProfile\",\n      \"technology.tabula.Page\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ProjectionProfile_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.ProjectionProfile\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.ProjectionProfile;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/ProjectionProfile_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    float[] floatArray0 = new float[9];\n    floatArray0[7] = (-5096.423F);\n    float[] floatArray1 = ProjectionProfile.getFirstDeriv(floatArray0);\n    assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-5096.423F), 0.0F, 5096.423F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    float[] floatArray0 = new float[9];\n    floatArray0[0] = 995.3F;\n    float[] floatArray1 = ProjectionProfile.getFirstDeriv(floatArray0);\n    assertArrayEquals(new float[] { (-995.3F), (-995.3F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (-93.946F);\n    floatArray0[1] = (-796.6174F);\n    float[] floatArray1 = ProjectionProfile.getAutocorrelation(floatArray0);\n    assertArrayEquals(new float[] { 0.0F, 748.39014F, -0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    float[] floatArray0 = new float[7];\n    floatArray0[0] = (-418.7F);\n    float[] floatArray1 = ProjectionProfile.filter(floatArray0, 1905.514F);\n    assertArrayEquals(new float[] { (-418.7F), 797420.06F, (-1.51869773E9F), 2.89238129E12F, (-5.5085812E15F), 1.049117E19F, (-1.9980582E22F) }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    float[] floatArray0 = new float[2];\n    floatArray0[0] = 3035.0F;\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, 3929);\n    assertArrayEquals(new float[] { 0.0F, 0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    float[] floatArray0 = new float[6];\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, (-722));\n    assertArrayEquals(new float[] { -0.0F, -0.0F, -0.0F, -0.0F, -0.0F, -0.0F }, floatArray1, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    float[] floatArray0 = new float[1];\n    float[] floatArray1 = ProjectionProfile.getAutocorrelation(floatArray0);\n    assertEquals(0, floatArray1.length);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.smooth((float[]) null, (-186));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getFirstDeriv((float[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    float[] floatArray0 = new float[1];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getFirstDeriv(floatArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 1\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getAutocorrelation((float[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    float[] floatArray0 = new float[0];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.getAutocorrelation(floatArray0);\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    // Undeclared exception!\n    try {\n        ProjectionProfile.filter((float[]) null, 0.0F);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    float[] floatArray0 = new float[0];\n    // Undeclared exception!\n    try {\n        ProjectionProfile.filter(floatArray0, 0.0F);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // \n        // 0\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    ProjectionProfile projectionProfile0 = null;\n    try {\n        projectionProfile0 = new ProjectionProfile((Page) null, linkedList0, (-102.2418F), (-102.2418F));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.ProjectionProfile\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    float[] floatArray0 = new float[0];\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, (-627));\n    assertNotSame(floatArray1, floatArray0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    float[] floatArray0 = new float[6];\n    float[] floatArray1 = ProjectionProfile.smooth(floatArray0, (-722));\n    assertArrayEquals(new float[] { -0.0F, -0.0F, -0.0F, -0.0F, -0.0F, -0.0F }, floatArray1, 0.01F);\n}",
            "TestRelevantFocal": "[smooth###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:59:46 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Page;\nimport technology.tabula.ProjectionProfile;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class ProjectionProfile_ESTest extends ProjectionProfile_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public R getRight() {\n    return this.right;\n}",
            "all_field_declaration": "private final L left;\nprivate final R right;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private final R right;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Pair(L left, R right);\npublic L getLeft();\npublic R getRight();",
            "public_field": "",
            "Method_statement": "getRight()",
            "Method_name": "getRight",
            "Class_declaration": "public class Pair {\n",
            "constructors": "public Pair(L left, R right) {\n    this.left = left;\n    this.right = right;\n}",
            "all_method_signature": "public Pair(L left, R right);\npublic L getLeft();\npublic R getRight();",
            "Class_name": "Pair",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Pair.java###getRight",
            "Parameter_num": "0",
            "contextMethod": "public L getLeft() {\n    return this.left;\n}",
            "all_Import_statements": "",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public R getRight();",
            "Junit_version": "4",
            "returnType": "R"
        },
        "Test_method": {
            "AllTest2Focal": "[Pair_ESTest.java###test1+++getRight###0, Pair_ESTest.java###test1+++assertNull###1, Pair_ESTest.java###test2+++getLeft###0, Pair_ESTest.java###test2+++assertNull###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:57:41 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Pair_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Pair\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Pair_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Pair\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Pair_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Pair\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Pair;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Pair_ESTest.java###test1",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Integer integer0 = new Integer(1695);\n    Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, (Integer) null);\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);\n    Integer integer0 = pair0.getRight();\n    assertNull(integer0);\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);\n    Integer integer0 = pair0.getLeft();\n    assertNull(integer0);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);\n    Integer integer0 = pair0.getRight();\n    assertNull(integer0);\n}",
            "TestRelevantFocal": "[getRight###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:57:41 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Pair;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Pair_ESTest extends Pair_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static List<Ruling> collapseOrientedRulings(List<Ruling> lines) {\n    return collapseOrientedRulings(lines, COLINEAR_OR_PARALLEL_PIXEL_EXPAND_AMOUNT);\n}",
            "all_field_declaration": "private static int PERPENDICULAR_PIXEL_EXPAND_AMOUNT = 2;\nprivate static int COLINEAR_OR_PARALLEL_PIXEL_EXPAND_AMOUNT = 1;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private static int COLINEAR_OR_PARALLEL_PIXEL_EXPAND_AMOUNT = 1;",
            "Parameter_type": "List<Ruling>",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public Ruling(float top, float left, float width, float height);\npublic Ruling(Point2D p1, Point2D p2);\npublic void normalize();\npublic boolean vertical();\npublic boolean horizontal();\npublic boolean oblique();\npublic float getPosition();\npublic void setPosition(float v);\npublic float getStart();\npublic void setStart(float v);\npublic float getEnd();\npublic void setEnd(float v);\npublic boolean perpendicularTo(Ruling other);\npublic boolean colinear(Point2D point);\npublic boolean nearlyIntersects(Ruling another);\npublic boolean nearlyIntersects(Ruling another, int colinearOrParallelExpandAmount);\npublic double length();\npublic Ruling intersect(Rectangle2D clip);\npublic Ruling expand(float amount);\npublic Point2D intersectionPoint(Ruling other);\npublic boolean equals(Object other);\npublic float getTop();\npublic void setTop(float v);\npublic float getLeft();\npublic void setLeft(float v);\npublic float getBottom();\npublic void setBottom(float v);\npublic float getRight();\npublic void setRight(float v);\npublic float getWidth();\npublic float getHeight();\npublic double getAngle();\npublic String toString();\npublic static List<Ruling> cropRulingsToArea(List<Ruling> rulings, Rectangle2D area);\npublic static Map<Point2D, Ruling[]> findIntersections(List<Ruling> horizontals, List<Ruling> verticals);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines, int expandAmount);",
            "public_field": "",
            "Method_statement": "collapseOrientedRulings(List<Ruling> lines)",
            "Method_name": "collapseOrientedRulings",
            "Class_declaration": "public class Ruling {\n",
            "constructors": "public Ruling(float top, float left, float width, float height) {\n    this(new Point2D.Float(left, top), new Point2D.Float(left + width, top + height));\n}public Ruling(Point2D p1, Point2D p2) {\n    super(p1, p2);\n    this.normalize();\n}",
            "all_method_signature": "public Ruling(float top, float left, float width, float height);\npublic Ruling(Point2D p1, Point2D p2);\npublic void normalize();\npublic boolean vertical();\npublic boolean horizontal();\npublic boolean oblique();\npublic float getPosition();\npublic void setPosition(float v);\npublic float getStart();\npublic void setStart(float v);\npublic float getEnd();\npublic void setEnd(float v);\nprivate void setStartEnd(float start, float end);\npublic boolean perpendicularTo(Ruling other);\npublic boolean colinear(Point2D point);\npublic boolean nearlyIntersects(Ruling another);\npublic boolean nearlyIntersects(Ruling another, int colinearOrParallelExpandAmount);\npublic double length();\npublic Ruling intersect(Rectangle2D clip);\npublic Ruling expand(float amount);\npublic Point2D intersectionPoint(Ruling other);\npublic boolean equals(Object other);\npublic float getTop();\npublic void setTop(float v);\npublic float getLeft();\npublic void setLeft(float v);\npublic float getBottom();\npublic void setBottom(float v);\npublic float getRight();\npublic void setRight(float v);\npublic float getWidth();\npublic float getHeight();\npublic double getAngle();\npublic String toString();\npublic static List<Ruling> cropRulingsToArea(List<Ruling> rulings, Rectangle2D area);\npublic static Map<Point2D, Ruling[]> findIntersections(List<Ruling> horizontals, List<Ruling> verticals);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines, int expandAmount);",
            "Class_name": "Ruling",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Ruling.java###collapseOrientedRulings",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Line2D;\n\nimport java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.Comparator;\n\nimport java.util.Formatter;\n\nimport java.util.List;\n\nimport java.util.Locale;\n\nimport java.util.Map;\n\nimport java.util.TreeMap;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public static List<Ruling> collapseOrientedRulings(List<Ruling> lines);",
            "Junit_version": "4",
            "returnType": "List<Ruling>"
        },
        "Test_method": {
            "AllTest2Focal": "[Ruling_ESTest.java###test00+++offerFirst###1, Ruling_ESTest.java###test00+++offerFirst###1, Ruling_ESTest.java###test00+++verifyException###2, Ruling_ESTest.java###test00+++collapseOrientedRulings###1, Ruling_ESTest.java###test00+++fail###1, Ruling_ESTest.java###test01+++verifyException###2, Ruling_ESTest.java###test01+++fail###1, Ruling_ESTest.java###test02+++verifyException###2, Ruling_ESTest.java###test02+++fail###1, Ruling_ESTest.java###test03+++offerFirst###1, Ruling_ESTest.java###test03+++verifyException###2, Ruling_ESTest.java###test03+++collapseOrientedRulings###2, Ruling_ESTest.java###test03+++fail###1, Ruling_ESTest.java###test04+++collapseOrientedRulings###2, Ruling_ESTest.java###test04+++assertTrue###1, Ruling_ESTest.java###test04+++isEmpty###0, Ruling_ESTest.java###test05+++collapseOrientedRulings###1, Ruling_ESTest.java###test05+++assertTrue###1, Ruling_ESTest.java###test05+++isEmpty###0, Ruling_ESTest.java###test06+++offerFirst###1, Ruling_ESTest.java###test06+++verifyException###2, Ruling_ESTest.java###test06+++findIntersections###2, Ruling_ESTest.java###test06+++fail###1, Ruling_ESTest.java###test07+++offerFirst###1, Ruling_ESTest.java###test07+++verifyException###2, Ruling_ESTest.java###test07+++findIntersections###2, Ruling_ESTest.java###test07+++fail###1, Ruling_ESTest.java###test08+++offerFirst###1, Ruling_ESTest.java###test08+++verifyException###2, Ruling_ESTest.java###test08+++cropRulingsToArea###2, Ruling_ESTest.java###test08+++fail###1, Ruling_ESTest.java###test09+++cropRulingsToArea###2, Ruling_ESTest.java###test09+++assertEquals###2, Ruling_ESTest.java###test09+++size###0, Ruling_ESTest.java###test10+++verifyException###2, Ruling_ESTest.java###test10+++fail###1, Ruling_ESTest.java###test11+++findIntersections###2, Ruling_ESTest.java###test11+++assertTrue###1, Ruling_ESTest.java###test11+++isEmpty###0, Ruling_ESTest.java###test12+++verifyException###2, Ruling_ESTest.java###test12+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:09:27 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Ruling_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Ruling\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Ruling_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Utils\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Ruling_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$5\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Ruling;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Ruling_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling$4\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling((Point2D) null, (Point2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Line2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling(point0, point0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-1385));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-2106073439));\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();\n    // Undeclared exception!\n    try {\n        Ruling.findIntersections(linkedList1, linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.findIntersections(linkedList0, linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle();\n    // Undeclared exception!\n    try {\n        Ruling.cropRulingsToArea(linkedList0, rectangle0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle();\n    List<Ruling> list0 = Ruling.cropRulingsToArea(linkedList0, rectangle0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling(1.0F, 1.0F, 1.0F, 1.0F);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    Map<Point2D, Ruling[]> map0 = Ruling.findIntersections(linkedList0, linkedList0);\n    assertTrue(map0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling((-1659.1841F), (-1659.1841F), (-1659.1841F), (-1659.1841F));\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);\n    assertTrue(list0.isEmpty());\n}",
            "TestRelevantFocal": "[collapseOrientedRulings###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:09:27 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Ruling;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Ruling_ESTest extends Ruling_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static List<Ruling> collapseOrientedRulings(List<Ruling> lines, int expandAmount) {\n    ArrayList<Ruling> rv = new ArrayList<>();\n    Collections.sort(lines, new Comparator<Ruling>() {\n\n        @Override\n        public int compare(Ruling a, Ruling b) {\n            final float diff = a.getPosition() - b.getPosition();\n            return java.lang.Float.compare(diff == 0 ? a.getStart() - b.getStart() : diff, 0f);\n        }\n    });\n    for (Ruling next_line : lines) {\n        Ruling last = rv.isEmpty() ? null : rv.get(rv.size() - 1);\n        if (last != null && Utils.feq(next_line.getPosition(), last.getPosition()) && last.nearlyIntersects(next_line, expandAmount)) {\n            final float lastStart = last.getStart();\n            final float lastEnd = last.getEnd();\n            final boolean lastFlipped = lastStart > lastEnd;\n            final boolean nextFlipped = next_line.getStart() > next_line.getEnd();\n            boolean differentDirections = nextFlipped != lastFlipped;\n            float nextS = differentDirections ? next_line.getEnd() : next_line.getStart();\n            float nextE = differentDirections ? next_line.getStart() : next_line.getEnd();\n            final float newStart = lastFlipped ? Math.max(nextS, lastStart) : Math.min(nextS, lastStart);\n            final float newEnd = lastFlipped ? Math.min(nextE, lastEnd) : Math.max(nextE, lastEnd);\n            last.setStartEnd(newStart, newEnd);\n            assert !last.oblique();\n        } else if (next_line.length() == 0) {\n            continue;\n        } else {\n            rv.add(next_line);\n        }\n    }\n    return rv;\n}",
            "all_field_declaration": "private static int PERPENDICULAR_PIXEL_EXPAND_AMOUNT = 2;\nprivate static int COLINEAR_OR_PARALLEL_PIXEL_EXPAND_AMOUNT = 1;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "",
            "Parameter_type": "List<Ruling>,int",
            "Import_statements": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n",
            "public_method_signature": "public Ruling(float top, float left, float width, float height);\npublic Ruling(Point2D p1, Point2D p2);\npublic void normalize();\npublic boolean vertical();\npublic boolean horizontal();\npublic boolean oblique();\npublic float getPosition();\npublic void setPosition(float v);\npublic float getStart();\npublic void setStart(float v);\npublic float getEnd();\npublic void setEnd(float v);\npublic boolean perpendicularTo(Ruling other);\npublic boolean colinear(Point2D point);\npublic boolean nearlyIntersects(Ruling another);\npublic boolean nearlyIntersects(Ruling another, int colinearOrParallelExpandAmount);\npublic double length();\npublic Ruling intersect(Rectangle2D clip);\npublic Ruling expand(float amount);\npublic Point2D intersectionPoint(Ruling other);\npublic boolean equals(Object other);\npublic float getTop();\npublic void setTop(float v);\npublic float getLeft();\npublic void setLeft(float v);\npublic float getBottom();\npublic void setBottom(float v);\npublic float getRight();\npublic void setRight(float v);\npublic float getWidth();\npublic float getHeight();\npublic double getAngle();\npublic String toString();\npublic static List<Ruling> cropRulingsToArea(List<Ruling> rulings, Rectangle2D area);\npublic static Map<Point2D, Ruling[]> findIntersections(List<Ruling> horizontals, List<Ruling> verticals);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines, int expandAmount);",
            "public_field": "",
            "Method_statement": "collapseOrientedRulings(List<Ruling> lines, int expandAmount)",
            "Method_name": "collapseOrientedRulings",
            "Class_declaration": "public class Ruling {\n",
            "constructors": "public Ruling(float top, float left, float width, float height) {\n    this(new Point2D.Float(left, top), new Point2D.Float(left + width, top + height));\n}public Ruling(Point2D p1, Point2D p2) {\n    super(p1, p2);\n    this.normalize();\n}",
            "all_method_signature": "public Ruling(float top, float left, float width, float height);\npublic Ruling(Point2D p1, Point2D p2);\npublic void normalize();\npublic boolean vertical();\npublic boolean horizontal();\npublic boolean oblique();\npublic float getPosition();\npublic void setPosition(float v);\npublic float getStart();\npublic void setStart(float v);\npublic float getEnd();\npublic void setEnd(float v);\nprivate void setStartEnd(float start, float end);\npublic boolean perpendicularTo(Ruling other);\npublic boolean colinear(Point2D point);\npublic boolean nearlyIntersects(Ruling another);\npublic boolean nearlyIntersects(Ruling another, int colinearOrParallelExpandAmount);\npublic double length();\npublic Ruling intersect(Rectangle2D clip);\npublic Ruling expand(float amount);\npublic Point2D intersectionPoint(Ruling other);\npublic boolean equals(Object other);\npublic float getTop();\npublic void setTop(float v);\npublic float getLeft();\npublic void setLeft(float v);\npublic float getBottom();\npublic void setBottom(float v);\npublic float getRight();\npublic void setRight(float v);\npublic float getWidth();\npublic float getHeight();\npublic double getAngle();\npublic String toString();\npublic static List<Ruling> cropRulingsToArea(List<Ruling> rulings, Rectangle2D area);\npublic static Map<Point2D, Ruling[]> findIntersections(List<Ruling> horizontals, List<Ruling> verticals);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines, int expandAmount);",
            "Class_name": "Ruling",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Ruling.java###collapseOrientedRulings",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Line2D;\n\nimport java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.Comparator;\n\nimport java.util.Formatter;\n\nimport java.util.List;\n\nimport java.util.Locale;\n\nimport java.util.Map;\n\nimport java.util.TreeMap;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public static List<Ruling> collapseOrientedRulings(List<Ruling> lines, int expandAmount);",
            "Junit_version": "4",
            "returnType": "List<Ruling>"
        },
        "Test_method": {
            "AllTest2Focal": "[Ruling_ESTest.java###test00+++offerFirst###1, Ruling_ESTest.java###test00+++offerFirst###1, Ruling_ESTest.java###test00+++verifyException###2, Ruling_ESTest.java###test00+++collapseOrientedRulings###1, Ruling_ESTest.java###test00+++fail###1, Ruling_ESTest.java###test01+++verifyException###2, Ruling_ESTest.java###test01+++fail###1, Ruling_ESTest.java###test02+++verifyException###2, Ruling_ESTest.java###test02+++fail###1, Ruling_ESTest.java###test03+++offerFirst###1, Ruling_ESTest.java###test03+++verifyException###2, Ruling_ESTest.java###test03+++collapseOrientedRulings###2, Ruling_ESTest.java###test03+++fail###1, Ruling_ESTest.java###test04+++collapseOrientedRulings###2, Ruling_ESTest.java###test04+++assertTrue###1, Ruling_ESTest.java###test04+++isEmpty###0, Ruling_ESTest.java###test05+++collapseOrientedRulings###1, Ruling_ESTest.java###test05+++assertTrue###1, Ruling_ESTest.java###test05+++isEmpty###0, Ruling_ESTest.java###test06+++offerFirst###1, Ruling_ESTest.java###test06+++verifyException###2, Ruling_ESTest.java###test06+++findIntersections###2, Ruling_ESTest.java###test06+++fail###1, Ruling_ESTest.java###test07+++offerFirst###1, Ruling_ESTest.java###test07+++verifyException###2, Ruling_ESTest.java###test07+++findIntersections###2, Ruling_ESTest.java###test07+++fail###1, Ruling_ESTest.java###test08+++offerFirst###1, Ruling_ESTest.java###test08+++verifyException###2, Ruling_ESTest.java###test08+++cropRulingsToArea###2, Ruling_ESTest.java###test08+++fail###1, Ruling_ESTest.java###test09+++cropRulingsToArea###2, Ruling_ESTest.java###test09+++assertEquals###2, Ruling_ESTest.java###test09+++size###0, Ruling_ESTest.java###test10+++verifyException###2, Ruling_ESTest.java###test10+++fail###1, Ruling_ESTest.java###test11+++findIntersections###2, Ruling_ESTest.java###test11+++assertTrue###1, Ruling_ESTest.java###test11+++isEmpty###0, Ruling_ESTest.java###test12+++verifyException###2, Ruling_ESTest.java###test12+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:09:27 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Ruling_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Ruling\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Ruling_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Utils\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Ruling_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$5\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Ruling;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Ruling_ESTest.java###test04",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling$4\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling((Point2D) null, (Point2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Line2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling(point0, point0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-1385));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-2106073439));\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();\n    // Undeclared exception!\n    try {\n        Ruling.findIntersections(linkedList1, linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.findIntersections(linkedList0, linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle();\n    // Undeclared exception!\n    try {\n        Ruling.cropRulingsToArea(linkedList0, rectangle0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle();\n    List<Ruling> list0 = Ruling.cropRulingsToArea(linkedList0, rectangle0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling(1.0F, 1.0F, 1.0F, 1.0F);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    Map<Point2D, Ruling[]> map0 = Ruling.findIntersections(linkedList0, linkedList0);\n    assertTrue(map0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling((-1659.1841F), (-1659.1841F), (-1659.1841F), (-1659.1841F));\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-2106073439));\n    assertTrue(list0.isEmpty());\n}",
            "TestRelevantFocal": "[collapseOrientedRulings###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:09:27 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Ruling;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Ruling_ESTest extends Ruling_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static Map<Point2D, Ruling[]> findIntersections(List<Ruling> horizontals, List<Ruling> verticals) {\n    class SortObject {\n\n        protected SOType type;\n\n        protected float position;\n\n        protected Ruling ruling;\n\n        public SortObject(SOType type, float position, Ruling ruling) {\n            this.type = type;\n            this.position = position;\n            this.ruling = ruling;\n        }\n    }\n    List<SortObject> sos = new ArrayList<>();\n    TreeMap<Ruling, Boolean> tree = new TreeMap<>(new Comparator<Ruling>() {\n\n        @Override\n        public int compare(Ruling o1, Ruling o2) {\n            return java.lang.Double.compare(o1.getTop(), o2.getTop());\n        }\n    });\n    TreeMap<Point2D, Ruling[]> rv = new TreeMap<>(new Comparator<Point2D>() {\n\n        @Override\n        public int compare(Point2D o1, Point2D o2) {\n            if (o1.getY() > o2.getY())\n                return 1;\n            if (o1.getY() < o2.getY())\n                return -1;\n            if (o1.getX() > o2.getX())\n                return 1;\n            if (o1.getX() < o2.getX())\n                return -1;\n            return 0;\n        }\n    });\n    for (Ruling h : horizontals) {\n        sos.add(new SortObject(SOType.HLEFT, h.getLeft() - PERPENDICULAR_PIXEL_EXPAND_AMOUNT, h));\n        sos.add(new SortObject(SOType.HRIGHT, h.getRight() + PERPENDICULAR_PIXEL_EXPAND_AMOUNT, h));\n    }\n    for (Ruling v : verticals) {\n        sos.add(new SortObject(SOType.VERTICAL, v.getLeft(), v));\n    }\n    Collections.sort(sos, new Comparator<SortObject>() {\n\n        @Override\n        public int compare(SortObject a, SortObject b) {\n            int rv;\n            if (Utils.feq(a.position, b.position)) {\n                if (a.type == SOType.VERTICAL && b.type == SOType.HLEFT) {\n                    rv = 1;\n                } else if (a.type == SOType.VERTICAL && b.type == SOType.HRIGHT) {\n                    rv = -1;\n                } else if (a.type == SOType.HLEFT && b.type == SOType.VERTICAL) {\n                    rv = -1;\n                } else if (a.type == SOType.HRIGHT && b.type == SOType.VERTICAL) {\n                    rv = 1;\n                } else {\n                    rv = java.lang.Double.compare(a.position, b.position);\n                }\n            } else {\n                return java.lang.Double.compare(a.position, b.position);\n            }\n            return rv;\n        }\n    });\n    for (SortObject so : sos) {\n        switch(so.type) {\n            case VERTICAL:\n                for (Map.Entry<Ruling, Boolean> h : tree.entrySet()) {\n                    Point2D i = h.getKey().intersectionPoint(so.ruling);\n                    if (i == null) {\n                        continue;\n                    }\n                    rv.put(i, new Ruling[] { h.getKey().expand(PERPENDICULAR_PIXEL_EXPAND_AMOUNT), so.ruling.expand(PERPENDICULAR_PIXEL_EXPAND_AMOUNT) });\n                }\n                break;\n            case HRIGHT:\n                tree.remove(so.ruling);\n                break;\n            case HLEFT:\n                tree.put(so.ruling, true);\n                break;\n        }\n    }\n    return rv;\n}",
            "all_field_declaration": "private static int PERPENDICULAR_PIXEL_EXPAND_AMOUNT = 2;\nprivate static int COLINEAR_OR_PARALLEL_PIXEL_EXPAND_AMOUNT = 1;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "9",
            "Filed": "private static int PERPENDICULAR_PIXEL_EXPAND_AMOUNT = 2;",
            "Parameter_type": "List<Ruling>,List<Ruling>",
            "Import_statements": "import java.awt.geom.Point2D;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\n",
            "public_method_signature": "public Ruling(float top, float left, float width, float height);\npublic Ruling(Point2D p1, Point2D p2);\npublic void normalize();\npublic boolean vertical();\npublic boolean horizontal();\npublic boolean oblique();\npublic float getPosition();\npublic void setPosition(float v);\npublic float getStart();\npublic void setStart(float v);\npublic float getEnd();\npublic void setEnd(float v);\npublic boolean perpendicularTo(Ruling other);\npublic boolean colinear(Point2D point);\npublic boolean nearlyIntersects(Ruling another);\npublic boolean nearlyIntersects(Ruling another, int colinearOrParallelExpandAmount);\npublic double length();\npublic Ruling intersect(Rectangle2D clip);\npublic Ruling expand(float amount);\npublic Point2D intersectionPoint(Ruling other);\npublic boolean equals(Object other);\npublic float getTop();\npublic void setTop(float v);\npublic float getLeft();\npublic void setLeft(float v);\npublic float getBottom();\npublic void setBottom(float v);\npublic float getRight();\npublic void setRight(float v);\npublic float getWidth();\npublic float getHeight();\npublic double getAngle();\npublic String toString();\npublic static List<Ruling> cropRulingsToArea(List<Ruling> rulings, Rectangle2D area);\npublic static Map<Point2D, Ruling[]> findIntersections(List<Ruling> horizontals, List<Ruling> verticals);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines, int expandAmount);",
            "public_field": "",
            "Method_statement": "findIntersections(List<Ruling> horizontals, List<Ruling> verticals)",
            "Method_name": "findIntersections",
            "Class_declaration": "public class Ruling {\n",
            "constructors": "public Ruling(float top, float left, float width, float height) {\n    this(new Point2D.Float(left, top), new Point2D.Float(left + width, top + height));\n}public Ruling(Point2D p1, Point2D p2) {\n    super(p1, p2);\n    this.normalize();\n}",
            "all_method_signature": "public Ruling(float top, float left, float width, float height);\npublic Ruling(Point2D p1, Point2D p2);\npublic void normalize();\npublic boolean vertical();\npublic boolean horizontal();\npublic boolean oblique();\npublic float getPosition();\npublic void setPosition(float v);\npublic float getStart();\npublic void setStart(float v);\npublic float getEnd();\npublic void setEnd(float v);\nprivate void setStartEnd(float start, float end);\npublic boolean perpendicularTo(Ruling other);\npublic boolean colinear(Point2D point);\npublic boolean nearlyIntersects(Ruling another);\npublic boolean nearlyIntersects(Ruling another, int colinearOrParallelExpandAmount);\npublic double length();\npublic Ruling intersect(Rectangle2D clip);\npublic Ruling expand(float amount);\npublic Point2D intersectionPoint(Ruling other);\npublic boolean equals(Object other);\npublic float getTop();\npublic void setTop(float v);\npublic float getLeft();\npublic void setLeft(float v);\npublic float getBottom();\npublic void setBottom(float v);\npublic float getRight();\npublic void setRight(float v);\npublic float getWidth();\npublic float getHeight();\npublic double getAngle();\npublic String toString();\npublic static List<Ruling> cropRulingsToArea(List<Ruling> rulings, Rectangle2D area);\npublic static Map<Point2D, Ruling[]> findIntersections(List<Ruling> horizontals, List<Ruling> verticals);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines, int expandAmount);",
            "Class_name": "Ruling",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Ruling.java###findIntersections",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Line2D;\n\nimport java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.Comparator;\n\nimport java.util.Formatter;\n\nimport java.util.List;\n\nimport java.util.Locale;\n\nimport java.util.Map;\n\nimport java.util.TreeMap;\n",
            "comment": " based on http://people.csail.mit.edu/indyk/6.838-old/handouts/lec2.pdf",
            "packageName": "technology.tabula",
            "method_signature": "public static Map<Point2D, Ruling[]> findIntersections(List<Ruling> horizontals, List<Ruling> verticals);",
            "Junit_version": "4",
            "returnType": "Map<Point2D,Ruling[]>"
        },
        "Test_method": {
            "AllTest2Focal": "[Ruling_ESTest.java###test00+++offerFirst###1, Ruling_ESTest.java###test00+++offerFirst###1, Ruling_ESTest.java###test00+++verifyException###2, Ruling_ESTest.java###test00+++collapseOrientedRulings###1, Ruling_ESTest.java###test00+++fail###1, Ruling_ESTest.java###test01+++verifyException###2, Ruling_ESTest.java###test01+++fail###1, Ruling_ESTest.java###test02+++verifyException###2, Ruling_ESTest.java###test02+++fail###1, Ruling_ESTest.java###test03+++offerFirst###1, Ruling_ESTest.java###test03+++verifyException###2, Ruling_ESTest.java###test03+++collapseOrientedRulings###2, Ruling_ESTest.java###test03+++fail###1, Ruling_ESTest.java###test04+++collapseOrientedRulings###2, Ruling_ESTest.java###test04+++assertTrue###1, Ruling_ESTest.java###test04+++isEmpty###0, Ruling_ESTest.java###test05+++collapseOrientedRulings###1, Ruling_ESTest.java###test05+++assertTrue###1, Ruling_ESTest.java###test05+++isEmpty###0, Ruling_ESTest.java###test06+++offerFirst###1, Ruling_ESTest.java###test06+++verifyException###2, Ruling_ESTest.java###test06+++findIntersections###2, Ruling_ESTest.java###test06+++fail###1, Ruling_ESTest.java###test07+++offerFirst###1, Ruling_ESTest.java###test07+++verifyException###2, Ruling_ESTest.java###test07+++findIntersections###2, Ruling_ESTest.java###test07+++fail###1, Ruling_ESTest.java###test08+++offerFirst###1, Ruling_ESTest.java###test08+++verifyException###2, Ruling_ESTest.java###test08+++cropRulingsToArea###2, Ruling_ESTest.java###test08+++fail###1, Ruling_ESTest.java###test09+++cropRulingsToArea###2, Ruling_ESTest.java###test09+++assertEquals###2, Ruling_ESTest.java###test09+++size###0, Ruling_ESTest.java###test10+++verifyException###2, Ruling_ESTest.java###test10+++fail###1, Ruling_ESTest.java###test11+++findIntersections###2, Ruling_ESTest.java###test11+++assertTrue###1, Ruling_ESTest.java###test11+++isEmpty###0, Ruling_ESTest.java###test12+++verifyException###2, Ruling_ESTest.java###test12+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:09:27 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Ruling_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Ruling\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Ruling_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Utils\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Ruling_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$5\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport technology.tabula.Ruling;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Ruling_ESTest.java###test11",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling$4\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling((Point2D) null, (Point2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Line2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling(point0, point0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-1385));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-2106073439));\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();\n    // Undeclared exception!\n    try {\n        Ruling.findIntersections(linkedList1, linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.findIntersections(linkedList0, linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle();\n    // Undeclared exception!\n    try {\n        Ruling.cropRulingsToArea(linkedList0, rectangle0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle();\n    List<Ruling> list0 = Ruling.cropRulingsToArea(linkedList0, rectangle0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling(1.0F, 1.0F, 1.0F, 1.0F);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    Map<Point2D, Ruling[]> map0 = Ruling.findIntersections(linkedList0, linkedList0);\n    assertTrue(map0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling((-1659.1841F), (-1659.1841F), (-1659.1841F), (-1659.1841F));\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    Map<Point2D, Ruling[]> map0 = Ruling.findIntersections(linkedList0, linkedList0);\n    assertTrue(map0.isEmpty());\n}",
            "TestRelevantFocal": "[findIntersections###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:09:27 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Ruling;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Ruling_ESTest extends Ruling_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static List<Ruling> cropRulingsToArea(List<Ruling> rulings, Rectangle2D area) {\n    ArrayList<Ruling> rv = new ArrayList<>();\n    for (Ruling r : rulings) {\n        if (r.intersects(area)) {\n            rv.add(r.intersect(area));\n        }\n    }\n    return rv;\n}",
            "all_field_declaration": "private static int PERPENDICULAR_PIXEL_EXPAND_AMOUNT = 2;\nprivate static int COLINEAR_OR_PARALLEL_PIXEL_EXPAND_AMOUNT = 1;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "List<Ruling>,Rectangle2D",
            "Import_statements": "import java.awt.geom.Rectangle2D;\nimport java.util.ArrayList;\nimport java.util.List;\n",
            "public_method_signature": "public Ruling(float top, float left, float width, float height);\npublic Ruling(Point2D p1, Point2D p2);\npublic void normalize();\npublic boolean vertical();\npublic boolean horizontal();\npublic boolean oblique();\npublic float getPosition();\npublic void setPosition(float v);\npublic float getStart();\npublic void setStart(float v);\npublic float getEnd();\npublic void setEnd(float v);\npublic boolean perpendicularTo(Ruling other);\npublic boolean colinear(Point2D point);\npublic boolean nearlyIntersects(Ruling another);\npublic boolean nearlyIntersects(Ruling another, int colinearOrParallelExpandAmount);\npublic double length();\npublic Ruling intersect(Rectangle2D clip);\npublic Ruling expand(float amount);\npublic Point2D intersectionPoint(Ruling other);\npublic boolean equals(Object other);\npublic float getTop();\npublic void setTop(float v);\npublic float getLeft();\npublic void setLeft(float v);\npublic float getBottom();\npublic void setBottom(float v);\npublic float getRight();\npublic void setRight(float v);\npublic float getWidth();\npublic float getHeight();\npublic double getAngle();\npublic String toString();\npublic static List<Ruling> cropRulingsToArea(List<Ruling> rulings, Rectangle2D area);\npublic static Map<Point2D, Ruling[]> findIntersections(List<Ruling> horizontals, List<Ruling> verticals);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines, int expandAmount);",
            "public_field": "",
            "Method_statement": "cropRulingsToArea(List<Ruling> rulings, Rectangle2D area)",
            "Method_name": "cropRulingsToArea",
            "Class_declaration": "public class Ruling {\n",
            "constructors": "public Ruling(float top, float left, float width, float height) {\n    this(new Point2D.Float(left, top), new Point2D.Float(left + width, top + height));\n}public Ruling(Point2D p1, Point2D p2) {\n    super(p1, p2);\n    this.normalize();\n}",
            "all_method_signature": "public Ruling(float top, float left, float width, float height);\npublic Ruling(Point2D p1, Point2D p2);\npublic void normalize();\npublic boolean vertical();\npublic boolean horizontal();\npublic boolean oblique();\npublic float getPosition();\npublic void setPosition(float v);\npublic float getStart();\npublic void setStart(float v);\npublic float getEnd();\npublic void setEnd(float v);\nprivate void setStartEnd(float start, float end);\npublic boolean perpendicularTo(Ruling other);\npublic boolean colinear(Point2D point);\npublic boolean nearlyIntersects(Ruling another);\npublic boolean nearlyIntersects(Ruling another, int colinearOrParallelExpandAmount);\npublic double length();\npublic Ruling intersect(Rectangle2D clip);\npublic Ruling expand(float amount);\npublic Point2D intersectionPoint(Ruling other);\npublic boolean equals(Object other);\npublic float getTop();\npublic void setTop(float v);\npublic float getLeft();\npublic void setLeft(float v);\npublic float getBottom();\npublic void setBottom(float v);\npublic float getRight();\npublic void setRight(float v);\npublic float getWidth();\npublic float getHeight();\npublic double getAngle();\npublic String toString();\npublic static List<Ruling> cropRulingsToArea(List<Ruling> rulings, Rectangle2D area);\npublic static Map<Point2D, Ruling[]> findIntersections(List<Ruling> horizontals, List<Ruling> verticals);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines);\npublic static List<Ruling> collapseOrientedRulings(List<Ruling> lines, int expandAmount);",
            "Class_name": "Ruling",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Ruling.java###cropRulingsToArea",
            "Parameter_num": "2",
            "contextMethod": "private void setStartEnd(float start, float end) {\n    if (this.oblique()) {\n        throw new UnsupportedOperationException();\n    }\n    if (this.vertical()) {\n        this.setTop(start);\n        this.setBottom(end);\n    } else {\n        this.setLeft(start);\n        this.setRight(end);\n    }\n}\npublic boolean nearlyIntersects(Ruling another, int colinearOrParallelExpandAmount) {\n    if (this.intersectsLine(another)) {\n        return true;\n    }\n    boolean rv = false;\n    if (this.perpendicularTo(another)) {\n        rv = this.expand(PERPENDICULAR_PIXEL_EXPAND_AMOUNT).intersectsLine(another);\n    } else {\n        rv = this.expand(colinearOrParallelExpandAmount).intersectsLine(another.expand(colinearOrParallelExpandAmount));\n    }\n    return rv;\n}",
            "all_Import_statements": "import java.awt.geom.Line2D;\n\nimport java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.Comparator;\n\nimport java.util.Formatter;\n\nimport java.util.List;\n\nimport java.util.Locale;\n\nimport java.util.Map;\n\nimport java.util.TreeMap;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public static List<Ruling> cropRulingsToArea(List<Ruling> rulings, Rectangle2D area);",
            "Junit_version": "4",
            "returnType": "List<Ruling>"
        },
        "Test_method": {
            "AllTest2Focal": "[Ruling_ESTest.java###test00+++offerFirst###1, Ruling_ESTest.java###test00+++offerFirst###1, Ruling_ESTest.java###test00+++verifyException###2, Ruling_ESTest.java###test00+++collapseOrientedRulings###1, Ruling_ESTest.java###test00+++fail###1, Ruling_ESTest.java###test01+++verifyException###2, Ruling_ESTest.java###test01+++fail###1, Ruling_ESTest.java###test02+++verifyException###2, Ruling_ESTest.java###test02+++fail###1, Ruling_ESTest.java###test03+++offerFirst###1, Ruling_ESTest.java###test03+++verifyException###2, Ruling_ESTest.java###test03+++collapseOrientedRulings###2, Ruling_ESTest.java###test03+++fail###1, Ruling_ESTest.java###test04+++collapseOrientedRulings###2, Ruling_ESTest.java###test04+++assertTrue###1, Ruling_ESTest.java###test04+++isEmpty###0, Ruling_ESTest.java###test05+++collapseOrientedRulings###1, Ruling_ESTest.java###test05+++assertTrue###1, Ruling_ESTest.java###test05+++isEmpty###0, Ruling_ESTest.java###test06+++offerFirst###1, Ruling_ESTest.java###test06+++verifyException###2, Ruling_ESTest.java###test06+++findIntersections###2, Ruling_ESTest.java###test06+++fail###1, Ruling_ESTest.java###test07+++offerFirst###1, Ruling_ESTest.java###test07+++verifyException###2, Ruling_ESTest.java###test07+++findIntersections###2, Ruling_ESTest.java###test07+++fail###1, Ruling_ESTest.java###test08+++offerFirst###1, Ruling_ESTest.java###test08+++verifyException###2, Ruling_ESTest.java###test08+++cropRulingsToArea###2, Ruling_ESTest.java###test08+++fail###1, Ruling_ESTest.java###test09+++cropRulingsToArea###2, Ruling_ESTest.java###test09+++assertEquals###2, Ruling_ESTest.java###test09+++size###0, Ruling_ESTest.java###test10+++verifyException###2, Ruling_ESTest.java###test10+++fail###1, Ruling_ESTest.java###test11+++findIntersections###2, Ruling_ESTest.java###test11+++assertTrue###1, Ruling_ESTest.java###test11+++isEmpty###0, Ruling_ESTest.java###test12+++verifyException###2, Ruling_ESTest.java###test12+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:09:27 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Ruling_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Ruling\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Ruling_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Utils\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Ruling_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$5\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Ruling;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Ruling_ESTest.java###test09",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling$4\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling((Point2D) null, (Point2D) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"java.awt.geom.Line2D\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Point point0 = new Point();\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling(point0, point0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-1385));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-2106073439));\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();\n    // Undeclared exception!\n    try {\n        Ruling.findIntersections(linkedList1, linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    // Undeclared exception!\n    try {\n        Ruling.findIntersections(linkedList0, linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.offerFirst((Ruling) null);\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle();\n    // Undeclared exception!\n    try {\n        Ruling.cropRulingsToArea(linkedList0, rectangle0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle();\n    List<Ruling> list0 = Ruling.cropRulingsToArea(linkedList0, rectangle0);\n    assertEquals(0, list0.size());\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling(1.0F, 1.0F, 1.0F, 1.0F);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    Map<Point2D, Ruling[]> map0 = Ruling.findIntersections(linkedList0, linkedList0);\n    assertTrue(map0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Ruling ruling0 = null;\n    try {\n        ruling0 = new Ruling((-1659.1841F), (-1659.1841F), (-1659.1841F), (-1659.1841F));\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    java.awt.Rectangle rectangle0 = new java.awt.Rectangle();\n    List<Ruling> list0 = Ruling.cropRulingsToArea(linkedList0, rectangle0);\n    assertEquals(0, list0.size());\n}",
            "TestRelevantFocal": "[cropRulingsToArea###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:09:27 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Ruling;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Ruling_ESTest extends Ruling_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public RectangularTextContainer<T> merge(RectangularTextContainer<T> other) {\n    if (compareTo(other) < 0) {\n        this.getTextElements().addAll(other.getTextElements());\n    } else {\n        this.getTextElements().addAll(0, other.getTextElements());\n    }\n    super.merge(other);\n    return this;\n}",
            "all_field_declaration": "protected List<T> textElements = new ArrayList<>();",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "RectangularTextContainer<T>",
            "Import_statements": "",
            "public_method_signature": "public RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "public_field": "",
            "Method_statement": "merge(RectangularTextContainer<T> other)",
            "Method_name": "merge",
            "Class_declaration": "public class RectangularTextContainer {\n",
            "constructors": "protected RectangularTextContainer(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}",
            "all_method_signature": "protected RectangularTextContainer(float top, float left, float width, float height);\npublic RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "Class_name": "RectangularTextContainer",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/RectangularTextContainer.java###merge",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public RectangularTextContainer<T> merge(RectangularTextContainer<T> other);",
            "Junit_version": "4",
            "returnType": "RectangularTextContainer<T>"
        },
        "Test_method": {
            "AllTest2Focal": "[RectangularTextContainer_ESTest.java###test00+++merge###1, RectangularTextContainer_ESTest.java###test00+++assertEquals###3, RectangularTextContainer_ESTest.java###test01+++merge###1, RectangularTextContainer_ESTest.java###test01+++assertEquals###3, RectangularTextContainer_ESTest.java###test02+++merge###1, RectangularTextContainer_ESTest.java###test02+++assertEquals###3, RectangularTextContainer_ESTest.java###test03+++setTextElements###1, RectangularTextContainer_ESTest.java###test03+++getTextElements###0, RectangularTextContainer_ESTest.java###test03+++assertNull###1, RectangularTextContainer_ESTest.java###test04+++getTextElements###0, RectangularTextContainer_ESTest.java###test04+++assertTrue###1, RectangularTextContainer_ESTest.java###test04+++isEmpty###0, RectangularTextContainer_ESTest.java###test05+++getText###1, RectangularTextContainer_ESTest.java###test05+++assertEquals###2, RectangularTextContainer_ESTest.java###test06+++getText###0, RectangularTextContainer_ESTest.java###test06+++assertEquals###2, RectangularTextContainer_ESTest.java###test07+++verifyException###2, RectangularTextContainer_ESTest.java###test07+++merge###1, RectangularTextContainer_ESTest.java###test07+++fail###1, RectangularTextContainer_ESTest.java###test08+++setTextElements###1, RectangularTextContainer_ESTest.java###test08+++verifyException###2, RectangularTextContainer_ESTest.java###test08+++getText###1, RectangularTextContainer_ESTest.java###test08+++fail###1, RectangularTextContainer_ESTest.java###test09+++setTextElements###1, RectangularTextContainer_ESTest.java###test09+++verifyException###2, RectangularTextContainer_ESTest.java###test09+++getText###0, RectangularTextContainer_ESTest.java###test09+++fail###1, RectangularTextContainer_ESTest.java###test10+++verifyException###2, RectangularTextContainer_ESTest.java###test10+++getText###0, RectangularTextContainer_ESTest.java###test10+++fail###1, RectangularTextContainer_ESTest.java###test11+++toString###0, RectangularTextContainer_ESTest.java###test11+++assertEquals###2, RectangularTextContainer_ESTest.java###test12+++merge###1, RectangularTextContainer_ESTest.java###test12+++assertEquals###3, RectangularTextContainer_ESTest.java###test13+++merge###1, RectangularTextContainer_ESTest.java###test13+++assertSame###2, RectangularTextContainer_ESTest.java###test14+++squeeze###2, RectangularTextContainer_ESTest.java###test14+++setTextElements###1, RectangularTextContainer_ESTest.java###test14+++getTextElements###0, RectangularTextContainer_ESTest.java###test14+++assertTrue###1, RectangularTextContainer_ESTest.java###test14+++contains###1, RectangularTextContainer_ESTest.java###test15+++verifyException###2, RectangularTextContainer_ESTest.java###test15+++toString###0, RectangularTextContainer_ESTest.java###test15+++fail###1, RectangularTextContainer_ESTest.java###test16+++verifyException###2, RectangularTextContainer_ESTest.java###test16+++getText###1, RectangularTextContainer_ESTest.java###test16+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:07:21 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class RectangularTextContainer_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.RectangularTextContainer\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.TextElement;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/RectangularTextContainer_ESTest.java###test02",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-198.57213F), 1.0F, (-1133.79F), 0.0F);\n    rectangularTextContainer0.merge(rectangularTextContainer1);\n    assertEquals((-198.57213F), rectangularTextContainer0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(3718.457F, 3718.457F, (-1177.0F), 0.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1177.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-1.0F), (-1.0F), (-1.0F), (-1.0F));\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-2372.5F), (-2372.5F), 0.0F, 0.0F);\n    String string0 = textChunk0.getText(false);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    String string0 = textChunk0.getText();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((RectangularTextContainer<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    String string0 = textChunk0.toString();\n    assertEquals(\"technology.tabula.TextChunk[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,text=\\\"\\\"]\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = new RectangularTextContainer<TextElement>(0.0F, 0.0F, 0.0F, 734.0F);\n    textChunk0.merge(rectangularTextContainer0);\n    assertEquals(734.0F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = textChunk0.merge((RectangularTextContainer<TextElement>) textChunk0);\n    assertSame(textChunk0, rectangularTextContainer0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 2.0F);\n    Cell cell0 = new Cell(point2D_Float0, point2D_Float0);\n    Character character0 = new Character('K');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1844));\n    cell0.setTextElements(list0);\n    List<TextChunk> list1 = cell0.getTextElements();\n    assertTrue(list1.contains(textChunk0));\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.toString();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    RectangularTextContainer<TextChunk> rectangularTextContainer0 = new RectangularTextContainer<TextChunk>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText(false);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-1.0F), (-1.0F), (-1.0F), (-1.0F));\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1.0F, rectangularTextContainer1.width, 0.01F);\n}",
            "TestRelevantFocal": "[merge###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:07:21 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class RectangularTextContainer_ESTest extends RectangularTextContainer_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setTextElements(List<T> textElements) {\n    this.textElements = textElements;\n}",
            "all_field_declaration": "protected List<T> textElements = new ArrayList<>();",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "protected List<T> textElements = new ArrayList<>();",
            "Parameter_type": "List<T>",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "public_field": "",
            "Method_statement": "setTextElements(List<T> textElements)",
            "Method_name": "setTextElements",
            "Class_declaration": "public class RectangularTextContainer {\n",
            "constructors": "protected RectangularTextContainer(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}",
            "all_method_signature": "protected RectangularTextContainer(float top, float left, float width, float height);\npublic RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "Class_name": "RectangularTextContainer",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/RectangularTextContainer.java###setTextElements",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void setTextElements(List<T> textElements);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[RectangularTextContainer_ESTest.java###test00+++merge###1, RectangularTextContainer_ESTest.java###test00+++assertEquals###3, RectangularTextContainer_ESTest.java###test01+++merge###1, RectangularTextContainer_ESTest.java###test01+++assertEquals###3, RectangularTextContainer_ESTest.java###test02+++merge###1, RectangularTextContainer_ESTest.java###test02+++assertEquals###3, RectangularTextContainer_ESTest.java###test03+++setTextElements###1, RectangularTextContainer_ESTest.java###test03+++getTextElements###0, RectangularTextContainer_ESTest.java###test03+++assertNull###1, RectangularTextContainer_ESTest.java###test04+++getTextElements###0, RectangularTextContainer_ESTest.java###test04+++assertTrue###1, RectangularTextContainer_ESTest.java###test04+++isEmpty###0, RectangularTextContainer_ESTest.java###test05+++getText###1, RectangularTextContainer_ESTest.java###test05+++assertEquals###2, RectangularTextContainer_ESTest.java###test06+++getText###0, RectangularTextContainer_ESTest.java###test06+++assertEquals###2, RectangularTextContainer_ESTest.java###test07+++verifyException###2, RectangularTextContainer_ESTest.java###test07+++merge###1, RectangularTextContainer_ESTest.java###test07+++fail###1, RectangularTextContainer_ESTest.java###test08+++setTextElements###1, RectangularTextContainer_ESTest.java###test08+++verifyException###2, RectangularTextContainer_ESTest.java###test08+++getText###1, RectangularTextContainer_ESTest.java###test08+++fail###1, RectangularTextContainer_ESTest.java###test09+++setTextElements###1, RectangularTextContainer_ESTest.java###test09+++verifyException###2, RectangularTextContainer_ESTest.java###test09+++getText###0, RectangularTextContainer_ESTest.java###test09+++fail###1, RectangularTextContainer_ESTest.java###test10+++verifyException###2, RectangularTextContainer_ESTest.java###test10+++getText###0, RectangularTextContainer_ESTest.java###test10+++fail###1, RectangularTextContainer_ESTest.java###test11+++toString###0, RectangularTextContainer_ESTest.java###test11+++assertEquals###2, RectangularTextContainer_ESTest.java###test12+++merge###1, RectangularTextContainer_ESTest.java###test12+++assertEquals###3, RectangularTextContainer_ESTest.java###test13+++merge###1, RectangularTextContainer_ESTest.java###test13+++assertSame###2, RectangularTextContainer_ESTest.java###test14+++squeeze###2, RectangularTextContainer_ESTest.java###test14+++setTextElements###1, RectangularTextContainer_ESTest.java###test14+++getTextElements###0, RectangularTextContainer_ESTest.java###test14+++assertTrue###1, RectangularTextContainer_ESTest.java###test14+++contains###1, RectangularTextContainer_ESTest.java###test15+++verifyException###2, RectangularTextContainer_ESTest.java###test15+++toString###0, RectangularTextContainer_ESTest.java###test15+++fail###1, RectangularTextContainer_ESTest.java###test16+++verifyException###2, RectangularTextContainer_ESTest.java###test16+++getText###1, RectangularTextContainer_ESTest.java###test16+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:07:21 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class RectangularTextContainer_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.RectangularTextContainer\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.List;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/RectangularTextContainer_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-198.57213F), 1.0F, (-1133.79F), 0.0F);\n    rectangularTextContainer0.merge(rectangularTextContainer1);\n    assertEquals((-198.57213F), rectangularTextContainer0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(3718.457F, 3718.457F, (-1177.0F), 0.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1177.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-1.0F), (-1.0F), (-1.0F), (-1.0F));\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-2372.5F), (-2372.5F), 0.0F, 0.0F);\n    String string0 = textChunk0.getText(false);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    String string0 = textChunk0.getText();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((RectangularTextContainer<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    String string0 = textChunk0.toString();\n    assertEquals(\"technology.tabula.TextChunk[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,text=\\\"\\\"]\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = new RectangularTextContainer<TextElement>(0.0F, 0.0F, 0.0F, 734.0F);\n    textChunk0.merge(rectangularTextContainer0);\n    assertEquals(734.0F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = textChunk0.merge((RectangularTextContainer<TextElement>) textChunk0);\n    assertSame(textChunk0, rectangularTextContainer0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 2.0F);\n    Cell cell0 = new Cell(point2D_Float0, point2D_Float0);\n    Character character0 = new Character('K');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1844));\n    cell0.setTextElements(list0);\n    List<TextChunk> list1 = cell0.getTextElements();\n    assertTrue(list1.contains(textChunk0));\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.toString();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    RectangularTextContainer<TextChunk> rectangularTextContainer0 = new RectangularTextContainer<TextChunk>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText(false);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertNull(list0);\n}",
            "TestRelevantFocal": "[setTextElements###1, getTextElements###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:07:21 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class RectangularTextContainer_ESTest extends RectangularTextContainer_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public List<T> getTextElements() {\n    return textElements;\n}",
            "all_field_declaration": "protected List<T> textElements = new ArrayList<>();",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "protected List<T> textElements = new ArrayList<>();",
            "Parameter_type": "",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "public_field": "",
            "Method_statement": "getTextElements()",
            "Method_name": "getTextElements",
            "Class_declaration": "public class RectangularTextContainer {\n",
            "constructors": "protected RectangularTextContainer(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}",
            "all_method_signature": "protected RectangularTextContainer(float top, float left, float width, float height);\npublic RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "Class_name": "RectangularTextContainer",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/RectangularTextContainer.java###getTextElements",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public List<T> getTextElements();",
            "Junit_version": "4",
            "returnType": "List<T>"
        },
        "Test_method": {
            "AllTest2Focal": "[RectangularTextContainer_ESTest.java###test00+++merge###1, RectangularTextContainer_ESTest.java###test00+++assertEquals###3, RectangularTextContainer_ESTest.java###test01+++merge###1, RectangularTextContainer_ESTest.java###test01+++assertEquals###3, RectangularTextContainer_ESTest.java###test02+++merge###1, RectangularTextContainer_ESTest.java###test02+++assertEquals###3, RectangularTextContainer_ESTest.java###test03+++setTextElements###1, RectangularTextContainer_ESTest.java###test03+++getTextElements###0, RectangularTextContainer_ESTest.java###test03+++assertNull###1, RectangularTextContainer_ESTest.java###test04+++getTextElements###0, RectangularTextContainer_ESTest.java###test04+++assertTrue###1, RectangularTextContainer_ESTest.java###test04+++isEmpty###0, RectangularTextContainer_ESTest.java###test05+++getText###1, RectangularTextContainer_ESTest.java###test05+++assertEquals###2, RectangularTextContainer_ESTest.java###test06+++getText###0, RectangularTextContainer_ESTest.java###test06+++assertEquals###2, RectangularTextContainer_ESTest.java###test07+++verifyException###2, RectangularTextContainer_ESTest.java###test07+++merge###1, RectangularTextContainer_ESTest.java###test07+++fail###1, RectangularTextContainer_ESTest.java###test08+++setTextElements###1, RectangularTextContainer_ESTest.java###test08+++verifyException###2, RectangularTextContainer_ESTest.java###test08+++getText###1, RectangularTextContainer_ESTest.java###test08+++fail###1, RectangularTextContainer_ESTest.java###test09+++setTextElements###1, RectangularTextContainer_ESTest.java###test09+++verifyException###2, RectangularTextContainer_ESTest.java###test09+++getText###0, RectangularTextContainer_ESTest.java###test09+++fail###1, RectangularTextContainer_ESTest.java###test10+++verifyException###2, RectangularTextContainer_ESTest.java###test10+++getText###0, RectangularTextContainer_ESTest.java###test10+++fail###1, RectangularTextContainer_ESTest.java###test11+++toString###0, RectangularTextContainer_ESTest.java###test11+++assertEquals###2, RectangularTextContainer_ESTest.java###test12+++merge###1, RectangularTextContainer_ESTest.java###test12+++assertEquals###3, RectangularTextContainer_ESTest.java###test13+++merge###1, RectangularTextContainer_ESTest.java###test13+++assertSame###2, RectangularTextContainer_ESTest.java###test14+++squeeze###2, RectangularTextContainer_ESTest.java###test14+++setTextElements###1, RectangularTextContainer_ESTest.java###test14+++getTextElements###0, RectangularTextContainer_ESTest.java###test14+++assertTrue###1, RectangularTextContainer_ESTest.java###test14+++contains###1, RectangularTextContainer_ESTest.java###test15+++verifyException###2, RectangularTextContainer_ESTest.java###test15+++toString###0, RectangularTextContainer_ESTest.java###test15+++fail###1, RectangularTextContainer_ESTest.java###test16+++verifyException###2, RectangularTextContainer_ESTest.java###test16+++getText###1, RectangularTextContainer_ESTest.java###test16+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:07:21 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class RectangularTextContainer_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.RectangularTextContainer\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.List;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/RectangularTextContainer_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-198.57213F), 1.0F, (-1133.79F), 0.0F);\n    rectangularTextContainer0.merge(rectangularTextContainer1);\n    assertEquals((-198.57213F), rectangularTextContainer0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(3718.457F, 3718.457F, (-1177.0F), 0.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1177.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-1.0F), (-1.0F), (-1.0F), (-1.0F));\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-2372.5F), (-2372.5F), 0.0F, 0.0F);\n    String string0 = textChunk0.getText(false);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    String string0 = textChunk0.getText();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((RectangularTextContainer<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    String string0 = textChunk0.toString();\n    assertEquals(\"technology.tabula.TextChunk[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,text=\\\"\\\"]\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = new RectangularTextContainer<TextElement>(0.0F, 0.0F, 0.0F, 734.0F);\n    textChunk0.merge(rectangularTextContainer0);\n    assertEquals(734.0F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = textChunk0.merge((RectangularTextContainer<TextElement>) textChunk0);\n    assertSame(textChunk0, rectangularTextContainer0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 2.0F);\n    Cell cell0 = new Cell(point2D_Float0, point2D_Float0);\n    Character character0 = new Character('K');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1844));\n    cell0.setTextElements(list0);\n    List<TextChunk> list1 = cell0.getTextElements();\n    assertTrue(list1.contains(textChunk0));\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.toString();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    RectangularTextContainer<TextChunk> rectangularTextContainer0 = new RectangularTextContainer<TextChunk>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText(false);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertNull(list0);\n}",
            "TestRelevantFocal": "[setTextElements###1, getTextElements###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:07:21 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class RectangularTextContainer_ESTest extends RectangularTextContainer_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String getText(boolean useLineReturns) {\n    throw new UnsupportedOperationException();\n}",
            "all_field_declaration": "protected List<T> textElements = new ArrayList<>();",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "boolean",
            "Import_statements": "",
            "public_method_signature": "public RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "public_field": "",
            "Method_statement": "getText(boolean useLineReturns)",
            "Method_name": "getText",
            "Class_declaration": "public class RectangularTextContainer {\n",
            "constructors": "protected RectangularTextContainer(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}",
            "all_method_signature": "protected RectangularTextContainer(float top, float left, float width, float height);\npublic RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "Class_name": "RectangularTextContainer",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/RectangularTextContainer.java###getText",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public String getText(boolean useLineReturns);",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[RectangularTextContainer_ESTest.java###test00+++merge###1, RectangularTextContainer_ESTest.java###test00+++assertEquals###3, RectangularTextContainer_ESTest.java###test01+++merge###1, RectangularTextContainer_ESTest.java###test01+++assertEquals###3, RectangularTextContainer_ESTest.java###test02+++merge###1, RectangularTextContainer_ESTest.java###test02+++assertEquals###3, RectangularTextContainer_ESTest.java###test03+++setTextElements###1, RectangularTextContainer_ESTest.java###test03+++getTextElements###0, RectangularTextContainer_ESTest.java###test03+++assertNull###1, RectangularTextContainer_ESTest.java###test04+++getTextElements###0, RectangularTextContainer_ESTest.java###test04+++assertTrue###1, RectangularTextContainer_ESTest.java###test04+++isEmpty###0, RectangularTextContainer_ESTest.java###test05+++getText###1, RectangularTextContainer_ESTest.java###test05+++assertEquals###2, RectangularTextContainer_ESTest.java###test06+++getText###0, RectangularTextContainer_ESTest.java###test06+++assertEquals###2, RectangularTextContainer_ESTest.java###test07+++verifyException###2, RectangularTextContainer_ESTest.java###test07+++merge###1, RectangularTextContainer_ESTest.java###test07+++fail###1, RectangularTextContainer_ESTest.java###test08+++setTextElements###1, RectangularTextContainer_ESTest.java###test08+++verifyException###2, RectangularTextContainer_ESTest.java###test08+++getText###1, RectangularTextContainer_ESTest.java###test08+++fail###1, RectangularTextContainer_ESTest.java###test09+++setTextElements###1, RectangularTextContainer_ESTest.java###test09+++verifyException###2, RectangularTextContainer_ESTest.java###test09+++getText###0, RectangularTextContainer_ESTest.java###test09+++fail###1, RectangularTextContainer_ESTest.java###test10+++verifyException###2, RectangularTextContainer_ESTest.java###test10+++getText###0, RectangularTextContainer_ESTest.java###test10+++fail###1, RectangularTextContainer_ESTest.java###test11+++toString###0, RectangularTextContainer_ESTest.java###test11+++assertEquals###2, RectangularTextContainer_ESTest.java###test12+++merge###1, RectangularTextContainer_ESTest.java###test12+++assertEquals###3, RectangularTextContainer_ESTest.java###test13+++merge###1, RectangularTextContainer_ESTest.java###test13+++assertSame###2, RectangularTextContainer_ESTest.java###test14+++squeeze###2, RectangularTextContainer_ESTest.java###test14+++setTextElements###1, RectangularTextContainer_ESTest.java###test14+++getTextElements###0, RectangularTextContainer_ESTest.java###test14+++assertTrue###1, RectangularTextContainer_ESTest.java###test14+++contains###1, RectangularTextContainer_ESTest.java###test15+++verifyException###2, RectangularTextContainer_ESTest.java###test15+++toString###0, RectangularTextContainer_ESTest.java###test15+++fail###1, RectangularTextContainer_ESTest.java###test16+++verifyException###2, RectangularTextContainer_ESTest.java###test16+++getText###1, RectangularTextContainer_ESTest.java###test16+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:07:21 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class RectangularTextContainer_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.RectangularTextContainer\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.TextChunk;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/RectangularTextContainer_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-198.57213F), 1.0F, (-1133.79F), 0.0F);\n    rectangularTextContainer0.merge(rectangularTextContainer1);\n    assertEquals((-198.57213F), rectangularTextContainer0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(3718.457F, 3718.457F, (-1177.0F), 0.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1177.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-1.0F), (-1.0F), (-1.0F), (-1.0F));\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-2372.5F), (-2372.5F), 0.0F, 0.0F);\n    String string0 = textChunk0.getText(false);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    String string0 = textChunk0.getText();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((RectangularTextContainer<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    String string0 = textChunk0.toString();\n    assertEquals(\"technology.tabula.TextChunk[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,text=\\\"\\\"]\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = new RectangularTextContainer<TextElement>(0.0F, 0.0F, 0.0F, 734.0F);\n    textChunk0.merge(rectangularTextContainer0);\n    assertEquals(734.0F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = textChunk0.merge((RectangularTextContainer<TextElement>) textChunk0);\n    assertSame(textChunk0, rectangularTextContainer0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 2.0F);\n    Cell cell0 = new Cell(point2D_Float0, point2D_Float0);\n    Character character0 = new Character('K');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1844));\n    cell0.setTextElements(list0);\n    List<TextChunk> list1 = cell0.getTextElements();\n    assertTrue(list1.contains(textChunk0));\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.toString();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    RectangularTextContainer<TextChunk> rectangularTextContainer0 = new RectangularTextContainer<TextChunk>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText(false);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-2372.5F), (-2372.5F), 0.0F, 0.0F);\n    String string0 = textChunk0.getText(false);\n    assertEquals(\"\", string0);\n}",
            "TestRelevantFocal": "[getText###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:07:21 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class RectangularTextContainer_ESTest extends RectangularTextContainer_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String getText() {\n    throw new UnsupportedOperationException();\n}",
            "all_field_declaration": "protected List<T> textElements = new ArrayList<>();",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "public_field": "",
            "Method_statement": "getText()",
            "Method_name": "getText",
            "Class_declaration": "public class RectangularTextContainer {\n",
            "constructors": "protected RectangularTextContainer(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}",
            "all_method_signature": "protected RectangularTextContainer(float top, float left, float width, float height);\npublic RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "Class_name": "RectangularTextContainer",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/RectangularTextContainer.java###getText",
            "Parameter_num": "0",
            "contextMethod": "public List<T> getTextElements() {\n    return textElements;\n}",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public String getText();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[RectangularTextContainer_ESTest.java###test00+++merge###1, RectangularTextContainer_ESTest.java###test00+++assertEquals###3, RectangularTextContainer_ESTest.java###test01+++merge###1, RectangularTextContainer_ESTest.java###test01+++assertEquals###3, RectangularTextContainer_ESTest.java###test02+++merge###1, RectangularTextContainer_ESTest.java###test02+++assertEquals###3, RectangularTextContainer_ESTest.java###test03+++setTextElements###1, RectangularTextContainer_ESTest.java###test03+++getTextElements###0, RectangularTextContainer_ESTest.java###test03+++assertNull###1, RectangularTextContainer_ESTest.java###test04+++getTextElements###0, RectangularTextContainer_ESTest.java###test04+++assertTrue###1, RectangularTextContainer_ESTest.java###test04+++isEmpty###0, RectangularTextContainer_ESTest.java###test05+++getText###1, RectangularTextContainer_ESTest.java###test05+++assertEquals###2, RectangularTextContainer_ESTest.java###test06+++getText###0, RectangularTextContainer_ESTest.java###test06+++assertEquals###2, RectangularTextContainer_ESTest.java###test07+++verifyException###2, RectangularTextContainer_ESTest.java###test07+++merge###1, RectangularTextContainer_ESTest.java###test07+++fail###1, RectangularTextContainer_ESTest.java###test08+++setTextElements###1, RectangularTextContainer_ESTest.java###test08+++verifyException###2, RectangularTextContainer_ESTest.java###test08+++getText###1, RectangularTextContainer_ESTest.java###test08+++fail###1, RectangularTextContainer_ESTest.java###test09+++setTextElements###1, RectangularTextContainer_ESTest.java###test09+++verifyException###2, RectangularTextContainer_ESTest.java###test09+++getText###0, RectangularTextContainer_ESTest.java###test09+++fail###1, RectangularTextContainer_ESTest.java###test10+++verifyException###2, RectangularTextContainer_ESTest.java###test10+++getText###0, RectangularTextContainer_ESTest.java###test10+++fail###1, RectangularTextContainer_ESTest.java###test11+++toString###0, RectangularTextContainer_ESTest.java###test11+++assertEquals###2, RectangularTextContainer_ESTest.java###test12+++merge###1, RectangularTextContainer_ESTest.java###test12+++assertEquals###3, RectangularTextContainer_ESTest.java###test13+++merge###1, RectangularTextContainer_ESTest.java###test13+++assertSame###2, RectangularTextContainer_ESTest.java###test14+++squeeze###2, RectangularTextContainer_ESTest.java###test14+++setTextElements###1, RectangularTextContainer_ESTest.java###test14+++getTextElements###0, RectangularTextContainer_ESTest.java###test14+++assertTrue###1, RectangularTextContainer_ESTest.java###test14+++contains###1, RectangularTextContainer_ESTest.java###test15+++verifyException###2, RectangularTextContainer_ESTest.java###test15+++toString###0, RectangularTextContainer_ESTest.java###test15+++fail###1, RectangularTextContainer_ESTest.java###test16+++verifyException###2, RectangularTextContainer_ESTest.java###test16+++getText###1, RectangularTextContainer_ESTest.java###test16+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:07:21 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class RectangularTextContainer_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.RectangularTextContainer\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.TextElement;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/RectangularTextContainer_ESTest.java###test10",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-198.57213F), 1.0F, (-1133.79F), 0.0F);\n    rectangularTextContainer0.merge(rectangularTextContainer1);\n    assertEquals((-198.57213F), rectangularTextContainer0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(3718.457F, 3718.457F, (-1177.0F), 0.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1177.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-1.0F), (-1.0F), (-1.0F), (-1.0F));\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-2372.5F), (-2372.5F), 0.0F, 0.0F);\n    String string0 = textChunk0.getText(false);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    String string0 = textChunk0.getText();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((RectangularTextContainer<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    String string0 = textChunk0.toString();\n    assertEquals(\"technology.tabula.TextChunk[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,text=\\\"\\\"]\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = new RectangularTextContainer<TextElement>(0.0F, 0.0F, 0.0F, 734.0F);\n    textChunk0.merge(rectangularTextContainer0);\n    assertEquals(734.0F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = textChunk0.merge((RectangularTextContainer<TextElement>) textChunk0);\n    assertSame(textChunk0, rectangularTextContainer0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 2.0F);\n    Cell cell0 = new Cell(point2D_Float0, point2D_Float0);\n    Character character0 = new Character('K');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1844));\n    cell0.setTextElements(list0);\n    List<TextChunk> list1 = cell0.getTextElements();\n    assertTrue(list1.contains(textChunk0));\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.toString();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    RectangularTextContainer<TextChunk> rectangularTextContainer0 = new RectangularTextContainer<TextChunk>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText(false);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}",
            "TestRelevantFocal": "[getText###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:07:21 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class RectangularTextContainer_ESTest extends RectangularTextContainer_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String toString() {\n    StringBuilder sb = new StringBuilder();\n    String s = super.toString();\n    sb.append(s.substring(0, s.length() - 1));\n    sb.append(String.format(\",text=%s]\", this.getText() == null ? \"null\" : \"\\\"\" + this.getText() + \"\\\"\"));\n    return sb.toString();\n}",
            "all_field_declaration": "protected List<T> textElements = new ArrayList<>();",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "5",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "public_field": "",
            "Method_statement": "toString()",
            "Method_name": "toString",
            "Class_declaration": "public class RectangularTextContainer {\n",
            "constructors": "protected RectangularTextContainer(float top, float left, float width, float height) {\n    super(top, left, width, height);\n}",
            "all_method_signature": "protected RectangularTextContainer(float top, float left, float width, float height);\npublic RectangularTextContainer<T> merge(RectangularTextContainer<T> other);\npublic List<T> getTextElements();\npublic void setTextElements(List<T> textElements);\npublic String getText();\npublic String getText(boolean useLineReturns);\npublic String toString();",
            "Class_name": "RectangularTextContainer",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/RectangularTextContainer.java###toString",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.List;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public String toString();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[RectangularTextContainer_ESTest.java###test00+++merge###1, RectangularTextContainer_ESTest.java###test00+++assertEquals###3, RectangularTextContainer_ESTest.java###test01+++merge###1, RectangularTextContainer_ESTest.java###test01+++assertEquals###3, RectangularTextContainer_ESTest.java###test02+++merge###1, RectangularTextContainer_ESTest.java###test02+++assertEquals###3, RectangularTextContainer_ESTest.java###test03+++setTextElements###1, RectangularTextContainer_ESTest.java###test03+++getTextElements###0, RectangularTextContainer_ESTest.java###test03+++assertNull###1, RectangularTextContainer_ESTest.java###test04+++getTextElements###0, RectangularTextContainer_ESTest.java###test04+++assertTrue###1, RectangularTextContainer_ESTest.java###test04+++isEmpty###0, RectangularTextContainer_ESTest.java###test05+++getText###1, RectangularTextContainer_ESTest.java###test05+++assertEquals###2, RectangularTextContainer_ESTest.java###test06+++getText###0, RectangularTextContainer_ESTest.java###test06+++assertEquals###2, RectangularTextContainer_ESTest.java###test07+++verifyException###2, RectangularTextContainer_ESTest.java###test07+++merge###1, RectangularTextContainer_ESTest.java###test07+++fail###1, RectangularTextContainer_ESTest.java###test08+++setTextElements###1, RectangularTextContainer_ESTest.java###test08+++verifyException###2, RectangularTextContainer_ESTest.java###test08+++getText###1, RectangularTextContainer_ESTest.java###test08+++fail###1, RectangularTextContainer_ESTest.java###test09+++setTextElements###1, RectangularTextContainer_ESTest.java###test09+++verifyException###2, RectangularTextContainer_ESTest.java###test09+++getText###0, RectangularTextContainer_ESTest.java###test09+++fail###1, RectangularTextContainer_ESTest.java###test10+++verifyException###2, RectangularTextContainer_ESTest.java###test10+++getText###0, RectangularTextContainer_ESTest.java###test10+++fail###1, RectangularTextContainer_ESTest.java###test11+++toString###0, RectangularTextContainer_ESTest.java###test11+++assertEquals###2, RectangularTextContainer_ESTest.java###test12+++merge###1, RectangularTextContainer_ESTest.java###test12+++assertEquals###3, RectangularTextContainer_ESTest.java###test13+++merge###1, RectangularTextContainer_ESTest.java###test13+++assertSame###2, RectangularTextContainer_ESTest.java###test14+++squeeze###2, RectangularTextContainer_ESTest.java###test14+++setTextElements###1, RectangularTextContainer_ESTest.java###test14+++getTextElements###0, RectangularTextContainer_ESTest.java###test14+++assertTrue###1, RectangularTextContainer_ESTest.java###test14+++contains###1, RectangularTextContainer_ESTest.java###test15+++verifyException###2, RectangularTextContainer_ESTest.java###test15+++toString###0, RectangularTextContainer_ESTest.java###test15+++fail###1, RectangularTextContainer_ESTest.java###test16+++verifyException###2, RectangularTextContainer_ESTest.java###test16+++getText###1, RectangularTextContainer_ESTest.java###test16+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:07:21 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class RectangularTextContainer_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.RectangularTextContainer\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.RectangularTextContainer\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(RectangularTextContainer_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Line\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.TextElement;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/RectangularTextContainer_ESTest.java###test15",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-198.57213F), 1.0F, (-1133.79F), 0.0F);\n    rectangularTextContainer0.merge(rectangularTextContainer1);\n    assertEquals((-198.57213F), rectangularTextContainer0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(3718.457F, 3718.457F, (-1177.0F), 0.0F);\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1177.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-1.0F), (-1.0F), (-1.0F), (-1.0F));\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = rectangularTextContainer0.merge(rectangularTextContainer0);\n    assertEquals(1.0F, rectangularTextContainer1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertNull(list0);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);\n    List<TextElement> list0 = textChunk0.getTextElements();\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    TextChunk textChunk0 = new TextChunk((-2372.5F), (-2372.5F), 0.0F, 0.0F);\n    String string0 = textChunk0.getText(false);\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);\n    String string0 = textChunk0.getText();\n    assertEquals(\"\", string0);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    // Undeclared exception!\n    try {\n        textChunk0.merge((RectangularTextContainer<TextElement>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText(true);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    textChunk0.setTextElements((List<TextElement>) null);\n    // Undeclared exception!\n    try {\n        textChunk0.getText();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.TextChunk\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    String string0 = textChunk0.toString();\n    assertEquals(\"technology.tabula.TextChunk[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,text=\\\"\\\"]\", string0);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = new RectangularTextContainer<TextElement>(0.0F, 0.0F, 0.0F, 734.0F);\n    textChunk0.merge(rectangularTextContainer0);\n    assertEquals(734.0F, textChunk0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    RectangularTextContainer<TextElement> rectangularTextContainer0 = textChunk0.merge((RectangularTextContainer<TextElement>) textChunk0);\n    assertSame(textChunk0, rectangularTextContainer0);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    TextChunk textChunk0 = TextChunk.EMPTY;\n    Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 2.0F);\n    Cell cell0 = new Cell(point2D_Float0, point2D_Float0);\n    Character character0 = new Character('K');\n    List<TextChunk> list0 = textChunk0.squeeze(character0, (-1844));\n    cell0.setTextElements(list0);\n    List<TextChunk> list1 = cell0.getTextElements();\n    assertTrue(list1.contains(textChunk0));\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.toString();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    RectangularTextContainer<TextChunk> rectangularTextContainer0 = new RectangularTextContainer<TextChunk>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.getText(false);\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(0.0F, 0.0F, 0.0F, 0.0F);\n    // Undeclared exception!\n    try {\n        rectangularTextContainer0.toString();\n        fail(\"Expecting exception: UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.RectangularTextContainer\", e);\n    }\n}",
            "TestRelevantFocal": "[toString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:07:21 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.RectangularTextContainer;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class RectangularTextContainer_ESTest extends RectangularTextContainer_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles) {\n    float minx = java.lang.Float.MAX_VALUE;\n    float miny = java.lang.Float.MAX_VALUE;\n    float maxx = java.lang.Float.MIN_VALUE;\n    float maxy = java.lang.Float.MIN_VALUE;\n    for (Rectangle r : rectangles) {\n        minx = (float) Math.min(r.getMinX(), minx);\n        miny = (float) Math.min(r.getMinY(), miny);\n        maxx = (float) Math.max(r.getMaxX(), maxx);\n        maxy = (float) Math.max(r.getMaxY(), maxy);\n    }\n    return new Rectangle(miny, minx, maxx - minx, maxy - miny);\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "6",
            "Filed": "",
            "Parameter_type": "List<? extends Rectangle>",
            "Import_statements": "import java.util.List;\n",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "boundingBoxOf(List<? extends Rectangle> rectangles)",
            "Method_name": "boundingBoxOf",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###boundingBoxOf",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "\n\t * @param rectangles\n\t * @return minimum bounding box that contains all the rectangles\n\t ",
            "packageName": "technology.tabula",
            "method_signature": "public static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Junit_version": "4",
            "returnType": "Rectangle"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}",
            "TestRelevantFocal": "[boundingBoxOf###1, setTop###1, setLeft###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setLeft(float left) {\n    float deltaWidth = left - this.x;\n    this.setRect(left, this.y, this.width - deltaWidth, this.height);\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "float",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "setLeft(float left)",
            "Method_name": "setLeft",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###setLeft",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void setLeft(float left);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}",
            "TestRelevantFocal": "[boundingBoxOf###1, setTop###1, setLeft###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setBottom(float bottom) {\n    this.setRect(this.x, this.y, this.width, bottom - this.y);\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "float",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "setBottom(float bottom)",
            "Method_name": "setBottom",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###setBottom",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void setBottom(float bottom);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test16",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}",
            "TestRelevantFocal": "[merge###1, setBottom###1, compareTo###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setRight(float right) {\n    this.setRect(this.x, this.y, right - this.x, this.height);\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "float",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "setRight(float right)",
            "Method_name": "setRight",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###setRight",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void setRight(float right);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test03",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}",
            "TestRelevantFocal": "[setRight###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public void setTop(float top) {\n    float deltaHeight = top - this.y;\n    this.setRect(this.x, top, this.width, this.height - deltaHeight);\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "float",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "setTop(float top)",
            "Method_name": "setTop",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###setTop",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public void setTop(float top);",
            "Junit_version": "4",
            "returnType": "void"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}",
            "TestRelevantFocal": "[boundingBoxOf###1, setTop###1, setLeft###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float getArea() {\n    return this.width * this.height;\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "getArea()",
            "Method_name": "getArea",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###getArea",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float getArea();",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test50",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}",
            "TestRelevantFocal": "[boundingBoxOf###1, getRight###0, getArea###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float verticalOverlapRatio(Rectangle other) {\n    float rv = 0, delta = Math.min(this.getBottom() - this.getTop(), other.getBottom() - other.getTop());\n    if (other.getTop() <= this.getTop() && this.getTop() <= other.getBottom() && other.getBottom() <= this.getBottom()) {\n        rv = (other.getBottom() - this.getTop()) / delta;\n    } else if (this.getTop() <= other.getTop() && other.getTop() <= this.getBottom() && this.getBottom() <= other.getBottom()) {\n        rv = (this.getBottom() - other.getTop()) / delta;\n    } else if (this.getTop() <= other.getTop() && other.getTop() <= other.getBottom() && other.getBottom() <= this.getBottom()) {\n        rv = (other.getBottom() - other.getTop()) / delta;\n    } else if (other.getTop() <= this.getTop() && this.getTop() <= this.getBottom() && this.getBottom() <= other.getBottom()) {\n        rv = (this.getBottom() - this.getTop()) / delta;\n    }\n    return rv;\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "3",
            "Filed": "",
            "Parameter_type": "Rectangle",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "verticalOverlapRatio(Rectangle other)",
            "Method_name": "verticalOverlapRatio",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###verticalOverlapRatio",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float verticalOverlapRatio(Rectangle other);",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test55",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}",
            "TestRelevantFocal": "[boundingBoxOf###1, verticalOverlapRatio###1, getArea###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public boolean horizontallyOverlaps(Rectangle other) {\n    return horizontalOverlap(other) > 0;\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Rectangle",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "horizontallyOverlaps(Rectangle other)",
            "Method_name": "horizontallyOverlaps",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###horizontallyOverlaps",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public boolean horizontallyOverlaps(Rectangle other);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test58",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}",
            "TestRelevantFocal": "[horizontallyOverlaps###1, getArea###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float horizontalOverlap(Rectangle other) {\n    return Math.max(0, Math.min(this.getRight(), other.getRight()) - Math.max(this.getLeft(), other.getLeft()));\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Rectangle",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "horizontalOverlap(Rectangle other)",
            "Method_name": "horizontalOverlap",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###horizontalOverlap",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float horizontalOverlap(Rectangle other);",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test14",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}",
            "TestRelevantFocal": "[horizontalOverlap###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public boolean verticallyOverlaps(Rectangle other) {\n    return verticalOverlap(other) > 0;\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Rectangle",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "verticallyOverlaps(Rectangle other)",
            "Method_name": "verticallyOverlaps",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###verticallyOverlaps",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public boolean verticallyOverlaps(Rectangle other);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test15",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}",
            "TestRelevantFocal": "[boundingBoxOf###1, verticallyOverlaps###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Rectangle merge(Rectangle other) {\n    this.setRect(this.createUnion(other));\n    return this;\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "2",
            "Filed": "",
            "Parameter_type": "Rectangle",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "merge(Rectangle other)",
            "Method_name": "merge",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###merge",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public Rectangle merge(Rectangle other);",
            "Junit_version": "4",
            "returnType": "Rectangle"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test16",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}",
            "TestRelevantFocal": "[merge###1, setBottom###1, compareTo###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public int compareTo(Rectangle other) {\n    return ILL_DEFINED_ORDER.compare(this, other);\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Parameter_type": "Rectangle",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "compareTo(Rectangle other)",
            "Method_name": "compareTo",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###compareTo",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public int compareTo(Rectangle other);",
            "Junit_version": "4",
            "returnType": "int"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test16",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}",
            "TestRelevantFocal": "[merge###1, setBottom###1, compareTo###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float verticalOverlap(Rectangle other) {\n    return Math.max(0, Math.min(this.getBottom(), other.getBottom()) - Math.max(this.getTop(), other.getTop()));\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "Rectangle",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "verticalOverlap(Rectangle other)",
            "Method_name": "verticalOverlap",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###verticalOverlap",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float verticalOverlap(Rectangle other);",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test19",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}",
            "TestRelevantFocal": "[merge###1, verticalOverlap###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float overlapRatio(Rectangle other) {\n    double intersectionWidth = Math.max(0, Math.min(this.getRight(), other.getRight()) - Math.max(this.getLeft(), other.getLeft()));\n    double intersectionHeight = Math.max(0, Math.min(this.getBottom(), other.getBottom()) - Math.max(this.getTop(), other.getTop()));\n    double intersectionArea = Math.max(0, intersectionWidth * intersectionHeight);\n    double unionArea = this.getArea() + other.getArea() - intersectionArea;\n    return (float) (intersectionArea / unionArea);\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "5",
            "Filed": "",
            "Parameter_type": "Rectangle",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "overlapRatio(Rectangle other)",
            "Method_name": "overlapRatio",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###overlapRatio",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float overlapRatio(Rectangle other);",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test40",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}",
            "TestRelevantFocal": "[overlapRatio###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float getTop() {\n    return (float) this.getMinY();\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "getTop()",
            "Method_name": "getTop",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###getTop",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float getTop();",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test49",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}",
            "TestRelevantFocal": "[getTop###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float getRight() {\n    return (float) this.getMaxX();\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "getRight()",
            "Method_name": "getRight",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###getRight",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float getRight();",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test50",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}",
            "TestRelevantFocal": "[boundingBoxOf###1, getRight###0, getArea###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float getLeft() {\n    return (float) this.getMinX();\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "getLeft()",
            "Method_name": "getLeft",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###getLeft",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float getLeft();",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test52",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}",
            "TestRelevantFocal": "[boundingBoxOf###1, getLeft###0, getArea###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float getBottom() {\n    return (float) this.getMaxY();\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "getBottom()",
            "Method_name": "getBottom",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###getBottom",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float getBottom();",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test48",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}",
            "TestRelevantFocal": "[getBottom###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public int isLtrDominant() {\n    return 0;\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "isLtrDominant()",
            "Method_name": "isLtrDominant",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###isLtrDominant",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": " technology.tabula.TextChunk.",
            "packageName": "technology.tabula",
            "method_signature": "public int isLtrDominant();",
            "Junit_version": "4",
            "returnType": "int"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test64",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}",
            "TestRelevantFocal": "[isLtrDominant###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public Point2D[] getPoints() {\n    return new Point2D[] { new Point2D.Float(this.getLeft(), this.getTop()), new Point2D.Float(this.getRight(), this.getTop()), new Point2D.Float(this.getRight(), this.getBottom()), new Point2D.Float(this.getLeft(), this.getBottom()) };\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "import java.awt.geom.Point2D;\n",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "getPoints()",
            "Method_name": "getPoints",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###getPoints",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public Point2D[] getPoints();",
            "Junit_version": "4",
            "returnType": "Point2D[]"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.awt.geom.Point2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test66",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}",
            "TestRelevantFocal": "[boundingBoxOf###1, getPoints###0, getArea###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String toString() {\n    StringBuilder sb = new StringBuilder();\n    String s = super.toString();\n    sb.append(s.substring(0, s.length() - 1));\n    sb.append(String.format(Locale.US, \",bottom=%f,right=%f]\", this.getBottom(), this.getRight()));\n    return sb.toString();\n}",
            "all_field_declaration": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};\nprotected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "5",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "import java.util.Locale;\n",
            "public_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "public_field": "/**\n * Ill-defined comparator, from when Rectangle was Comparable.\n *\n * @see <a href=\"https://github.com/tabulapdf/tabula-java/issues/116\">PR 116</a>\n * @deprecated with no replacement\n */\n@Deprecated\npublic static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {\n\n    @Override\n    public int compare(Rectangle o1, Rectangle o2) {\n        if (o1.equals(o2))\n            return 0;\n        if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {\n            return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1 ? -java.lang.Double.compare(o1.getX(), o2.getX()) : java.lang.Double.compare(o1.getX(), o2.getX());\n        } else {\n            return java.lang.Float.compare(o1.getBottom(), o2.getBottom());\n        }\n    }\n};",
            "Method_statement": "toString()",
            "Method_name": "toString",
            "Class_declaration": "public class Rectangle {\n",
            "constructors": "public Rectangle() {\n    super();\n}public Rectangle(float top, float left, float width, float height) {\n    super();\n    this.setRect(left, top, width, height);\n}",
            "all_method_signature": "public Rectangle();\npublic Rectangle(float top, float left, float width, float height);\npublic int compareTo(Rectangle other);\npublic int isLtrDominant();\npublic float getArea();\npublic float verticalOverlap(Rectangle other);\npublic boolean verticallyOverlaps(Rectangle other);\npublic float horizontalOverlap(Rectangle other);\npublic boolean horizontallyOverlaps(Rectangle other);\npublic float verticalOverlapRatio(Rectangle other);\npublic float overlapRatio(Rectangle other);\npublic Rectangle merge(Rectangle other);\npublic float getTop();\npublic void setTop(float top);\npublic float getRight();\npublic void setRight(float right);\npublic float getLeft();\npublic void setLeft(float left);\npublic float getBottom();\npublic void setBottom(float bottom);\npublic Point2D[] getPoints();\npublic String toString();\npublic static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles);",
            "Class_name": "Rectangle",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/Rectangle.java###toString",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.awt.geom.Point2D;\n\nimport java.awt.geom.Rectangle2D;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Locale;\n",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public String toString();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[Rectangle_ESTest.java###test00+++add###1, Rectangle_ESTest.java###test00+++push###1, Rectangle_ESTest.java###test00+++add###2, Rectangle_ESTest.java###test00+++boundingBoxOf###1, Rectangle_ESTest.java###test00+++assertTrue###1, Rectangle_ESTest.java###test00+++contains###1, Rectangle_ESTest.java###test00+++assertEquals###3, Rectangle_ESTest.java###test01+++boundingBoxOf###1, Rectangle_ESTest.java###test01+++setLeft###1, Rectangle_ESTest.java###test01+++setBottom###1, Rectangle_ESTest.java###test01+++assertEquals###3, Rectangle_ESTest.java###test02+++setLeft###1, Rectangle_ESTest.java###test02+++assertEquals###3, Rectangle_ESTest.java###test03+++setFrameFromCenter###4, Rectangle_ESTest.java###test03+++setRight###1, Rectangle_ESTest.java###test03+++assertEquals###3, Rectangle_ESTest.java###test04+++setBottom###1, Rectangle_ESTest.java###test04+++setTop###1, Rectangle_ESTest.java###test04+++assertEquals###3, Rectangle_ESTest.java###test04+++getArea###0, Rectangle_ESTest.java###test05+++boundingBoxOf###1, Rectangle_ESTest.java###test05+++setTop###1, Rectangle_ESTest.java###test05+++setLeft###1, Rectangle_ESTest.java###test05+++assertEquals###3, Rectangle_ESTest.java###test06+++setTop###1, Rectangle_ESTest.java###test06+++assertEquals###3, Rectangle_ESTest.java###test07+++add###2, Rectangle_ESTest.java###test07+++verticalOverlapRatio###1, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test07+++assertEquals###3, Rectangle_ESTest.java###test08+++verticalOverlapRatio###1, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++assertEquals###3, Rectangle_ESTest.java###test08+++getCenterX###0, Rectangle_ESTest.java###test09+++boundingBoxOf###1, Rectangle_ESTest.java###test09+++setBottom###1, Rectangle_ESTest.java###test09+++add###2, Rectangle_ESTest.java###test09+++add###1, Rectangle_ESTest.java###test09+++verticalOverlapRatio###1, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test09+++assertEquals###3, Rectangle_ESTest.java###test10+++add###2, Rectangle_ESTest.java###test10+++push###1, Rectangle_ESTest.java###test10+++boundingBoxOf###1, Rectangle_ESTest.java###test10+++verticalOverlapRatio###1, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test10+++assertEquals###3, Rectangle_ESTest.java###test11+++add###2, Rectangle_ESTest.java###test11+++push###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test11+++boundingBoxOf###1, Rectangle_ESTest.java###test11+++verticalOverlapRatio###1, Rectangle_ESTest.java###test11+++assertEquals###3, Rectangle_ESTest.java###test12+++add###2, Rectangle_ESTest.java###test12+++push###1, Rectangle_ESTest.java###test12+++boundingBoxOf###1, Rectangle_ESTest.java###test12+++verticalOverlapRatio###1, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test12+++assertEquals###3, Rectangle_ESTest.java###test13+++horizontallyOverlaps###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++getArea###0, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test13+++assertFalse###1, Rectangle_ESTest.java###test13+++assertEquals###3, Rectangle_ESTest.java###test14+++horizontalOverlap###1, Rectangle_ESTest.java###test14+++assertEquals###3, Rectangle_ESTest.java###test15+++boundingBoxOf###1, Rectangle_ESTest.java###test15+++assertEquals###3, Rectangle_ESTest.java###test15+++setFrameFromCenter###4, Rectangle_ESTest.java###test15+++verticallyOverlaps###1, Rectangle_ESTest.java###test15+++assertFalse###1, Rectangle_ESTest.java###test16+++merge###1, Rectangle_ESTest.java###test16+++setBottom###1, Rectangle_ESTest.java###test16+++compareTo###1, Rectangle_ESTest.java###test16+++assertEquals###3, Rectangle_ESTest.java###test16+++assertEquals###2, Rectangle_ESTest.java###test17+++verticalOverlapRatio###1, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getCenterY###0, Rectangle_ESTest.java###test17+++assertEquals###3, Rectangle_ESTest.java###test17+++getMaxX###0, Rectangle_ESTest.java###test18+++verticalOverlap###1, Rectangle_ESTest.java###test18+++assertEquals###3, Rectangle_ESTest.java###test19+++merge###1, Rectangle_ESTest.java###test19+++verticalOverlap###1, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test19+++assertEquals###3, Rectangle_ESTest.java###test20+++push###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++boundingBoxOf###1, Rectangle_ESTest.java###test20+++overlapRatio###1, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getArea###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getMaxX###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++getCenterY###0, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test20+++assertEquals###3, Rectangle_ESTest.java###test21+++merge###1, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxY###0, Rectangle_ESTest.java###test21+++assertEquals###3, Rectangle_ESTest.java###test21+++getMaxX###0, Rectangle_ESTest.java###test22+++merge###1, Rectangle_ESTest.java###test22+++assertEquals###3, Rectangle_ESTest.java###test23+++boundingBoxOf###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++setLeft###1, Rectangle_ESTest.java###test23+++merge###1, Rectangle_ESTest.java###test23+++assertEquals###3, Rectangle_ESTest.java###test24+++getTop###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++getArea###0, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test24+++assertEquals###3, Rectangle_ESTest.java###test25+++add###2, Rectangle_ESTest.java###test25+++getTop###0, Rectangle_ESTest.java###test25+++assertEquals###3, Rectangle_ESTest.java###test26+++getRight###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test26+++getCenterY###0, Rectangle_ESTest.java###test26+++assertEquals###3, Rectangle_ESTest.java###test27+++boundingBoxOf###1, Rectangle_ESTest.java###test27+++setLeft###1, Rectangle_ESTest.java###test27+++getRight###0, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test27+++assertEquals###3, Rectangle_ESTest.java###test28+++getLeft###0, Rectangle_ESTest.java###test28+++assertEquals###3, Rectangle_ESTest.java###test29+++boundingBoxOf###1, Rectangle_ESTest.java###test29+++setLeft###1, Rectangle_ESTest.java###test29+++getLeft###0, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test29+++assertEquals###3, Rectangle_ESTest.java###test30+++getBottom###0, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++assertEquals###3, Rectangle_ESTest.java###test30+++getMaxX###0, Rectangle_ESTest.java###test31+++getBottom###0, Rectangle_ESTest.java###test31+++assertEquals###3, Rectangle_ESTest.java###test32+++getArea###0, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test32+++assertEquals###3, Rectangle_ESTest.java###test33+++getArea###0, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test33+++assertEquals###3, Rectangle_ESTest.java###test34+++boundingBoxOf###1, Rectangle_ESTest.java###test34+++compareTo###1, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++getArea###0, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###3, Rectangle_ESTest.java###test34+++assertEquals###2, Rectangle_ESTest.java###test35+++assertEquals###3, Rectangle_ESTest.java###test35+++setFrameFromCenter###4, Rectangle_ESTest.java###test35+++push###1, Rectangle_ESTest.java###test35+++boundingBoxOf###1, Rectangle_ESTest.java###test35+++assertTrue###1, Rectangle_ESTest.java###test35+++equals###1, Rectangle_ESTest.java###test36+++add###2, Rectangle_ESTest.java###test36+++push###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++boundingBoxOf###1, Rectangle_ESTest.java###test36+++overlapRatio###1, Rectangle_ESTest.java###test36+++assertEquals###3, Rectangle_ESTest.java###test37+++add###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++boundingBoxOf###1, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++getArea###0, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test37+++assertEquals###3, Rectangle_ESTest.java###test38+++verifyException###2, Rectangle_ESTest.java###test38+++verticallyOverlaps###1, Rectangle_ESTest.java###test38+++fail###1, Rectangle_ESTest.java###test39+++verifyException###2, Rectangle_ESTest.java###test39+++verticalOverlapRatio###1, Rectangle_ESTest.java###test39+++fail###1, Rectangle_ESTest.java###test40+++verifyException###2, Rectangle_ESTest.java###test40+++overlapRatio###1, Rectangle_ESTest.java###test40+++fail###1, Rectangle_ESTest.java###test41+++merge###1, Rectangle_ESTest.java###test41+++fail###1, Rectangle_ESTest.java###test42+++verifyException###2, Rectangle_ESTest.java###test42+++horizontallyOverlaps###1, Rectangle_ESTest.java###test42+++fail###1, Rectangle_ESTest.java###test43+++verifyException###2, Rectangle_ESTest.java###test43+++horizontalOverlap###1, Rectangle_ESTest.java###test43+++fail###1, Rectangle_ESTest.java###test44+++verifyException###2, Rectangle_ESTest.java###test44+++compareTo###1, Rectangle_ESTest.java###test44+++fail###1, Rectangle_ESTest.java###test45+++verifyException###2, Rectangle_ESTest.java###test45+++boundingBoxOf###1, Rectangle_ESTest.java###test45+++fail###1, Rectangle_ESTest.java###test46+++boundingBoxOf###1, Rectangle_ESTest.java###test46+++getArea###0, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test46+++assertEquals###3, Rectangle_ESTest.java###test47+++verifyException###2, Rectangle_ESTest.java###test47+++verticalOverlap###1, Rectangle_ESTest.java###test47+++fail###1, Rectangle_ESTest.java###test48+++getBottom###0, Rectangle_ESTest.java###test48+++assertEquals###3, Rectangle_ESTest.java###test49+++getTop###0, Rectangle_ESTest.java###test49+++assertEquals###3, Rectangle_ESTest.java###test50+++boundingBoxOf###1, Rectangle_ESTest.java###test50+++getRight###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test50+++getArea###0, Rectangle_ESTest.java###test50+++assertEquals###3, Rectangle_ESTest.java###test51+++horizontalOverlap###1, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterX###0, Rectangle_ESTest.java###test51+++assertEquals###3, Rectangle_ESTest.java###test51+++getCenterY###0, Rectangle_ESTest.java###test52+++boundingBoxOf###1, Rectangle_ESTest.java###test52+++getLeft###0, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++assertEquals###3, Rectangle_ESTest.java###test52+++getArea###0, Rectangle_ESTest.java###test53+++boundingBoxOf###1, Rectangle_ESTest.java###test53+++setBottom###1, Rectangle_ESTest.java###test53+++add###2, Rectangle_ESTest.java###test53+++verticalOverlapRatio###1, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test53+++assertEquals###3, Rectangle_ESTest.java###test54+++boundingBoxOf###1, Rectangle_ESTest.java###test54+++add###2, Rectangle_ESTest.java###test54+++verticalOverlapRatio###1, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test54+++assertEquals###3, Rectangle_ESTest.java###test55+++boundingBoxOf###1, Rectangle_ESTest.java###test55+++verticalOverlapRatio###1, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++getArea###0, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test55+++assertEquals###3, Rectangle_ESTest.java###test56+++verticalOverlapRatio###1, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++assertEquals###3, Rectangle_ESTest.java###test56+++getCenterX###0, Rectangle_ESTest.java###test57+++boundingBoxOf###1, Rectangle_ESTest.java###test57+++add###2, Rectangle_ESTest.java###test57+++verticalOverlapRatio###1, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test57+++assertEquals###3, Rectangle_ESTest.java###test58+++horizontallyOverlaps###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++assertTrue###1, Rectangle_ESTest.java###test58+++assertEquals###3, Rectangle_ESTest.java###test58+++getArea###0, Rectangle_ESTest.java###test59+++verticallyOverlaps###1, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++assertEquals###3, Rectangle_ESTest.java###test59+++getArea###0, Rectangle_ESTest.java###test59+++assertTrue###1, Rectangle_ESTest.java###test60+++verticallyOverlaps###1, Rectangle_ESTest.java###test60+++assertFalse###1, Rectangle_ESTest.java###test61+++compareTo###1, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxY###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++getMaxX###0, Rectangle_ESTest.java###test61+++assertEquals###3, Rectangle_ESTest.java###test61+++assertEquals###2, Rectangle_ESTest.java###test61+++isLtrDominant###0, Rectangle_ESTest.java###test62+++compareTo###1, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getMaxX###0, Rectangle_ESTest.java###test62+++assertEquals###2, Rectangle_ESTest.java###test62+++assertEquals###3, Rectangle_ESTest.java###test62+++getCenterY###0, Rectangle_ESTest.java###test63+++boundingBoxOf###1, Rectangle_ESTest.java###test63+++overlapRatio###1, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterY###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getCenterX###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test63+++getArea###0, Rectangle_ESTest.java###test63+++assertEquals###3, Rectangle_ESTest.java###test64+++isLtrDominant###0, Rectangle_ESTest.java###test64+++assertEquals###2, Rectangle_ESTest.java###test65+++boundingBoxOf###1, Rectangle_ESTest.java###test65+++horizontallyOverlaps###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++getArea###0, Rectangle_ESTest.java###test65+++assertFalse###1, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test65+++assertEquals###3, Rectangle_ESTest.java###test66+++boundingBoxOf###1, Rectangle_ESTest.java###test66+++getPoints###0, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++assertEquals###3, Rectangle_ESTest.java###test66+++getArea###0, Rectangle_ESTest.java###test66+++assertEquals###2, Rectangle_ESTest.java###test67+++boundingBoxOf###1, Rectangle_ESTest.java###test67+++toString###0, Rectangle_ESTest.java###test67+++assertEquals###2, Rectangle_ESTest.java###test68+++compareTo###1, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++assertEquals###2, Rectangle_ESTest.java###test68+++assertEquals###3, Rectangle_ESTest.java###test68+++getMaxX###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 10:03:59 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class Rectangle_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.Rectangle\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Rectangle_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Rectangle$1\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Rectangle_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Rectangle;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java###test67",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.add(rectangle0);\n    linkedList0.push(rectangle0);\n    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(linkedList0.contains(rectangle1));\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    rectangle0.setBottom((-1.0F));\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.x = 5492.6597F;\n    rectangle0.setLeft((-2276.9243F));\n    assertEquals((-2276.9243F), rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);\n    rectangle0.setRight((-1));\n    assertEquals(4504.1F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.setBottom((-1));\n    rectangle0.setTop(1020.68054F);\n    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setTop((-3179.1138F));\n    rectangle0.setLeft(1354.0F);\n    assertEquals(1354.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    rectangle0.setTop(1020.68054F);\n    assertEquals(1020.68054F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.add(0.0, (double) 0.0F);\n    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals((-1270.5645F), rectangle0.y, 0.01F);\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n    assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);\n    rectangle1.height = 3.4028235E38F;\n    rectangle2.add((Rectangle2D) rectangle0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(3.4028235E38F, rectangle2.height, 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.40063F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = new Rectangle();\n    float float0 = rectangle1.verticalOverlapRatio(rectangle2);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);\n    assertFalse(boolean0);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle();\n    float float0 = rectangle0.horizontalOverlap(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    rectangle0.setBottom(1877.9292F);\n    int int0 = rectangle0.compareTo(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n    assertEquals(2.0, rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.verticalOverlap(rectangle0);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    Rectangle rectangle2 = rectangle1.merge(rectangle0);\n    float float0 = rectangle1.verticalOverlap(rectangle2);\n    assertEquals(0.4F, rectangle1.height, 0.01F);\n    assertEquals(0.4F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(0.0F, rectangle2.getArea(), 0.01F);\n    assertEquals((-1.0F), float0, 0.01F);\n    assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);\n    assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);\n    assertEquals(0.0F, rectangle2.x, 0.01F);\n    assertEquals(0.0F, rectangle2.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    Rectangle rectangle1 = rectangle0.merge(rectangle0);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);\n    assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));\n    rectangle1.merge(rectangle0);\n    assertEquals(1573.948F, rectangle1.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle();\n    rectangle1.setLeft(14.092807F);\n    rectangle0.setLeft((-1137.2F));\n    rectangle1.x = 0.0F;\n    rectangle0.merge(rectangle1);\n    assertEquals(0.0F, rectangle0.height, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.getTop();\n    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.0F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    rectangle0.getTop();\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);\n    assertEquals(532.54016F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getRight();\n    assertEquals((-1137.2F), rectangle0.x, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    rectangle0.setLeft((-1137.2F));\n    float float0 = rectangle0.getLeft();\n    assertEquals(0.0F, rectangle0.width, 0.01F);\n    assertEquals((-1137.2F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test30() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);\n    float float0 = rectangle0.getBottom();\n    assertEquals(2255.05F, float0, 0.01F);\n    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    rectangle0.y = (-2670.0F);\n    float float0 = rectangle0.getBottom();\n    assertEquals((-2670.0F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    float float0 = rectangle0.getArea();\n    assertEquals(0.0F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, rectangle0.y, 0.01F);\n    assertEquals(-0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);\n    float float0 = rectangle0.getArea();\n    assertEquals((-574.0F), rectangle0.x, 0.01F);\n    assertEquals((-3515.6F), rectangle0.y, 0.01F);\n    assertEquals((-1.8271632E7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    int int0 = rectangle1.compareTo(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(1, int0);\n}#####@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    assertEquals(1352.58F, rectangle0.width, 0.01F);\n    rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertTrue(rectangle1.equals((Object) rectangle0));\n}#####@Test(timeout = 4000)\npublic void test36() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));\n    rectangle0.add((double) (-3515.6F), (double) (-716.1035F));\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    linkedList0.push(rectangle0);\n    assertEquals(3515.6F, rectangle0.width, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle1.overlapRatio(rectangle2);\n    assertEquals(1.0000001F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);\n    linkedList0.add(rectangle0);\n    assertEquals(1.0F, rectangle0.y, 0.01F);\n    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);\n    assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);\n    assertEquals(1.0F, rectangle1.x, 0.01F);\n    assertEquals(1.0F, rectangle1.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test40() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.overlapRatio((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.merge((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test42() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontallyOverlaps((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.horizontalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.compareTo((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    // Undeclared exception!\n    try {\n        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getArea();\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    // Undeclared exception!\n    try {\n        rectangle0.verticalOverlap((Rectangle) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Rectangle\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getBottom();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test49() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    float float0 = rectangle0.getTop();\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getRight();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test51() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);\n    float float0 = rectangle0.horizontalOverlap(rectangle0);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(1.5, rectangle0.getCenterX(), 0.01);\n    assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test52() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.getLeft();\n    assertEquals(3.4028235E38F, float0, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test53() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle0.setBottom(3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(Float.NaN, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test54() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));\n    float float0 = rectangle0.verticalOverlapRatio(rectangle1);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, rectangle1.y, 0.01F);\n    assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test57() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);\n    rectangle1.add(0.0, (double) 0.0F);\n    float float0 = rectangle1.verticalOverlapRatio(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test58() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(1247.0F, rectangle0.x, 0.01F);\n    assertEquals(1352.58F, rectangle0.y, 0.01F);\n    assertTrue(boolean0);\n    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertEquals(4059.052F, rectangle0.x, 0.01F);\n    assertEquals(4059.052F, rectangle0.y, 0.01F);\n    assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);\n    assertTrue(boolean0);\n}#####@Test(timeout = 4000)\npublic void test60() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);\n    assertFalse(boolean0);\n}#####@Test(timeout = 4000)\npublic void test61() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);\n    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);\n    rectangle0.compareTo(rectangle1);\n    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);\n    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);\n    assertEquals(4128.04F, rectangle0.width, 0.01F);\n    assertEquals(0, rectangle1.isLtrDominant());\n}#####@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);\n    int int0 = rectangle0.compareTo(rectangle0);\n    assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);\n    assertEquals(0, int0);\n    assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);\n}#####@Test(timeout = 4000)\npublic void test63() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    float float0 = rectangle0.overlapRatio(rectangle0);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);\n    assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test64() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    int int0 = rectangle0.isLtrDominant();\n    assertEquals(0, int0);\n}#####@Test(timeout = 4000)\npublic void test65() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertFalse(boolean0);\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    Point2D[] point2DArray0 = rectangle0.getPoints();\n    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);\n    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);\n    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);\n    assertEquals(4, point2DArray0.length);\n}#####@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}#####@Test(timeout = 4000)\npublic void test68() throws Throwable {\n    Rectangle rectangle0 = new Rectangle();\n    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);\n    int int0 = rectangle0.compareTo(rectangle1);\n    assertEquals(0.0F, rectangle1.x, 0.01F);\n    assertEquals(0.0F, rectangle1.height, 0.01F);\n    assertEquals(0.0F, rectangle1.width, 0.01F);\n    assertEquals((-1), int0);\n    assertEquals(0.0, rectangle1.getMaxX(), 0.01);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();\n    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);\n    String string0 = rectangle0.toString();\n    assertEquals(\"technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]\", string0);\n}",
            "TestRelevantFocal": "[boundingBoxOf###1, toString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  10:03:59 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Rectangle;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public boolean isTabular(Page page) {\n    if (page.getText().isEmpty()) {\n        return false;\n    }\n    Page minimalRegion = page.getArea(Utils.bounds(page.getText()));\n    List<? extends Table> tables = new SpreadsheetExtractionAlgorithm().extract(minimalRegion);\n    if (tables.isEmpty()) {\n        return false;\n    }\n    Table table = tables.get(0);\n    int rowsDefinedByLines = table.getRowCount();\n    int colsDefinedByLines = table.getColCount();\n    tables = new BasicExtractionAlgorithm().extract(minimalRegion);\n    if (tables.isEmpty()) {\n        return false;\n    }\n    table = tables.get(0);\n    int rowsDefinedWithoutLines = table.getRowCount();\n    int colsDefinedWithoutLines = table.getColCount();\n    float ratio = (((float) colsDefinedByLines / colsDefinedWithoutLines) + ((float) rowsDefinedByLines / rowsDefinedWithoutLines)) / 2.0f;\n    return ratio > MAGIC_HEURISTIC_NUMBER && ratio < (1 / MAGIC_HEURISTIC_NUMBER);\n}",
            "all_field_declaration": "private static final float MAGIC_HEURISTIC_NUMBER = 0.65f;\nprivate static final Comparator<Point2D> Y_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareY = compareRounded(point1.getY(), point2.getY());\n    if (compareY == 0) {\n        return compareRounded(point1.getX(), point2.getX());\n    }\n    return compareY;\n};\nprivate static final Comparator<Point2D> X_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareX = compareRounded(point1.getX(), point2.getX());\n    if (compareX == 0) {\n        return compareRounded(point1.getY(), point2.getY());\n    }\n    return compareX;\n};",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "14",
            "Filed": "private static final float MAGIC_HEURISTIC_NUMBER = 0.65f;",
            "Parameter_type": "Page",
            "Import_statements": "",
            "public_method_signature": "public List<Table> extract(Page page);\npublic List<Table> extract(Page page, List<Ruling> rulings);\npublic boolean isTabular(Page page);\npublic static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);\npublic static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);\npublic String toString();",
            "public_field": "",
            "Method_statement": "isTabular(Page page)",
            "Method_name": "isTabular",
            "Class_declaration": "public class SpreadsheetExtractionAlgorithm {\n",
            "constructors": "",
            "all_method_signature": "private static int compareRounded(double d1, double d2);\npublic List<Table> extract(Page page);\npublic List<Table> extract(Page page, List<Ruling> rulings);\npublic boolean isTabular(Page page);\npublic static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);\npublic static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);\npublic String toString();",
            "Class_name": "SpreadsheetExtractionAlgorithm",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm.java###isTabular",
            "Parameter_num": "1",
            "contextMethod": "@Override\npublic List<Table> extract(Page page) {\n    return extract(page, page.getRulings());\n}",
            "all_Import_statements": "import technology.tabula.*;\n\nimport java.awt.geom.Point2D;\n\nimport java.util.*;\n",
            "comment": "",
            "packageName": "technology.tabula.extractors",
            "method_signature": "public boolean isTabular(Page page);",
            "Junit_version": "4",
            "returnType": "boolean"
        },
        "Test_method": {
            "AllTest2Focal": "[SpreadsheetExtractionAlgorithm_ESTest.java###test0+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test0+++isTabular###1, SpreadsheetExtractionAlgorithm_ESTest.java###test0+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test1+++findSpreadsheetsFromCells###1, SpreadsheetExtractionAlgorithm_ESTest.java###test1+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++findSpreadsheetsFromCells###1, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++findCells###2, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++findCells###2, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++assertTrue###1, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++isEmpty###0, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++add###1, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++extract###2, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++extract###2, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test7+++toString###0, SpreadsheetExtractionAlgorithm_ESTest.java###test7+++assertEquals###2, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++extract###1, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:51:32 GMT 2024\n */\n\npackage technology.tabula.extractors;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class SpreadsheetExtractionAlgorithm_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SpreadsheetExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Utils\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SpreadsheetExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm$PolygonVertex\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Ruling$5\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm$Direction\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.Page;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm_ESTest.java###test0",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.isTabular((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    LinkedList<Cell> linkedList0 = new LinkedList<Cell>();\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells(linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findCells((List<Ruling>) null, (List<Ruling>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Cell> list0 = SpreadsheetExtractionAlgorithm.findCells(linkedList0, linkedList0);\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.add((Ruling) null);\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test7() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    String string0 = spreadsheetExtractionAlgorithm0.toString();\n    assertEquals(\"lattice\", string0);\n}#####@Test(timeout = 4000)\npublic void test8() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.isTabular((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}",
            "TestRelevantFocal": "[isTabular###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:51:32 GMT 2024\n */\npackage technology.tabula.extractors;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.Page;\nimport technology.tabula.Rectangle;\nimport technology.tabula.Ruling;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class SpreadsheetExtractionAlgorithm_ESTest extends SpreadsheetExtractionAlgorithm_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells) {\n    List<Rectangle> rectangles = new ArrayList<>();\n    Set<Point2D> pointSet = new HashSet<>();\n    Map<Point2D, Point2D> edgesH = new HashMap<>();\n    Map<Point2D, Point2D> edgesV = new HashMap<>();\n    int i = 0;\n    cells = new ArrayList<>(new HashSet<>(cells));\n    Utils.sort(cells, Rectangle.ILL_DEFINED_ORDER);\n    for (Rectangle cell : cells) {\n        for (Point2D pt : cell.getPoints()) {\n            if (pointSet.contains(pt)) {\n                pointSet.remove(pt);\n            } else {\n                pointSet.add(pt);\n            }\n        }\n    }\n    List<Point2D> pointsSortX = new ArrayList<>(pointSet);\n    pointsSortX.sort(X_FIRST_POINT_COMPARATOR);\n    List<Point2D> pointsSortY = new ArrayList<>(pointSet);\n    pointsSortY.sort(Y_FIRST_POINT_COMPARATOR);\n    while (i < pointSet.size()) {\n        float currY = (float) pointsSortY.get(i).getY();\n        while (i < pointSet.size() && Utils.feq(pointsSortY.get(i).getY(), currY)) {\n            edgesH.put(pointsSortY.get(i), pointsSortY.get(i + 1));\n            edgesH.put(pointsSortY.get(i + 1), pointsSortY.get(i));\n            i += 2;\n        }\n    }\n    i = 0;\n    while (i < pointSet.size()) {\n        float currX = (float) pointsSortX.get(i).getX();\n        while (i < pointSet.size() && Utils.feq(pointsSortX.get(i).getX(), currX)) {\n            edgesV.put(pointsSortX.get(i), pointsSortX.get(i + 1));\n            edgesV.put(pointsSortX.get(i + 1), pointsSortX.get(i));\n            i += 2;\n        }\n    }\n    List<List<PolygonVertex>> polygons = new ArrayList<>();\n    Point2D nextVertex;\n    while (!edgesH.isEmpty()) {\n        ArrayList<PolygonVertex> polygon = new ArrayList<>();\n        Point2D first = edgesH.keySet().iterator().next();\n        polygon.add(new PolygonVertex(first, Direction.HORIZONTAL));\n        edgesH.remove(first);\n        while (true) {\n            PolygonVertex curr = polygon.get(polygon.size() - 1);\n            PolygonVertex lastAddedVertex;\n            if (curr.direction == Direction.HORIZONTAL) {\n                nextVertex = edgesV.get(curr.point);\n                edgesV.remove(curr.point);\n                lastAddedVertex = new PolygonVertex(nextVertex, Direction.VERTICAL);\n            } else {\n                nextVertex = edgesH.get(curr.point);\n                edgesH.remove(curr.point);\n                lastAddedVertex = new PolygonVertex(nextVertex, Direction.HORIZONTAL);\n            }\n            polygon.add(lastAddedVertex);\n            if (lastAddedVertex.equals(polygon.get(0))) {\n                polygon.remove(polygon.size() - 1);\n                break;\n            }\n        }\n        for (PolygonVertex vertex : polygon) {\n            edgesH.remove(vertex.point);\n            edgesV.remove(vertex.point);\n        }\n        polygons.add(polygon);\n    }\n    for (List<PolygonVertex> poly : polygons) {\n        float top = java.lang.Float.MAX_VALUE;\n        float left = java.lang.Float.MAX_VALUE;\n        float bottom = java.lang.Float.MIN_VALUE;\n        float right = java.lang.Float.MIN_VALUE;\n        for (PolygonVertex pt : poly) {\n            top = (float) Math.min(top, pt.point.getY());\n            left = (float) Math.min(left, pt.point.getX());\n            bottom = (float) Math.max(bottom, pt.point.getY());\n            right = (float) Math.max(right, pt.point.getX());\n        }\n        rectangles.add(new Rectangle(top, left, right - left, bottom - top));\n    }\n    return rectangles;\n}",
            "all_field_declaration": "private static final float MAGIC_HEURISTIC_NUMBER = 0.65f;\nprivate static final Comparator<Point2D> Y_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareY = compareRounded(point1.getY(), point2.getY());\n    if (compareY == 0) {\n        return compareRounded(point1.getX(), point2.getX());\n    }\n    return compareY;\n};\nprivate static final Comparator<Point2D> X_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareX = compareRounded(point1.getX(), point2.getX());\n    if (compareX == 0) {\n        return compareRounded(point1.getY(), point2.getY());\n    }\n    return compareX;\n};",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "20",
            "Filed": "private static final Comparator<Point2D> Y_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareY = compareRounded(point1.getY(), point2.getY());\n    if (compareY == 0) {\n        return compareRounded(point1.getX(), point2.getX());\n    }\n    return compareY;\n};private static final Comparator<Point2D> X_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareX = compareRounded(point1.getX(), point2.getX());\n    if (compareX == 0) {\n        return compareRounded(point1.getY(), point2.getY());\n    }\n    return compareX;\n};",
            "Parameter_type": "List<? extends Rectangle>",
            "Import_statements": "import java.awt.geom.Point2D;\n",
            "public_method_signature": "public List<Table> extract(Page page);\npublic List<Table> extract(Page page, List<Ruling> rulings);\npublic boolean isTabular(Page page);\npublic static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);\npublic static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);\npublic String toString();",
            "public_field": "",
            "Method_statement": "findSpreadsheetsFromCells(List<? extends Rectangle> cells)",
            "Method_name": "findSpreadsheetsFromCells",
            "Class_declaration": "public class SpreadsheetExtractionAlgorithm {\n",
            "constructors": "",
            "all_method_signature": "private static int compareRounded(double d1, double d2);\npublic List<Table> extract(Page page);\npublic List<Table> extract(Page page, List<Ruling> rulings);\npublic boolean isTabular(Page page);\npublic static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);\npublic static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);\npublic String toString();",
            "Class_name": "SpreadsheetExtractionAlgorithm",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm.java###findSpreadsheetsFromCells",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import technology.tabula.*;\n\nimport java.awt.geom.Point2D;\n\nimport java.util.*;\n",
            "comment": "",
            "packageName": "technology.tabula.extractors",
            "method_signature": "public static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);",
            "Junit_version": "4",
            "returnType": "List<Rectangle>"
        },
        "Test_method": {
            "AllTest2Focal": "[SpreadsheetExtractionAlgorithm_ESTest.java###test0+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test0+++isTabular###1, SpreadsheetExtractionAlgorithm_ESTest.java###test0+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test1+++findSpreadsheetsFromCells###1, SpreadsheetExtractionAlgorithm_ESTest.java###test1+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++findSpreadsheetsFromCells###1, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++findCells###2, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++findCells###2, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++assertTrue###1, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++isEmpty###0, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++add###1, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++extract###2, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++extract###2, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test7+++toString###0, SpreadsheetExtractionAlgorithm_ESTest.java###test7+++assertEquals###2, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++extract###1, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:51:32 GMT 2024\n */\n\npackage technology.tabula.extractors;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class SpreadsheetExtractionAlgorithm_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SpreadsheetExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Utils\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SpreadsheetExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm$PolygonVertex\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Ruling$5\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm$Direction\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Cell;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm_ESTest.java###test2",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.isTabular((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    LinkedList<Cell> linkedList0 = new LinkedList<Cell>();\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells(linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findCells((List<Ruling>) null, (List<Ruling>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Cell> list0 = SpreadsheetExtractionAlgorithm.findCells(linkedList0, linkedList0);\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.add((Ruling) null);\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test7() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    String string0 = spreadsheetExtractionAlgorithm0.toString();\n    assertEquals(\"lattice\", string0);\n}#####@Test(timeout = 4000)\npublic void test8() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    LinkedList<Cell> linkedList0 = new LinkedList<Cell>();\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells(linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}",
            "TestRelevantFocal": "[findSpreadsheetsFromCells###1]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:51:32 GMT 2024\n */\npackage technology.tabula.extractors;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.Page;\nimport technology.tabula.Rectangle;\nimport technology.tabula.Ruling;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class SpreadsheetExtractionAlgorithm_ESTest extends SpreadsheetExtractionAlgorithm_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines) {\n    List<Cell> cellsFound = new ArrayList<>();\n    Map<Point2D, Ruling[]> intersectionPoints = Ruling.findIntersections(horizontalRulingLines, verticalRulingLines);\n    List<Point2D> intersectionPointsList = new ArrayList<>(intersectionPoints.keySet());\n    intersectionPointsList.sort(Y_FIRST_POINT_COMPARATOR);\n    for (int i = 0; i < intersectionPointsList.size(); i++) {\n        Point2D topLeft = intersectionPointsList.get(i);\n        Ruling[] hv = intersectionPoints.get(topLeft);\n        List<Point2D> xPoints = new ArrayList<>();\n        List<Point2D> yPoints = new ArrayList<>();\n        for (Point2D p : intersectionPointsList.subList(i, intersectionPointsList.size())) {\n            if (p.getX() == topLeft.getX() && p.getY() > topLeft.getY()) {\n                xPoints.add(p);\n            }\n            if (p.getY() == topLeft.getY() && p.getX() > topLeft.getX()) {\n                yPoints.add(p);\n            }\n        }\n        outer: for (Point2D xPoint : xPoints) {\n            if (!hv[1].equals(intersectionPoints.get(xPoint)[1])) {\n                continue;\n            }\n            for (Point2D yPoint : yPoints) {\n                if (!hv[0].equals(intersectionPoints.get(yPoint)[0])) {\n                    continue;\n                }\n                Point2D btmRight = new Point2D.Float((float) yPoint.getX(), (float) xPoint.getY());\n                if (intersectionPoints.containsKey(btmRight) && intersectionPoints.get(btmRight)[0].equals(intersectionPoints.get(xPoint)[0]) && intersectionPoints.get(btmRight)[1].equals(intersectionPoints.get(yPoint)[1])) {\n                    cellsFound.add(new Cell(topLeft, btmRight));\n                    break outer;\n                }\n            }\n        }\n    }\n    return cellsFound;\n}",
            "all_field_declaration": "private static final float MAGIC_HEURISTIC_NUMBER = 0.65f;\nprivate static final Comparator<Point2D> Y_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareY = compareRounded(point1.getY(), point2.getY());\n    if (compareY == 0) {\n        return compareRounded(point1.getX(), point2.getX());\n    }\n    return compareY;\n};\nprivate static final Comparator<Point2D> X_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareX = compareRounded(point1.getX(), point2.getX());\n    if (compareX == 0) {\n        return compareRounded(point1.getY(), point2.getY());\n    }\n    return compareX;\n};",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "6",
            "Filed": "private static final Comparator<Point2D> Y_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareY = compareRounded(point1.getY(), point2.getY());\n    if (compareY == 0) {\n        return compareRounded(point1.getX(), point2.getX());\n    }\n    return compareY;\n};",
            "Parameter_type": "List<Ruling>,List<Ruling>",
            "Import_statements": "import java.awt.geom.Point2D;\n",
            "public_method_signature": "public List<Table> extract(Page page);\npublic List<Table> extract(Page page, List<Ruling> rulings);\npublic boolean isTabular(Page page);\npublic static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);\npublic static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);\npublic String toString();",
            "public_field": "",
            "Method_statement": "findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines)",
            "Method_name": "findCells",
            "Class_declaration": "public class SpreadsheetExtractionAlgorithm {\n",
            "constructors": "",
            "all_method_signature": "private static int compareRounded(double d1, double d2);\npublic List<Table> extract(Page page);\npublic List<Table> extract(Page page, List<Ruling> rulings);\npublic boolean isTabular(Page page);\npublic static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);\npublic static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);\npublic String toString();",
            "Class_name": "SpreadsheetExtractionAlgorithm",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm.java###findCells",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import technology.tabula.*;\n\nimport java.awt.geom.Point2D;\n\nimport java.util.*;\n",
            "comment": "",
            "packageName": "technology.tabula.extractors",
            "method_signature": "public static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);",
            "Junit_version": "4",
            "returnType": "List<Cell>"
        },
        "Test_method": {
            "AllTest2Focal": "[SpreadsheetExtractionAlgorithm_ESTest.java###test0+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test0+++isTabular###1, SpreadsheetExtractionAlgorithm_ESTest.java###test0+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test1+++findSpreadsheetsFromCells###1, SpreadsheetExtractionAlgorithm_ESTest.java###test1+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++findSpreadsheetsFromCells###1, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++findCells###2, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++findCells###2, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++assertTrue###1, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++isEmpty###0, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++add###1, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++extract###2, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++extract###2, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test7+++toString###0, SpreadsheetExtractionAlgorithm_ESTest.java###test7+++assertEquals###2, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++extract###1, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:51:32 GMT 2024\n */\n\npackage technology.tabula.extractors;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class SpreadsheetExtractionAlgorithm_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SpreadsheetExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Utils\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SpreadsheetExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm$PolygonVertex\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Ruling$5\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm$Direction\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Cell;\nimport technology.tabula.Ruling;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm_ESTest.java###test4",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.isTabular((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    LinkedList<Cell> linkedList0 = new LinkedList<Cell>();\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells(linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findCells((List<Ruling>) null, (List<Ruling>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Cell> list0 = SpreadsheetExtractionAlgorithm.findCells(linkedList0, linkedList0);\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.add((Ruling) null);\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test7() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    String string0 = spreadsheetExtractionAlgorithm0.toString();\n    assertEquals(\"lattice\", string0);\n}#####@Test(timeout = 4000)\npublic void test8() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Cell> list0 = SpreadsheetExtractionAlgorithm.findCells(linkedList0, linkedList0);\n    assertTrue(list0.isEmpty());\n}",
            "TestRelevantFocal": "[findCells###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:51:32 GMT 2024\n */\npackage technology.tabula.extractors;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.Page;\nimport technology.tabula.Rectangle;\nimport technology.tabula.Ruling;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class SpreadsheetExtractionAlgorithm_ESTest extends SpreadsheetExtractionAlgorithm_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public List<Table> extract(Page page, List<Ruling> rulings) {\n    List<Ruling> horizontalR = new ArrayList<>();\n    List<Ruling> verticalR = new ArrayList<>();\n    for (Ruling r : rulings) {\n        if (r.horizontal()) {\n            horizontalR.add(r);\n        } else if (r.vertical()) {\n            verticalR.add(r);\n        }\n    }\n    horizontalR = Ruling.collapseOrientedRulings(horizontalR);\n    verticalR = Ruling.collapseOrientedRulings(verticalR);\n    List<Cell> cells = findCells(horizontalR, verticalR);\n    List<Rectangle> spreadsheetAreas = findSpreadsheetsFromCells(cells);\n    List<Table> spreadsheets = new ArrayList<>();\n    for (Rectangle area : spreadsheetAreas) {\n        List<Cell> overlappingCells = new ArrayList<>();\n        for (Cell c : cells) {\n            if (c.intersects(area)) {\n                c.setTextElements(TextElement.mergeWords(page.getText(c)));\n                overlappingCells.add(c);\n            }\n        }\n        List<Ruling> horizontalOverlappingRulings = new ArrayList<>();\n        for (Ruling hr : horizontalR) {\n            if (area.intersectsLine(hr)) {\n                horizontalOverlappingRulings.add(hr);\n            }\n        }\n        List<Ruling> verticalOverlappingRulings = new ArrayList<>();\n        for (Ruling vr : verticalR) {\n            if (area.intersectsLine(vr)) {\n                verticalOverlappingRulings.add(vr);\n            }\n        }\n        TableWithRulingLines t = new TableWithRulingLines(area, overlappingCells, horizontalOverlappingRulings, verticalOverlappingRulings, this, page.getPageNumber());\n        spreadsheets.add(t);\n    }\n    Utils.sort(spreadsheets, Rectangle.ILL_DEFINED_ORDER);\n    return spreadsheets;\n}",
            "all_field_declaration": "private static final float MAGIC_HEURISTIC_NUMBER = 0.65f;\nprivate static final Comparator<Point2D> Y_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareY = compareRounded(point1.getY(), point2.getY());\n    if (compareY == 0) {\n        return compareRounded(point1.getX(), point2.getX());\n    }\n    return compareY;\n};\nprivate static final Comparator<Point2D> X_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareX = compareRounded(point1.getX(), point2.getX());\n    if (compareX == 0) {\n        return compareRounded(point1.getY(), point2.getY());\n    }\n    return compareX;\n};",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "11",
            "Filed": "",
            "Parameter_type": "Page,List<Ruling>",
            "Import_statements": "",
            "public_method_signature": "public List<Table> extract(Page page);\npublic List<Table> extract(Page page, List<Ruling> rulings);\npublic boolean isTabular(Page page);\npublic static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);\npublic static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);\npublic String toString();",
            "public_field": "",
            "Method_statement": "extract(Page page, List<Ruling> rulings)",
            "Method_name": "extract",
            "Class_declaration": "public class SpreadsheetExtractionAlgorithm {\n",
            "constructors": "",
            "all_method_signature": "private static int compareRounded(double d1, double d2);\npublic List<Table> extract(Page page);\npublic List<Table> extract(Page page, List<Ruling> rulings);\npublic boolean isTabular(Page page);\npublic static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);\npublic static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);\npublic String toString();",
            "Class_name": "SpreadsheetExtractionAlgorithm",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm.java###extract",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import technology.tabula.*;\n\nimport java.awt.geom.Point2D;\n\nimport java.util.*;\n",
            "comment": "\n     * Extract a list of Table from page using rulings as separators\n     ",
            "packageName": "technology.tabula.extractors",
            "method_signature": "public List<Table> extract(Page page, List<Ruling> rulings);",
            "Junit_version": "4",
            "returnType": "List<Table>"
        },
        "Test_method": {
            "AllTest2Focal": "[SpreadsheetExtractionAlgorithm_ESTest.java###test0+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test0+++isTabular###1, SpreadsheetExtractionAlgorithm_ESTest.java###test0+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test1+++findSpreadsheetsFromCells###1, SpreadsheetExtractionAlgorithm_ESTest.java###test1+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++findSpreadsheetsFromCells###1, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++findCells###2, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++findCells###2, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++assertTrue###1, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++isEmpty###0, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++add###1, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++extract###2, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++extract###2, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test7+++toString###0, SpreadsheetExtractionAlgorithm_ESTest.java###test7+++assertEquals###2, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++extract###1, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:51:32 GMT 2024\n */\n\npackage technology.tabula.extractors;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class SpreadsheetExtractionAlgorithm_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SpreadsheetExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Utils\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SpreadsheetExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm$PolygonVertex\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Ruling$5\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm$Direction\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Page;\nimport technology.tabula.Ruling;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm_ESTest.java###test5",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.isTabular((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    LinkedList<Cell> linkedList0 = new LinkedList<Cell>();\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells(linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findCells((List<Ruling>) null, (List<Ruling>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Cell> list0 = SpreadsheetExtractionAlgorithm.findCells(linkedList0, linkedList0);\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.add((Ruling) null);\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test7() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    String string0 = spreadsheetExtractionAlgorithm0.toString();\n    assertEquals(\"lattice\", string0);\n}#####@Test(timeout = 4000)\npublic void test8() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.add((Ruling) null);\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}",
            "TestRelevantFocal": "[extract###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:51:32 GMT 2024\n */\npackage technology.tabula.extractors;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.Page;\nimport technology.tabula.Rectangle;\nimport technology.tabula.Ruling;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class SpreadsheetExtractionAlgorithm_ESTest extends SpreadsheetExtractionAlgorithm_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String toString() {\n    return String.format(\"%s[point=%s,direction=%s]\", this.getClass().getName(), this.point.toString(), this.direction.toString());\n}",
            "all_field_declaration": "private static final float MAGIC_HEURISTIC_NUMBER = 0.65f;\nprivate static final Comparator<Point2D> Y_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareY = compareRounded(point1.getY(), point2.getY());\n    if (compareY == 0) {\n        return compareRounded(point1.getX(), point2.getX());\n    }\n    return compareY;\n};\nprivate static final Comparator<Point2D> X_FIRST_POINT_COMPARATOR = (point1, point2) -> {\n    int compareX = compareRounded(point1.getX(), point2.getX());\n    if (compareX == 0) {\n        return compareRounded(point1.getY(), point2.getY());\n    }\n    return compareX;\n};",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "Point2D point;Direction direction;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public List<Table> extract(Page page);\npublic List<Table> extract(Page page, List<Ruling> rulings);\npublic boolean isTabular(Page page);\npublic static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);\npublic static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);\npublic String toString();",
            "public_field": "",
            "Method_statement": "toString()",
            "Method_name": "toString",
            "Class_declaration": "static class PolygonVertex {\n",
            "constructors": "public PolygonVertex(Point2D point, Direction direction) {\n    this.direction = direction;\n    this.point = point;\n}",
            "all_method_signature": "private static int compareRounded(double d1, double d2);\npublic List<Table> extract(Page page);\npublic List<Table> extract(Page page, List<Ruling> rulings);\npublic boolean isTabular(Page page);\npublic static List<Cell> findCells(List<Ruling> horizontalRulingLines, List<Ruling> verticalRulingLines);\npublic static List<Rectangle> findSpreadsheetsFromCells(List<? extends Rectangle> cells);\npublic String toString();",
            "Class_name": "PolygonVertex",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm.java###toString",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import technology.tabula.*;\n\nimport java.awt.geom.Point2D;\n\nimport java.util.*;\n",
            "comment": "",
            "packageName": "technology.tabula.extractors",
            "method_signature": "public String toString();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[SpreadsheetExtractionAlgorithm_ESTest.java###test0+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test0+++isTabular###1, SpreadsheetExtractionAlgorithm_ESTest.java###test0+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test1+++findSpreadsheetsFromCells###1, SpreadsheetExtractionAlgorithm_ESTest.java###test1+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++findSpreadsheetsFromCells###1, SpreadsheetExtractionAlgorithm_ESTest.java###test2+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++findCells###2, SpreadsheetExtractionAlgorithm_ESTest.java###test3+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++findCells###2, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++assertTrue###1, SpreadsheetExtractionAlgorithm_ESTest.java###test4+++isEmpty###0, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++add###1, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++extract###2, SpreadsheetExtractionAlgorithm_ESTest.java###test5+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++extract###2, SpreadsheetExtractionAlgorithm_ESTest.java###test6+++fail###1, SpreadsheetExtractionAlgorithm_ESTest.java###test7+++toString###0, SpreadsheetExtractionAlgorithm_ESTest.java###test7+++assertEquals###2, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++verifyException###2, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++extract###1, SpreadsheetExtractionAlgorithm_ESTest.java###test8+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:51:32 GMT 2024\n */\n\npackage technology.tabula.extractors;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class SpreadsheetExtractionAlgorithm_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SpreadsheetExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Utils\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.Ruling\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SpreadsheetExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm$PolygonVertex\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$SOType\",\n      \"technology.tabula.Ruling$5\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm$Direction\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Ruling$1\",\n      \"technology.tabula.Ruling$2\",\n      \"technology.tabula.Ruling$3\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Cell\",\n      \"technology.tabula.Ruling$1SortObject\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm_ESTest.java###test7",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.isTabular((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells((List<? extends Rectangle>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    LinkedList<Cell> linkedList0 = new LinkedList<Cell>();\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findSpreadsheetsFromCells(linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    // Undeclared exception!\n    try {\n        SpreadsheetExtractionAlgorithm.findCells((List<Ruling>) null, (List<Ruling>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.Ruling\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    List<Cell> list0 = SpreadsheetExtractionAlgorithm.findCells(linkedList0, linkedList0);\n    assertTrue(list0.isEmpty());\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    linkedList0.add((Ruling) null);\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null, (List<Ruling>) linkedList0);\n        fail(\"Expecting exception: NoClassDefFoundError\");\n    } catch (NoClassDefFoundError e) {\n        // \n        // org/apache/commons/cli/ParseException\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test7() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    String string0 = spreadsheetExtractionAlgorithm0.toString();\n    assertEquals(\"lattice\", string0);\n}#####@Test(timeout = 4000)\npublic void test8() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        spreadsheetExtractionAlgorithm0.extract((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test7() throws Throwable {\n    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();\n    String string0 = spreadsheetExtractionAlgorithm0.toString();\n    assertEquals(\"lattice\", string0);\n}",
            "TestRelevantFocal": "[toString###0, toString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:51:32 GMT 2024\n */\npackage technology.tabula.extractors;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Cell;\nimport technology.tabula.Page;\nimport technology.tabula.Rectangle;\nimport technology.tabula.Ruling;\nimport technology.tabula.extractors.SpreadsheetExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class SpreadsheetExtractionAlgorithm_ESTest extends SpreadsheetExtractionAlgorithm_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static List<java.lang.Float> columnPositions(List<Line> lines) {\n    List<Rectangle> regions = new ArrayList<>();\n    for (TextChunk tc : lines.get(0).getTextElements()) {\n        if (tc.isSameChar(Line.WHITE_SPACE_CHARS)) {\n            continue;\n        }\n        Rectangle r = new Rectangle();\n        r.setRect(tc);\n        regions.add(r);\n    }\n    for (Line l : lines.subList(1, lines.size())) {\n        List<TextChunk> lineTextElements = new ArrayList<>();\n        for (TextChunk tc : l.getTextElements()) {\n            if (!tc.isSameChar(Line.WHITE_SPACE_CHARS)) {\n                lineTextElements.add(tc);\n            }\n        }\n        for (Rectangle cr : regions) {\n            List<TextChunk> overlaps = new ArrayList<>();\n            for (TextChunk te : lineTextElements) {\n                if (cr.horizontallyOverlaps(te)) {\n                    overlaps.add(te);\n                }\n            }\n            for (TextChunk te : overlaps) {\n                cr.merge(te);\n            }\n            lineTextElements.removeAll(overlaps);\n        }\n        for (TextChunk te : lineTextElements) {\n            Rectangle r = new Rectangle();\n            r.setRect(te);\n            regions.add(r);\n        }\n    }\n    List<java.lang.Float> rv = new ArrayList<>();\n    for (Rectangle r : regions) {\n        rv.add(r.getRight());\n    }\n    Collections.sort(rv);\n    return rv;\n}",
            "all_field_declaration": "private List<Ruling> verticalRulings = null;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "7",
            "Filed": "",
            "Parameter_type": "List<Line>",
            "Import_statements": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport technology.tabula.Line;\nimport technology.tabula.Rectangle;\nimport technology.tabula.TextChunk;\nimport technology.tabula.TextElement;\n",
            "public_method_signature": "public BasicExtractionAlgorithm();\npublic BasicExtractionAlgorithm(List<Ruling> verticalRulings);\npublic List<Table> extract(Page page, List<Float> verticalRulingPositions);\npublic List<Table> extract(Page page);\npublic String toString();\npublic static List<java.lang.Float> columnPositions(List<Line> lines);",
            "public_field": "",
            "Method_statement": "columnPositions(List<Line> lines)",
            "Method_name": "columnPositions",
            "Class_declaration": "public class BasicExtractionAlgorithm {\n",
            "constructors": "public BasicExtractionAlgorithm() {\n}public BasicExtractionAlgorithm(List<Ruling> verticalRulings) {\n    this.verticalRulings = verticalRulings;\n}",
            "all_method_signature": "public BasicExtractionAlgorithm();\npublic BasicExtractionAlgorithm(List<Ruling> verticalRulings);\npublic List<Table> extract(Page page, List<Float> verticalRulingPositions);\npublic List<Table> extract(Page page);\npublic String toString();\npublic static List<java.lang.Float> columnPositions(List<Line> lines);",
            "Class_name": "BasicExtractionAlgorithm",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/extractors/BasicExtractionAlgorithm.java###columnPositions",
            "Parameter_num": "1",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Arrays;\n\nimport technology.tabula.Line;\n\nimport technology.tabula.Page;\n\nimport technology.tabula.Rectangle;\n\nimport technology.tabula.Ruling;\n\nimport technology.tabula.Table;\n\nimport technology.tabula.TextChunk;\n\nimport technology.tabula.TextElement;\n",
            "comment": "\n     * @param lines must be an array of lines sorted by their +top+ attribute\n     * @return a list of column boundaries (x axis)\n     ",
            "packageName": "technology.tabula.extractors",
            "method_signature": "public static List<java.lang.Float> columnPositions(List<Line> lines);",
            "Junit_version": "4",
            "returnType": "List<java.lang.Float>"
        },
        "Test_method": {
            "AllTest2Focal": "[BasicExtractionAlgorithm_ESTest.java###test0+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test0+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test0+++fail###1, BasicExtractionAlgorithm_ESTest.java###test1+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test1+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test1+++fail###1, BasicExtractionAlgorithm_ESTest.java###test2+++add###1, BasicExtractionAlgorithm_ESTest.java###test2+++add###1, BasicExtractionAlgorithm_ESTest.java###test2+++groupByLines###1, BasicExtractionAlgorithm_ESTest.java###test2+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test2+++assertEquals###2, BasicExtractionAlgorithm_ESTest.java###test2+++size###0, BasicExtractionAlgorithm_ESTest.java###test3+++add###1, BasicExtractionAlgorithm_ESTest.java###test3+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test3+++extract###2, BasicExtractionAlgorithm_ESTest.java###test3+++fail###1, BasicExtractionAlgorithm_ESTest.java###test4+++add###1, BasicExtractionAlgorithm_ESTest.java###test4+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test4+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test4+++extract###2, BasicExtractionAlgorithm_ESTest.java###test4+++fail###1, BasicExtractionAlgorithm_ESTest.java###test5+++toString###0, BasicExtractionAlgorithm_ESTest.java###test5+++assertEquals###2, BasicExtractionAlgorithm_ESTest.java###test6+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test6+++extract###1, BasicExtractionAlgorithm_ESTest.java###test6+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:49:38 GMT 2024\n */\n\npackage technology.tabula.extractors;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class BasicExtractionAlgorithm_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.extractors.BasicExtractionAlgorithm\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BasicExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BasicExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm$1\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm$2\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Line;\nimport technology.tabula.Page;\nimport technology.tabula.Ruling;\nimport technology.tabula.extractors.BasicExtractionAlgorithm;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/extractors/BasicExtractionAlgorithm_ESTest.java###test4",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    // Undeclared exception!\n    try {\n        BasicExtractionAlgorithm.columnPositions((List<Line>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    LinkedList<Line> linkedList0 = new LinkedList<Line>();\n    // Undeclared exception!\n    try {\n        BasicExtractionAlgorithm.columnPositions(linkedList0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.LinkedList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk((-1.0F), 1.0F, 282.6638F, (-1.0F));\n    linkedList0.add(textChunk0);\n    linkedList0.add(textChunk0);\n    List<Line> list0 = TextChunk.groupByLines(linkedList0);\n    List<Float> list1 = BasicExtractionAlgorithm.columnPositions(list0);\n    assertEquals(0, list1.size());\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    LinkedList<Float> linkedList0 = new LinkedList<Float>();\n    linkedList0.add((Float) null);\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null, (List<Float>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Line> linkedList0 = new LinkedList<Line>();\n    Line line0 = new Line();\n    linkedList0.add(line0);\n    List<Float> list0 = BasicExtractionAlgorithm.columnPositions(linkedList0);\n    LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList1);\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null, list0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList0);\n    String string0 = basicExtractionAlgorithm0.toString();\n    assertEquals(\"stream\", string0);\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Line> linkedList0 = new LinkedList<Line>();\n    Line line0 = new Line();\n    linkedList0.add(line0);\n    List<Float> list0 = BasicExtractionAlgorithm.columnPositions(linkedList0);\n    LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList1);\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null, list0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}",
            "TestRelevantFocal": "[columnPositions###1, extract###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:49:38 GMT 2024\n */\npackage technology.tabula.extractors;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Page;\nimport technology.tabula.Ruling;\nimport technology.tabula.TextChunk;\nimport technology.tabula.extractors.BasicExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class BasicExtractionAlgorithm_ESTest extends BasicExtractionAlgorithm_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public List<Table> extract(Page page, List<Float> verticalRulingPositions) {\n    List<Ruling> verticalRulings = new ArrayList<>(verticalRulingPositions.size());\n    for (Float p : verticalRulingPositions) {\n        verticalRulings.add(new Ruling(page.getTop(), p, 0.0f, (float) page.getHeight()));\n    }\n    this.verticalRulings = verticalRulings;\n    return this.extract(page);\n}",
            "all_field_declaration": "private List<Ruling> verticalRulings = null;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "4",
            "Filed": "private List<Ruling> verticalRulings = null;",
            "Parameter_type": "Page,List<Float>",
            "Import_statements": "import java.util.ArrayList;\nimport java.util.List;\nimport technology.tabula.Page;\nimport technology.tabula.Ruling;\nimport technology.tabula.Table;\n",
            "public_method_signature": "public BasicExtractionAlgorithm();\npublic BasicExtractionAlgorithm(List<Ruling> verticalRulings);\npublic List<Table> extract(Page page, List<Float> verticalRulingPositions);\npublic List<Table> extract(Page page);\npublic String toString();\npublic static List<java.lang.Float> columnPositions(List<Line> lines);",
            "public_field": "",
            "Method_statement": "extract(Page page, List<Float> verticalRulingPositions)",
            "Method_name": "extract",
            "Class_declaration": "public class BasicExtractionAlgorithm {\n",
            "constructors": "public BasicExtractionAlgorithm() {\n}public BasicExtractionAlgorithm(List<Ruling> verticalRulings) {\n    this.verticalRulings = verticalRulings;\n}",
            "all_method_signature": "public BasicExtractionAlgorithm();\npublic BasicExtractionAlgorithm(List<Ruling> verticalRulings);\npublic List<Table> extract(Page page, List<Float> verticalRulingPositions);\npublic List<Table> extract(Page page);\npublic String toString();\npublic static List<java.lang.Float> columnPositions(List<Line> lines);",
            "Class_name": "BasicExtractionAlgorithm",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/extractors/BasicExtractionAlgorithm.java###extract",
            "Parameter_num": "2",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Arrays;\n\nimport technology.tabula.Line;\n\nimport technology.tabula.Page;\n\nimport technology.tabula.Rectangle;\n\nimport technology.tabula.Ruling;\n\nimport technology.tabula.Table;\n\nimport technology.tabula.TextChunk;\n\nimport technology.tabula.TextElement;\n",
            "comment": "",
            "packageName": "technology.tabula.extractors",
            "method_signature": "public List<Table> extract(Page page, List<Float> verticalRulingPositions);",
            "Junit_version": "4",
            "returnType": "List<Table>"
        },
        "Test_method": {
            "AllTest2Focal": "[BasicExtractionAlgorithm_ESTest.java###test0+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test0+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test0+++fail###1, BasicExtractionAlgorithm_ESTest.java###test1+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test1+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test1+++fail###1, BasicExtractionAlgorithm_ESTest.java###test2+++add###1, BasicExtractionAlgorithm_ESTest.java###test2+++add###1, BasicExtractionAlgorithm_ESTest.java###test2+++groupByLines###1, BasicExtractionAlgorithm_ESTest.java###test2+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test2+++assertEquals###2, BasicExtractionAlgorithm_ESTest.java###test2+++size###0, BasicExtractionAlgorithm_ESTest.java###test3+++add###1, BasicExtractionAlgorithm_ESTest.java###test3+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test3+++extract###2, BasicExtractionAlgorithm_ESTest.java###test3+++fail###1, BasicExtractionAlgorithm_ESTest.java###test4+++add###1, BasicExtractionAlgorithm_ESTest.java###test4+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test4+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test4+++extract###2, BasicExtractionAlgorithm_ESTest.java###test4+++fail###1, BasicExtractionAlgorithm_ESTest.java###test5+++toString###0, BasicExtractionAlgorithm_ESTest.java###test5+++assertEquals###2, BasicExtractionAlgorithm_ESTest.java###test6+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test6+++extract###1, BasicExtractionAlgorithm_ESTest.java###test6+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:49:38 GMT 2024\n */\n\npackage technology.tabula.extractors;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class BasicExtractionAlgorithm_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.extractors.BasicExtractionAlgorithm\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BasicExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BasicExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm$1\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm$2\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Line;\nimport technology.tabula.Page;\nimport technology.tabula.Ruling;\nimport technology.tabula.extractors.BasicExtractionAlgorithm;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/extractors/BasicExtractionAlgorithm_ESTest.java###test4",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    // Undeclared exception!\n    try {\n        BasicExtractionAlgorithm.columnPositions((List<Line>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    LinkedList<Line> linkedList0 = new LinkedList<Line>();\n    // Undeclared exception!\n    try {\n        BasicExtractionAlgorithm.columnPositions(linkedList0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.LinkedList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk((-1.0F), 1.0F, 282.6638F, (-1.0F));\n    linkedList0.add(textChunk0);\n    linkedList0.add(textChunk0);\n    List<Line> list0 = TextChunk.groupByLines(linkedList0);\n    List<Float> list1 = BasicExtractionAlgorithm.columnPositions(list0);\n    assertEquals(0, list1.size());\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    LinkedList<Float> linkedList0 = new LinkedList<Float>();\n    linkedList0.add((Float) null);\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null, (List<Float>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Line> linkedList0 = new LinkedList<Line>();\n    Line line0 = new Line();\n    linkedList0.add(line0);\n    List<Float> list0 = BasicExtractionAlgorithm.columnPositions(linkedList0);\n    LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList1);\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null, list0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList0);\n    String string0 = basicExtractionAlgorithm0.toString();\n    assertEquals(\"stream\", string0);\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Line> linkedList0 = new LinkedList<Line>();\n    Line line0 = new Line();\n    linkedList0.add(line0);\n    List<Float> list0 = BasicExtractionAlgorithm.columnPositions(linkedList0);\n    LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList1);\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null, list0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}",
            "TestRelevantFocal": "[columnPositions###1, extract###2]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:49:38 GMT 2024\n */\npackage technology.tabula.extractors;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Page;\nimport technology.tabula.Ruling;\nimport technology.tabula.TextChunk;\nimport technology.tabula.extractors.BasicExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class BasicExtractionAlgorithm_ESTest extends BasicExtractionAlgorithm_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "@Override\npublic String toString() {\n    return \"stream\";\n}",
            "all_field_declaration": "private List<Ruling> verticalRulings = null;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public BasicExtractionAlgorithm();\npublic BasicExtractionAlgorithm(List<Ruling> verticalRulings);\npublic List<Table> extract(Page page, List<Float> verticalRulingPositions);\npublic List<Table> extract(Page page);\npublic String toString();\npublic static List<java.lang.Float> columnPositions(List<Line> lines);",
            "public_field": "",
            "Method_statement": "toString()",
            "Method_name": "toString",
            "Class_declaration": "public class BasicExtractionAlgorithm {\n",
            "constructors": "public BasicExtractionAlgorithm() {\n}public BasicExtractionAlgorithm(List<Ruling> verticalRulings) {\n    this.verticalRulings = verticalRulings;\n}",
            "all_method_signature": "public BasicExtractionAlgorithm();\npublic BasicExtractionAlgorithm(List<Ruling> verticalRulings);\npublic List<Table> extract(Page page, List<Float> verticalRulingPositions);\npublic List<Table> extract(Page page);\npublic String toString();\npublic static List<java.lang.Float> columnPositions(List<Line> lines);",
            "Class_name": "BasicExtractionAlgorithm",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/extractors/BasicExtractionAlgorithm.java###toString",
            "Parameter_num": "0",
            "contextMethod": "",
            "all_Import_statements": "import java.util.ArrayList;\n\nimport java.util.Collections;\n\nimport java.util.Comparator;\n\nimport java.util.List;\n\nimport java.util.Arrays;\n\nimport technology.tabula.Line;\n\nimport technology.tabula.Page;\n\nimport technology.tabula.Rectangle;\n\nimport technology.tabula.Ruling;\n\nimport technology.tabula.Table;\n\nimport technology.tabula.TextChunk;\n\nimport technology.tabula.TextElement;\n",
            "comment": "",
            "packageName": "technology.tabula.extractors",
            "method_signature": "public String toString();",
            "Junit_version": "4",
            "returnType": "String"
        },
        "Test_method": {
            "AllTest2Focal": "[BasicExtractionAlgorithm_ESTest.java###test0+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test0+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test0+++fail###1, BasicExtractionAlgorithm_ESTest.java###test1+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test1+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test1+++fail###1, BasicExtractionAlgorithm_ESTest.java###test2+++add###1, BasicExtractionAlgorithm_ESTest.java###test2+++add###1, BasicExtractionAlgorithm_ESTest.java###test2+++groupByLines###1, BasicExtractionAlgorithm_ESTest.java###test2+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test2+++assertEquals###2, BasicExtractionAlgorithm_ESTest.java###test2+++size###0, BasicExtractionAlgorithm_ESTest.java###test3+++add###1, BasicExtractionAlgorithm_ESTest.java###test3+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test3+++extract###2, BasicExtractionAlgorithm_ESTest.java###test3+++fail###1, BasicExtractionAlgorithm_ESTest.java###test4+++add###1, BasicExtractionAlgorithm_ESTest.java###test4+++columnPositions###1, BasicExtractionAlgorithm_ESTest.java###test4+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test4+++extract###2, BasicExtractionAlgorithm_ESTest.java###test4+++fail###1, BasicExtractionAlgorithm_ESTest.java###test5+++toString###0, BasicExtractionAlgorithm_ESTest.java###test5+++assertEquals###2, BasicExtractionAlgorithm_ESTest.java###test6+++verifyException###2, BasicExtractionAlgorithm_ESTest.java###test6+++extract###1, BasicExtractionAlgorithm_ESTest.java###test6+++fail###1]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:49:38 GMT 2024\n */\n\npackage technology.tabula.extractors;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class BasicExtractionAlgorithm_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.extractors.BasicExtractionAlgorithm\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BasicExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.HasText\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.extractors.ExtractionAlgorithm\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.Page\",\n      \"technology.tabula.TextElement\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BasicExtractionAlgorithm_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.extractors.BasicExtractionAlgorithm\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm$1\",\n      \"technology.tabula.extractors.BasicExtractionAlgorithm$2\",\n      \"technology.tabula.Rectangle$1\",\n      \"technology.tabula.Rectangle\",\n      \"technology.tabula.RectangularTextContainer\",\n      \"technology.tabula.TextChunk$DirectionalityOptions\",\n      \"technology.tabula.TextChunk\",\n      \"technology.tabula.Line\",\n      \"technology.tabula.Ruling\",\n      \"technology.tabula.Ruling$4\",\n      \"technology.tabula.Table\",\n      \"technology.tabula.CellPosition\",\n      \"technology.tabula.extractors.SpreadsheetExtractionAlgorithm\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport java.util.LinkedList;\nimport java.util.List;\nimport technology.tabula.Ruling;\nimport technology.tabula.extractors.BasicExtractionAlgorithm;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/extractors/BasicExtractionAlgorithm_ESTest.java###test5",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    // Undeclared exception!\n    try {\n        BasicExtractionAlgorithm.columnPositions((List<Line>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    LinkedList<Line> linkedList0 = new LinkedList<Line>();\n    // Undeclared exception!\n    try {\n        BasicExtractionAlgorithm.columnPositions(linkedList0);\n        fail(\"Expecting exception: IndexOutOfBoundsException\");\n    } catch (IndexOutOfBoundsException e) {\n        // \n        // Index: 0, Size: 0\n        // \n        verifyException(\"java.util.LinkedList\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();\n    TextChunk textChunk0 = new TextChunk((-1.0F), 1.0F, 282.6638F, (-1.0F));\n    linkedList0.add(textChunk0);\n    linkedList0.add(textChunk0);\n    List<Line> list0 = TextChunk.groupByLines(linkedList0);\n    List<Float> list1 = BasicExtractionAlgorithm.columnPositions(list0);\n    assertEquals(0, list1.size());\n}#####@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    LinkedList<Float> linkedList0 = new LinkedList<Float>();\n    linkedList0.add((Float) null);\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null, (List<Float>) linkedList0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<Line> linkedList0 = new LinkedList<Line>();\n    Line line0 = new Line();\n    linkedList0.add(line0);\n    List<Float> list0 = BasicExtractionAlgorithm.columnPositions(linkedList0);\n    LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList1);\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null, list0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}#####@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList0);\n    String string0 = basicExtractionAlgorithm0.toString();\n    assertEquals(\"stream\", string0);\n}#####@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm();\n    // Undeclared exception!\n    try {\n        basicExtractionAlgorithm0.extract((Page) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        // \n        // no message in exception (getMessage() returned null)\n        // \n        verifyException(\"technology.tabula.extractors.BasicExtractionAlgorithm\", e);\n    }\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();\n    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList0);\n    String string0 = basicExtractionAlgorithm0.toString();\n    assertEquals(\"stream\", string0);\n}",
            "TestRelevantFocal": "[toString###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:49:38 GMT 2024\n */\npackage technology.tabula.extractors;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.Line;\nimport technology.tabula.Page;\nimport technology.tabula.Ruling;\nimport technology.tabula.TextChunk;\nimport technology.tabula.extractors.BasicExtractionAlgorithm;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class BasicExtractionAlgorithm_ESTest extends BasicExtractionAlgorithm_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public static PageDims of(final float top, final float left, final float width, final float height) {\n    return new PageDims(top, left, width, height);\n}",
            "all_field_declaration": "private final float top;\nprivate final float left;\nprivate final float width;\nprivate final float height;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private final float top;private final float left;private final float width;private final float height;",
            "Parameter_type": "float,float,float,float",
            "Import_statements": "",
            "public_method_signature": "public static PageDims of(final float top, final float left, final float width, final float height);\npublic float getTop();\npublic float getLeft();\npublic float getWidth();\npublic float getHeight();",
            "public_field": "",
            "Method_statement": "of(final float top, final float left, final float width, final float height)",
            "Method_name": "of",
            "Class_declaration": "public class PageDims {\n",
            "constructors": "private PageDims(final float top, final float left, final float width, final float height) {\n    this.top = top;\n    this.left = left;\n    this.width = width;\n    this.height = height;\n}",
            "all_method_signature": "private PageDims(final float top, final float left, final float width, final float height);\npublic static PageDims of(final float top, final float left, final float width, final float height);\npublic float getTop();\npublic float getLeft();\npublic float getWidth();\npublic float getHeight();",
            "Class_name": "PageDims",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/PageDims.java###of",
            "Parameter_num": "4",
            "contextMethod": "",
            "all_Import_statements": "",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public static PageDims of(final float top, final float left, final float width, final float height);",
            "Junit_version": "4",
            "returnType": "PageDims"
        },
        "Test_method": {
            "AllTest2Focal": "[PageDims_ESTest.java###test00+++of###4, PageDims_ESTest.java###test00+++getWidth###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getTop###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getLeft###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getHeight###0, PageDims_ESTest.java###test01+++of###4, PageDims_ESTest.java###test01+++getWidth###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getHeight###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getTop###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getLeft###0, PageDims_ESTest.java###test02+++of###4, PageDims_ESTest.java###test02+++getTop###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getWidth###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getLeft###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getHeight###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test03+++of###4, PageDims_ESTest.java###test03+++getTop###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getWidth###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getLeft###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getHeight###0, PageDims_ESTest.java###test04+++of###4, PageDims_ESTest.java###test04+++getLeft###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getTop###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getHeight###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getWidth###0, PageDims_ESTest.java###test05+++of###4, PageDims_ESTest.java###test05+++getLeft###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getHeight###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getTop###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getWidth###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test06+++of###4, PageDims_ESTest.java###test06+++getHeight###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getLeft###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getWidth###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getTop###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test07+++of###4, PageDims_ESTest.java###test07+++getHeight###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getLeft###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getWidth###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getTop###0, PageDims_ESTest.java###test08+++of###4, PageDims_ESTest.java###test08+++getHeight###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getLeft###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getWidth###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getTop###0, PageDims_ESTest.java###test09+++of###4, PageDims_ESTest.java###test09+++getWidth###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getTop###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getLeft###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getHeight###0, PageDims_ESTest.java###test10+++of###4, PageDims_ESTest.java###test10+++getTop###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getWidth###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getHeight###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getLeft###0, PageDims_ESTest.java###test11+++of###4, PageDims_ESTest.java###test11+++getLeft###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getWidth###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getTop###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getHeight###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:56:04 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class PageDims_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.PageDims\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(PageDims_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.PageDims\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(PageDims_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.PageDims\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.PageDims;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/PageDims_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, (-2690.3118F));\n    float float0 = pageDims0.getWidth();\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals((-2690.3118F), pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    PageDims pageDims0 = PageDims.of(1380.5F, 0.0F, 1380.5F, 0.0F);\n    float float0 = pageDims0.getWidth();\n    assertEquals(1380.5F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(1380.5F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getTop();\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    PageDims pageDims0 = PageDims.of(1440.61F, (-1803.6F), 0.0F, 0.0F);\n    float float0 = pageDims0.getTop();\n    assertEquals(1440.61F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-1803.6F), pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 1.0F, 1.0F, 0.0F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(1.0F, pageDims0.getWidth(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(477.6F, pageDims0.getHeight(), 0.01F);\n    assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);\n    assertEquals(275.9F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-2962.7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getHeight();\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    PageDims pageDims0 = PageDims.of(493.8F, (-2760.9F), (-2760.9F), (-2902.3933F));\n    float float0 = pageDims0.getHeight();\n    assertEquals((-2760.9F), pageDims0.getLeft(), 0.01F);\n    assertEquals((-2760.9F), pageDims0.getWidth(), 0.01F);\n    assertEquals((-2902.3933F), float0, 0.01F);\n    assertEquals(493.8F, pageDims0.getTop(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2664.33F), 0.0F, (-2664.33F), 1050.207F);\n    float float0 = pageDims0.getHeight();\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals((-2664.33F), pageDims0.getWidth(), 0.01F);\n    assertEquals(1050.207F, float0, 0.01F);\n    assertEquals((-2664.33F), pageDims0.getTop(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-0.7453074F), (-0.7453074F), (-0.7453074F), (-0.7453074F));\n    float float0 = pageDims0.getWidth();\n    assertEquals((-0.7453074F), float0, 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getTop(), 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getLeft(), 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-188.25131F), (-188.25131F), (-188.25131F), (-188.25131F));\n    float float0 = pageDims0.getTop();\n    assertEquals((-188.25131F), pageDims0.getWidth(), 0.01F);\n    assertEquals((-188.25131F), float0, 0.01F);\n    assertEquals((-188.25131F), pageDims0.getHeight(), 0.01F);\n    assertEquals((-188.25131F), pageDims0.getLeft(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(477.6F, pageDims0.getHeight(), 0.01F);\n    assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);\n    assertEquals(275.9F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-2962.7F), float0, 0.01F);\n}",
            "TestRelevantFocal": "[of###4, getLeft###0, getHeight###0, getTop###0, getWidth###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:56:04 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.PageDims;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class PageDims_ESTest extends PageDims_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float getWidth() {\n    return width;\n}",
            "all_field_declaration": "private final float top;\nprivate final float left;\nprivate final float width;\nprivate final float height;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private final float width;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static PageDims of(final float top, final float left, final float width, final float height);\npublic float getTop();\npublic float getLeft();\npublic float getWidth();\npublic float getHeight();",
            "public_field": "",
            "Method_statement": "getWidth()",
            "Method_name": "getWidth",
            "Class_declaration": "public class PageDims {\n",
            "constructors": "private PageDims(final float top, final float left, final float width, final float height) {\n    this.top = top;\n    this.left = left;\n    this.width = width;\n    this.height = height;\n}",
            "all_method_signature": "private PageDims(final float top, final float left, final float width, final float height);\npublic static PageDims of(final float top, final float left, final float width, final float height);\npublic float getTop();\npublic float getLeft();\npublic float getWidth();\npublic float getHeight();",
            "Class_name": "PageDims",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/PageDims.java###getWidth",
            "Parameter_num": "0",
            "contextMethod": "public float getTop() {\n    return top;\n}\npublic float getTop() {\n    return top;\n}\npublic float getTop() {\n    return top;\n}\npublic float getLeft() {\n    return left;\n}\npublic float getLeft() {\n    return left;\n}\npublic float getLeft() {\n    return left;\n}\npublic float getWidth() {\n    return width;\n}\npublic float getWidth() {\n    return width;\n}\npublic float getWidth() {\n    return width;\n}",
            "all_Import_statements": "",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float getWidth();",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[PageDims_ESTest.java###test00+++of###4, PageDims_ESTest.java###test00+++getWidth###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getTop###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getLeft###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getHeight###0, PageDims_ESTest.java###test01+++of###4, PageDims_ESTest.java###test01+++getWidth###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getHeight###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getTop###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getLeft###0, PageDims_ESTest.java###test02+++of###4, PageDims_ESTest.java###test02+++getTop###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getWidth###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getLeft###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getHeight###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test03+++of###4, PageDims_ESTest.java###test03+++getTop###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getWidth###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getLeft###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getHeight###0, PageDims_ESTest.java###test04+++of###4, PageDims_ESTest.java###test04+++getLeft###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getTop###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getHeight###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getWidth###0, PageDims_ESTest.java###test05+++of###4, PageDims_ESTest.java###test05+++getLeft###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getHeight###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getTop###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getWidth###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test06+++of###4, PageDims_ESTest.java###test06+++getHeight###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getLeft###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getWidth###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getTop###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test07+++of###4, PageDims_ESTest.java###test07+++getHeight###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getLeft###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getWidth###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getTop###0, PageDims_ESTest.java###test08+++of###4, PageDims_ESTest.java###test08+++getHeight###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getLeft###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getWidth###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getTop###0, PageDims_ESTest.java###test09+++of###4, PageDims_ESTest.java###test09+++getWidth###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getTop###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getLeft###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getHeight###0, PageDims_ESTest.java###test10+++of###4, PageDims_ESTest.java###test10+++getTop###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getWidth###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getHeight###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getLeft###0, PageDims_ESTest.java###test11+++of###4, PageDims_ESTest.java###test11+++getLeft###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getWidth###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getTop###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getHeight###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:56:04 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class PageDims_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.PageDims\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(PageDims_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.PageDims\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(PageDims_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.PageDims\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.PageDims;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/PageDims_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, (-2690.3118F));\n    float float0 = pageDims0.getWidth();\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals((-2690.3118F), pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    PageDims pageDims0 = PageDims.of(1380.5F, 0.0F, 1380.5F, 0.0F);\n    float float0 = pageDims0.getWidth();\n    assertEquals(1380.5F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(1380.5F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getTop();\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    PageDims pageDims0 = PageDims.of(1440.61F, (-1803.6F), 0.0F, 0.0F);\n    float float0 = pageDims0.getTop();\n    assertEquals(1440.61F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-1803.6F), pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 1.0F, 1.0F, 0.0F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(1.0F, pageDims0.getWidth(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(477.6F, pageDims0.getHeight(), 0.01F);\n    assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);\n    assertEquals(275.9F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-2962.7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getHeight();\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    PageDims pageDims0 = PageDims.of(493.8F, (-2760.9F), (-2760.9F), (-2902.3933F));\n    float float0 = pageDims0.getHeight();\n    assertEquals((-2760.9F), pageDims0.getLeft(), 0.01F);\n    assertEquals((-2760.9F), pageDims0.getWidth(), 0.01F);\n    assertEquals((-2902.3933F), float0, 0.01F);\n    assertEquals(493.8F, pageDims0.getTop(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2664.33F), 0.0F, (-2664.33F), 1050.207F);\n    float float0 = pageDims0.getHeight();\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals((-2664.33F), pageDims0.getWidth(), 0.01F);\n    assertEquals(1050.207F, float0, 0.01F);\n    assertEquals((-2664.33F), pageDims0.getTop(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-0.7453074F), (-0.7453074F), (-0.7453074F), (-0.7453074F));\n    float float0 = pageDims0.getWidth();\n    assertEquals((-0.7453074F), float0, 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getTop(), 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getLeft(), 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-188.25131F), (-188.25131F), (-188.25131F), (-188.25131F));\n    float float0 = pageDims0.getTop();\n    assertEquals((-188.25131F), pageDims0.getWidth(), 0.01F);\n    assertEquals((-188.25131F), float0, 0.01F);\n    assertEquals((-188.25131F), pageDims0.getHeight(), 0.01F);\n    assertEquals((-188.25131F), pageDims0.getLeft(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(477.6F, pageDims0.getHeight(), 0.01F);\n    assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);\n    assertEquals(275.9F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-2962.7F), float0, 0.01F);\n}",
            "TestRelevantFocal": "[of###4, getLeft###0, getHeight###0, getTop###0, getWidth###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:56:04 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.PageDims;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class PageDims_ESTest extends PageDims_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float getTop() {\n    return top;\n}",
            "all_field_declaration": "private final float top;\nprivate final float left;\nprivate final float width;\nprivate final float height;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private final float top;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static PageDims of(final float top, final float left, final float width, final float height);\npublic float getTop();\npublic float getLeft();\npublic float getWidth();\npublic float getHeight();",
            "public_field": "",
            "Method_statement": "getTop()",
            "Method_name": "getTop",
            "Class_declaration": "public class PageDims {\n",
            "constructors": "private PageDims(final float top, final float left, final float width, final float height) {\n    this.top = top;\n    this.left = left;\n    this.width = width;\n    this.height = height;\n}",
            "all_method_signature": "private PageDims(final float top, final float left, final float width, final float height);\npublic static PageDims of(final float top, final float left, final float width, final float height);\npublic float getTop();\npublic float getLeft();\npublic float getWidth();\npublic float getHeight();",
            "Class_name": "PageDims",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/PageDims.java###getTop",
            "Parameter_num": "0",
            "contextMethod": "public float getTop() {\n    return top;\n}\npublic float getTop() {\n    return top;\n}\npublic float getTop() {\n    return top;\n}",
            "all_Import_statements": "",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float getTop();",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[PageDims_ESTest.java###test00+++of###4, PageDims_ESTest.java###test00+++getWidth###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getTop###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getLeft###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getHeight###0, PageDims_ESTest.java###test01+++of###4, PageDims_ESTest.java###test01+++getWidth###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getHeight###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getTop###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getLeft###0, PageDims_ESTest.java###test02+++of###4, PageDims_ESTest.java###test02+++getTop###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getWidth###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getLeft###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getHeight###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test03+++of###4, PageDims_ESTest.java###test03+++getTop###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getWidth###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getLeft###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getHeight###0, PageDims_ESTest.java###test04+++of###4, PageDims_ESTest.java###test04+++getLeft###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getTop###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getHeight###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getWidth###0, PageDims_ESTest.java###test05+++of###4, PageDims_ESTest.java###test05+++getLeft###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getHeight###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getTop###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getWidth###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test06+++of###4, PageDims_ESTest.java###test06+++getHeight###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getLeft###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getWidth###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getTop###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test07+++of###4, PageDims_ESTest.java###test07+++getHeight###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getLeft###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getWidth###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getTop###0, PageDims_ESTest.java###test08+++of###4, PageDims_ESTest.java###test08+++getHeight###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getLeft###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getWidth###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getTop###0, PageDims_ESTest.java###test09+++of###4, PageDims_ESTest.java###test09+++getWidth###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getTop###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getLeft###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getHeight###0, PageDims_ESTest.java###test10+++of###4, PageDims_ESTest.java###test10+++getTop###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getWidth###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getHeight###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getLeft###0, PageDims_ESTest.java###test11+++of###4, PageDims_ESTest.java###test11+++getLeft###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getWidth###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getTop###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getHeight###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:56:04 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class PageDims_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.PageDims\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(PageDims_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.PageDims\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(PageDims_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.PageDims\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.PageDims;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/PageDims_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, (-2690.3118F));\n    float float0 = pageDims0.getWidth();\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals((-2690.3118F), pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    PageDims pageDims0 = PageDims.of(1380.5F, 0.0F, 1380.5F, 0.0F);\n    float float0 = pageDims0.getWidth();\n    assertEquals(1380.5F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(1380.5F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getTop();\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    PageDims pageDims0 = PageDims.of(1440.61F, (-1803.6F), 0.0F, 0.0F);\n    float float0 = pageDims0.getTop();\n    assertEquals(1440.61F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-1803.6F), pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 1.0F, 1.0F, 0.0F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(1.0F, pageDims0.getWidth(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(477.6F, pageDims0.getHeight(), 0.01F);\n    assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);\n    assertEquals(275.9F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-2962.7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getHeight();\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    PageDims pageDims0 = PageDims.of(493.8F, (-2760.9F), (-2760.9F), (-2902.3933F));\n    float float0 = pageDims0.getHeight();\n    assertEquals((-2760.9F), pageDims0.getLeft(), 0.01F);\n    assertEquals((-2760.9F), pageDims0.getWidth(), 0.01F);\n    assertEquals((-2902.3933F), float0, 0.01F);\n    assertEquals(493.8F, pageDims0.getTop(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2664.33F), 0.0F, (-2664.33F), 1050.207F);\n    float float0 = pageDims0.getHeight();\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals((-2664.33F), pageDims0.getWidth(), 0.01F);\n    assertEquals(1050.207F, float0, 0.01F);\n    assertEquals((-2664.33F), pageDims0.getTop(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-0.7453074F), (-0.7453074F), (-0.7453074F), (-0.7453074F));\n    float float0 = pageDims0.getWidth();\n    assertEquals((-0.7453074F), float0, 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getTop(), 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getLeft(), 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-188.25131F), (-188.25131F), (-188.25131F), (-188.25131F));\n    float float0 = pageDims0.getTop();\n    assertEquals((-188.25131F), pageDims0.getWidth(), 0.01F);\n    assertEquals((-188.25131F), float0, 0.01F);\n    assertEquals((-188.25131F), pageDims0.getHeight(), 0.01F);\n    assertEquals((-188.25131F), pageDims0.getLeft(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(477.6F, pageDims0.getHeight(), 0.01F);\n    assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);\n    assertEquals(275.9F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-2962.7F), float0, 0.01F);\n}",
            "TestRelevantFocal": "[of###4, getLeft###0, getHeight###0, getTop###0, getWidth###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:56:04 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.PageDims;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class PageDims_ESTest extends PageDims_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float getLeft() {\n    return left;\n}",
            "all_field_declaration": "private final float top;\nprivate final float left;\nprivate final float width;\nprivate final float height;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private final float left;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static PageDims of(final float top, final float left, final float width, final float height);\npublic float getTop();\npublic float getLeft();\npublic float getWidth();\npublic float getHeight();",
            "public_field": "",
            "Method_statement": "getLeft()",
            "Method_name": "getLeft",
            "Class_declaration": "public class PageDims {\n",
            "constructors": "private PageDims(final float top, final float left, final float width, final float height) {\n    this.top = top;\n    this.left = left;\n    this.width = width;\n    this.height = height;\n}",
            "all_method_signature": "private PageDims(final float top, final float left, final float width, final float height);\npublic static PageDims of(final float top, final float left, final float width, final float height);\npublic float getTop();\npublic float getLeft();\npublic float getWidth();\npublic float getHeight();",
            "Class_name": "PageDims",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/PageDims.java###getLeft",
            "Parameter_num": "0",
            "contextMethod": "public float getTop() {\n    return top;\n}\npublic float getTop() {\n    return top;\n}\npublic float getTop() {\n    return top;\n}\npublic float getLeft() {\n    return left;\n}\npublic float getLeft() {\n    return left;\n}\npublic float getLeft() {\n    return left;\n}",
            "all_Import_statements": "",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float getLeft();",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[PageDims_ESTest.java###test00+++of###4, PageDims_ESTest.java###test00+++getWidth###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getTop###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getLeft###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getHeight###0, PageDims_ESTest.java###test01+++of###4, PageDims_ESTest.java###test01+++getWidth###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getHeight###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getTop###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getLeft###0, PageDims_ESTest.java###test02+++of###4, PageDims_ESTest.java###test02+++getTop###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getWidth###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getLeft###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getHeight###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test03+++of###4, PageDims_ESTest.java###test03+++getTop###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getWidth###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getLeft###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getHeight###0, PageDims_ESTest.java###test04+++of###4, PageDims_ESTest.java###test04+++getLeft###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getTop###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getHeight###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getWidth###0, PageDims_ESTest.java###test05+++of###4, PageDims_ESTest.java###test05+++getLeft###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getHeight###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getTop###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getWidth###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test06+++of###4, PageDims_ESTest.java###test06+++getHeight###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getLeft###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getWidth###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getTop###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test07+++of###4, PageDims_ESTest.java###test07+++getHeight###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getLeft###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getWidth###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getTop###0, PageDims_ESTest.java###test08+++of###4, PageDims_ESTest.java###test08+++getHeight###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getLeft###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getWidth###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getTop###0, PageDims_ESTest.java###test09+++of###4, PageDims_ESTest.java###test09+++getWidth###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getTop###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getLeft###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getHeight###0, PageDims_ESTest.java###test10+++of###4, PageDims_ESTest.java###test10+++getTop###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getWidth###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getHeight###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getLeft###0, PageDims_ESTest.java###test11+++of###4, PageDims_ESTest.java###test11+++getLeft###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getWidth###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getTop###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getHeight###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:56:04 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class PageDims_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.PageDims\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(PageDims_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.PageDims\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(PageDims_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.PageDims\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.PageDims;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/PageDims_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, (-2690.3118F));\n    float float0 = pageDims0.getWidth();\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals((-2690.3118F), pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    PageDims pageDims0 = PageDims.of(1380.5F, 0.0F, 1380.5F, 0.0F);\n    float float0 = pageDims0.getWidth();\n    assertEquals(1380.5F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(1380.5F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getTop();\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    PageDims pageDims0 = PageDims.of(1440.61F, (-1803.6F), 0.0F, 0.0F);\n    float float0 = pageDims0.getTop();\n    assertEquals(1440.61F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-1803.6F), pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 1.0F, 1.0F, 0.0F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(1.0F, pageDims0.getWidth(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(477.6F, pageDims0.getHeight(), 0.01F);\n    assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);\n    assertEquals(275.9F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-2962.7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getHeight();\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    PageDims pageDims0 = PageDims.of(493.8F, (-2760.9F), (-2760.9F), (-2902.3933F));\n    float float0 = pageDims0.getHeight();\n    assertEquals((-2760.9F), pageDims0.getLeft(), 0.01F);\n    assertEquals((-2760.9F), pageDims0.getWidth(), 0.01F);\n    assertEquals((-2902.3933F), float0, 0.01F);\n    assertEquals(493.8F, pageDims0.getTop(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2664.33F), 0.0F, (-2664.33F), 1050.207F);\n    float float0 = pageDims0.getHeight();\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals((-2664.33F), pageDims0.getWidth(), 0.01F);\n    assertEquals(1050.207F, float0, 0.01F);\n    assertEquals((-2664.33F), pageDims0.getTop(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-0.7453074F), (-0.7453074F), (-0.7453074F), (-0.7453074F));\n    float float0 = pageDims0.getWidth();\n    assertEquals((-0.7453074F), float0, 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getTop(), 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getLeft(), 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-188.25131F), (-188.25131F), (-188.25131F), (-188.25131F));\n    float float0 = pageDims0.getTop();\n    assertEquals((-188.25131F), pageDims0.getWidth(), 0.01F);\n    assertEquals((-188.25131F), float0, 0.01F);\n    assertEquals((-188.25131F), pageDims0.getHeight(), 0.01F);\n    assertEquals((-188.25131F), pageDims0.getLeft(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(477.6F, pageDims0.getHeight(), 0.01F);\n    assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);\n    assertEquals(275.9F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-2962.7F), float0, 0.01F);\n}",
            "TestRelevantFocal": "[of###4, getLeft###0, getHeight###0, getTop###0, getWidth###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:56:04 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.PageDims;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class PageDims_ESTest extends PageDims_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    },
    {
        "Under_test_method": {
            "Method_body": "public float getHeight() {\n    return height;\n}",
            "all_field_declaration": "private final float top;\nprivate final float left;\nprivate final float width;\nprivate final float height;",
            "sub_project_name": "tabulapdf_tabula-java",
            "lineNumbers": "1",
            "Filed": "private final float height;",
            "Parameter_type": "",
            "Import_statements": "",
            "public_method_signature": "public static PageDims of(final float top, final float left, final float width, final float height);\npublic float getTop();\npublic float getLeft();\npublic float getWidth();\npublic float getHeight();",
            "public_field": "",
            "Method_statement": "getHeight()",
            "Method_name": "getHeight",
            "Class_declaration": "public class PageDims {\n",
            "constructors": "private PageDims(final float top, final float left, final float width, final float height) {\n    this.top = top;\n    this.left = left;\n    this.width = width;\n    this.height = height;\n}",
            "all_method_signature": "private PageDims(final float top, final float left, final float width, final float height);\npublic static PageDims of(final float top, final float left, final float width, final float height);\npublic float getTop();\npublic float getLeft();\npublic float getWidth();\npublic float getHeight();",
            "Class_name": "PageDims",
            "project_path": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/main/java/technology/tabula/PageDims.java###getHeight",
            "Parameter_num": "0",
            "contextMethod": "public float getTop() {\n    return top;\n}\npublic float getTop() {\n    return top;\n}\npublic float getTop() {\n    return top;\n}\npublic float getLeft() {\n    return left;\n}\npublic float getLeft() {\n    return left;\n}\npublic float getLeft() {\n    return left;\n}\npublic float getWidth() {\n    return width;\n}\npublic float getWidth() {\n    return width;\n}\npublic float getWidth() {\n    return width;\n}\npublic float getHeight() {\n    return height;\n}\npublic float getHeight() {\n    return height;\n}\npublic float getHeight() {\n    return height;\n}",
            "all_Import_statements": "",
            "comment": "",
            "packageName": "technology.tabula",
            "method_signature": "public float getHeight();",
            "Junit_version": "4",
            "returnType": "float"
        },
        "Test_method": {
            "AllTest2Focal": "[PageDims_ESTest.java###test00+++of###4, PageDims_ESTest.java###test00+++getWidth###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getTop###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getLeft###0, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++assertEquals###3, PageDims_ESTest.java###test00+++getHeight###0, PageDims_ESTest.java###test01+++of###4, PageDims_ESTest.java###test01+++getWidth###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getHeight###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getTop###0, PageDims_ESTest.java###test01+++assertEquals###3, PageDims_ESTest.java###test01+++getLeft###0, PageDims_ESTest.java###test02+++of###4, PageDims_ESTest.java###test02+++getTop###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getWidth###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getLeft###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test02+++getHeight###0, PageDims_ESTest.java###test02+++assertEquals###3, PageDims_ESTest.java###test03+++of###4, PageDims_ESTest.java###test03+++getTop###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getWidth###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getLeft###0, PageDims_ESTest.java###test03+++assertEquals###3, PageDims_ESTest.java###test03+++getHeight###0, PageDims_ESTest.java###test04+++of###4, PageDims_ESTest.java###test04+++getLeft###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getTop###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getHeight###0, PageDims_ESTest.java###test04+++assertEquals###3, PageDims_ESTest.java###test04+++getWidth###0, PageDims_ESTest.java###test05+++of###4, PageDims_ESTest.java###test05+++getLeft###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getHeight###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getTop###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test05+++getWidth###0, PageDims_ESTest.java###test05+++assertEquals###3, PageDims_ESTest.java###test06+++of###4, PageDims_ESTest.java###test06+++getHeight###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getLeft###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getWidth###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test06+++getTop###0, PageDims_ESTest.java###test06+++assertEquals###3, PageDims_ESTest.java###test07+++of###4, PageDims_ESTest.java###test07+++getHeight###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getLeft###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getWidth###0, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++assertEquals###3, PageDims_ESTest.java###test07+++getTop###0, PageDims_ESTest.java###test08+++of###4, PageDims_ESTest.java###test08+++getHeight###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getLeft###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getWidth###0, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++assertEquals###3, PageDims_ESTest.java###test08+++getTop###0, PageDims_ESTest.java###test09+++of###4, PageDims_ESTest.java###test09+++getWidth###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getTop###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getLeft###0, PageDims_ESTest.java###test09+++assertEquals###3, PageDims_ESTest.java###test09+++getHeight###0, PageDims_ESTest.java###test10+++of###4, PageDims_ESTest.java###test10+++getTop###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getWidth###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getHeight###0, PageDims_ESTest.java###test10+++assertEquals###3, PageDims_ESTest.java###test10+++getLeft###0, PageDims_ESTest.java###test11+++of###4, PageDims_ESTest.java###test11+++getLeft###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getWidth###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getTop###0, PageDims_ESTest.java###test11+++assertEquals###3, PageDims_ESTest.java###test11+++getHeight###0]",
            "scaffoldingCode": "/**\n * Scaffolding file used to store all the setups needed to run \n * tests automatically generated by EvoSuite\n * Sat Feb 10 09:56:04 GMT 2024\n */\n\npackage technology.tabula;\n\nimport org.evosuite.runtime.annotation.EvoSuiteClassExclude;\nimport org.junit.BeforeClass;\nimport org.junit.Before;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.evosuite.runtime.sandbox.Sandbox;\nimport org.evosuite.runtime.sandbox.Sandbox.SandboxMode;\n\n@EvoSuiteClassExclude\npublic class PageDims_ESTest_scaffolding {\n\n  @org.junit.Rule\n  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();\n\n  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); \n\n  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);\n\n\n  @BeforeClass\n  public static void initEvoSuiteFramework() { \n    org.evosuite.runtime.RuntimeSettings.className = \"technology.tabula.PageDims\"; \n    org.evosuite.runtime.GuiSupport.initialize(); \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; \n    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; \n    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; \n    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; \n    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.init();\n    setSystemProperties();\n    initializeClasses();\n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n  } \n\n  @AfterClass\n  public static void clearEvoSuiteFramework(){ \n    Sandbox.resetDefaultSecurityManager(); \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n  } \n\n  @Before\n  public void initTestCase(){ \n    threadStopper.storeCurrentThreads();\n    threadStopper.startRecordingTime();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); \n    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); \n    setSystemProperties(); \n    org.evosuite.runtime.GuiSupport.setHeadless(); \n    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); \n    org.evosuite.runtime.agent.InstrumentingAgent.activate(); \n  } \n\n  @After\n  public void doneWithTestCase(){ \n    threadStopper.killAndJoinClientThreads();\n    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); \n    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); \n    resetClasses(); \n    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); \n    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); \n    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); \n  } \n\n  public static void setSystemProperties() {\n \n    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); \n    java.lang.System.setProperty(\"user.dir\", \"C:\\\\Users\\\\wkx\\\\Desktop\\\\tabulapdf_tabula-java\"); \n    java.lang.System.setProperty(\"java.io.tmpdir\", \"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\\"); \n  }\n\n  private static void initializeClasses() {\n    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(PageDims_ESTest_scaffolding.class.getClassLoader() ,\n      \"technology.tabula.PageDims\"\n    );\n  } \n\n  private static void resetClasses() {\n    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(PageDims_ESTest_scaffolding.class.getClassLoader()); \n\n    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\n      \"technology.tabula.PageDims\"\n    );\n  }\n}\n",
            "Test_import": "import org.junit.Test;\nimport technology.tabula.PageDims;\n",
            "TestInfo": "E:/AgentTester v2/Repos/tabulapdf_tabula-java/src/test/java/technology/tabula/PageDims_ESTest.java###test05",
            "AllTestMethod": "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, (-2690.3118F));\n    float float0 = pageDims0.getWidth();\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals((-2690.3118F), pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    PageDims pageDims0 = PageDims.of(1380.5F, 0.0F, 1380.5F, 0.0F);\n    float float0 = pageDims0.getWidth();\n    assertEquals(1380.5F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(1380.5F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getTop();\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    PageDims pageDims0 = PageDims.of(1440.61F, (-1803.6F), 0.0F, 0.0F);\n    float float0 = pageDims0.getTop();\n    assertEquals(1440.61F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-1803.6F), pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 1.0F, 1.0F, 0.0F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(1.0F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n    assertEquals(1.0F, pageDims0.getWidth(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(477.6F, pageDims0.getHeight(), 0.01F);\n    assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);\n    assertEquals(275.9F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-2962.7F), float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getHeight();\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, float0, 0.01F);\n}#####@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    PageDims pageDims0 = PageDims.of(493.8F, (-2760.9F), (-2760.9F), (-2902.3933F));\n    float float0 = pageDims0.getHeight();\n    assertEquals((-2760.9F), pageDims0.getLeft(), 0.01F);\n    assertEquals((-2760.9F), pageDims0.getWidth(), 0.01F);\n    assertEquals((-2902.3933F), float0, 0.01F);\n    assertEquals(493.8F, pageDims0.getTop(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2664.33F), 0.0F, (-2664.33F), 1050.207F);\n    float float0 = pageDims0.getHeight();\n    assertEquals(0.0F, pageDims0.getLeft(), 0.01F);\n    assertEquals((-2664.33F), pageDims0.getWidth(), 0.01F);\n    assertEquals(1050.207F, float0, 0.01F);\n    assertEquals((-2664.33F), pageDims0.getTop(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-0.7453074F), (-0.7453074F), (-0.7453074F), (-0.7453074F));\n    float float0 = pageDims0.getWidth();\n    assertEquals((-0.7453074F), float0, 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getTop(), 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getLeft(), 0.01F);\n    assertEquals((-0.7453074F), pageDims0.getHeight(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-188.25131F), (-188.25131F), (-188.25131F), (-188.25131F));\n    float float0 = pageDims0.getTop();\n    assertEquals((-188.25131F), pageDims0.getWidth(), 0.01F);\n    assertEquals((-188.25131F), float0, 0.01F);\n    assertEquals((-188.25131F), pageDims0.getHeight(), 0.01F);\n    assertEquals((-188.25131F), pageDims0.getLeft(), 0.01F);\n}#####@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(0.0F, float0, 0.01F);\n    assertEquals(0.0F, pageDims0.getWidth(), 0.01F);\n    assertEquals(0.0F, pageDims0.getTop(), 0.01F);\n    assertEquals(0.0F, pageDims0.getHeight(), 0.01F);\n}",
            "TestMethodBody": "@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);\n    float float0 = pageDims0.getLeft();\n    assertEquals(477.6F, pageDims0.getHeight(), 0.01F);\n    assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);\n    assertEquals(275.9F, pageDims0.getWidth(), 0.01F);\n    assertEquals((-2962.7F), float0, 0.01F);\n}",
            "TestRelevantFocal": "[of###4, getLeft###0, getHeight###0, getTop###0, getWidth###0]",
            "TestCodeShell": "/*\n * This file was automatically generated by ChatGLM4\n *  09:56:04 GMT 2024\n */\npackage technology.tabula;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport technology.tabula.PageDims;\n\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)\npublic class PageDims_ESTest extends PageDims_ESTest_scaffolding {\n//TOFILLL\n}\n"
        }
    }
]